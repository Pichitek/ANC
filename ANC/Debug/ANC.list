
ANC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a214  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800a39c  0800a39c  0001a39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a404  0800a404  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a404  0800a404  0001a404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a40c  0800a40c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a40c  0800a40c  0001a40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a410  0800a410  0001a410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800a414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001e9c  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001f98  20001f98  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015e1d  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000387a  00000000  00000000  00035f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  000397c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001028  00000000  00000000  0003a970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025644  00000000  00000000  0003b998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001920a  00000000  00000000  00060fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d51cb  00000000  00000000  0007a1e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014f3b1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048ac  00000000  00000000  0014f404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a384 	.word	0x0800a384

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	0800a384 	.word	0x0800a384

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <cs43l22_write>:
//	adc_val[3] = Outside_buffer[1]; 	//[2], [3] -> outside (microphones outside headphones earcup)
//	//need to check if 0 or 1 is left or right
//}

static void cs43l22_write(uint8_t reg, uint8_t value) //writing value to configurate cs43l22
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af04      	add	r7, sp, #16
 80004e2:	4603      	mov	r3, r0
 80004e4:	460a      	mov	r2, r1
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	4613      	mov	r3, r2
 80004ea:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, AUDIO_I2C_ADDR, reg, 1, &value, sizeof(value), HAL_MAX_DELAY);
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	b29a      	uxth	r2, r3
 80004f0:	f04f 33ff 	mov.w	r3, #4294967295
 80004f4:	9302      	str	r3, [sp, #8]
 80004f6:	2301      	movs	r3, #1
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	1dbb      	adds	r3, r7, #6
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2301      	movs	r3, #1
 8000500:	2194      	movs	r1, #148	; 0x94
 8000502:	4803      	ldr	r0, [pc, #12]	; (8000510 <cs43l22_write+0x34>)
 8000504:	f002 fce2 	bl	8002ecc <HAL_I2C_Mem_Write>
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	2000028c 	.word	0x2000028c

08000514 <cs43l22_init>:

static void cs43l22_init() //setting up amp
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AUDIO_RST_GPIO_Port, AUDIO_RST_Pin, GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2110      	movs	r1, #16
 800051c:	4808      	ldr	r0, [pc, #32]	; (8000540 <cs43l22_init+0x2c>)
 800051e:	f002 fb77 	bl	8002c10 <HAL_GPIO_WritePin>

	cs43l22_write(0x04, 0xaf);
 8000522:	21af      	movs	r1, #175	; 0xaf
 8000524:	2004      	movs	r0, #4
 8000526:	f7ff ffd9 	bl	80004dc <cs43l22_write>
	cs43l22_write(0x06, 0x07);
 800052a:	2107      	movs	r1, #7
 800052c:	2006      	movs	r0, #6
 800052e:	f7ff ffd5 	bl	80004dc <cs43l22_write>
	cs43l22_write(0x02, 0x9e);
 8000532:	219e      	movs	r1, #158	; 0x9e
 8000534:	2002      	movs	r0, #2
 8000536:	f7ff ffd1 	bl	80004dc <cs43l22_write>
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40020c00 	.word	0x40020c00

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054c:	f001 f89a 	bl	8001684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000550:	f000 fbca 	bl	8000ce8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000554:	f000 fd8c 	bl	8001070 <MX_GPIO_Init>
  MX_DMA_Init();
 8000558:	f000 fd4c 	bl	8000ff4 <MX_DMA_Init>
  MX_I2S3_Init();
 800055c:	f000 fd1c 	bl	8000f98 <MX_I2S3_Init>
  MX_I2C1_Init();
 8000560:	f000 fcec 	bl	8000f3c <MX_I2C1_Init>
  MX_ADC1_Init();
 8000564:	f000 fc2a 	bl	8000dbc <MX_ADC1_Init>
  MX_ADC2_Init();
 8000568:	f000 fc88 	bl	8000e7c <MX_ADC2_Init>
  MX_USB_DEVICE_Init();
 800056c:	f009 f9c4 	bl	80098f8 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  cs43l22_init();
 8000570:	f7ff ffd0 	bl	8000514 <cs43l22_init>
  HAL_ADC_Start_DMA(&hadc1, &buffer, 2);
 8000574:	2202      	movs	r2, #2
 8000576:	49cb      	ldr	r1, [pc, #812]	; (80008a4 <main+0x360>)
 8000578:	48cb      	ldr	r0, [pc, #812]	; (80008a8 <main+0x364>)
 800057a:	f001 f95d 	bl	8001838 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, &Outside_buffer, 2);
 800057e:	2202      	movs	r2, #2
 8000580:	49ca      	ldr	r1, [pc, #808]	; (80008ac <main+0x368>)
 8000582:	48cb      	ldr	r0, [pc, #812]	; (80008b0 <main+0x36c>)
 8000584:	f001 f958 	bl	8001838 <HAL_ADC_Start_DMA>

  /* variables for the filter */                  // filter lenght
  const float l = 0.9999;
 8000588:	4bca      	ldr	r3, [pc, #808]	; (80008b4 <main+0x370>)
 800058a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
  float y_l, y_r, e_l, e_r;

  float x_l[5] = {0,0,0,0,0};
 800058e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]
  float w_l[5] = {0,0,0,0,0};
 800059e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]
  float S_l[5][5] = {{100,0,0,0,0},
 80005ae:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80005b2:	2264      	movs	r2, #100	; 0x64
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f009 fedc 	bl	800a374 <memset>
 80005bc:	4bbe      	ldr	r3, [pc, #760]	; (80008b8 <main+0x374>)
 80005be:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80005c2:	4bbd      	ldr	r3, [pc, #756]	; (80008b8 <main+0x374>)
 80005c4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80005c8:	4bbb      	ldr	r3, [pc, #748]	; (80008b8 <main+0x374>)
 80005ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 80005ce:	4bba      	ldr	r3, [pc, #744]	; (80008b8 <main+0x374>)
 80005d0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80005d4:	4bb8      	ldr	r3, [pc, #736]	; (80008b8 <main+0x374>)
 80005d6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
                     {0,100,0,0,0},
                     {0,0,100,0,0},
                     {0,0,0,100,0},
                     {0,0,0,0,100}};

  float psi_l[5] = {0,0,0,0,0};
 80005da:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]
  float inner_l = 0;
 80005ea:	f04f 0300 	mov.w	r3, #0
 80005ee:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
  float outer_psi_l[5][5] = {{0,0,0,0,0},
 80005f2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80005f6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80005fa:	4618      	mov	r0, r3
 80005fc:	2364      	movs	r3, #100	; 0x64
 80005fe:	461a      	mov	r2, r3
 8000600:	2100      	movs	r1, #0
 8000602:	f009 feb7 	bl	800a374 <memset>
                             {0,0,0,0,0},
                             {0,0,0,0,0},
                             {0,0,0,0,0},
                             {0,0,0,0,0}};

  float x_r[5] = {0,0,0,0,0};
 8000606:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800060a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800060e:	461a      	mov	r2, r3
 8000610:	2300      	movs	r3, #0
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	6053      	str	r3, [r2, #4]
 8000616:	6093      	str	r3, [r2, #8]
 8000618:	60d3      	str	r3, [r2, #12]
 800061a:	6113      	str	r3, [r2, #16]
  float w_r[5] = {0,0,0,0,0};
 800061c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000620:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8000624:	461a      	mov	r2, r3
 8000626:	2300      	movs	r3, #0
 8000628:	6013      	str	r3, [r2, #0]
 800062a:	6053      	str	r3, [r2, #4]
 800062c:	6093      	str	r3, [r2, #8]
 800062e:	60d3      	str	r3, [r2, #12]
 8000630:	6113      	str	r3, [r2, #16]
  float S_r[5][5] = {{100,0,0,0,0},
 8000632:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000636:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800063a:	4618      	mov	r0, r3
 800063c:	2364      	movs	r3, #100	; 0x64
 800063e:	461a      	mov	r2, r3
 8000640:	2100      	movs	r1, #0
 8000642:	f009 fe97 	bl	800a374 <memset>
 8000646:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800064a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800064e:	4a9a      	ldr	r2, [pc, #616]	; (80008b8 <main+0x374>)
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000656:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800065a:	4a97      	ldr	r2, [pc, #604]	; (80008b8 <main+0x374>)
 800065c:	619a      	str	r2, [r3, #24]
 800065e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000662:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8000666:	4a94      	ldr	r2, [pc, #592]	; (80008b8 <main+0x374>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
 800066a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800066e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8000672:	4a91      	ldr	r2, [pc, #580]	; (80008b8 <main+0x374>)
 8000674:	649a      	str	r2, [r3, #72]	; 0x48
 8000676:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800067a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800067e:	4a8e      	ldr	r2, [pc, #568]	; (80008b8 <main+0x374>)
 8000680:	661a      	str	r2, [r3, #96]	; 0x60
                     {0,100,0,0,0},
                     {0,0,100,0,0},
                     {0,0,0,100,0},
                     {0,0,0,0,100}};
  
  float psi_r[5] = {0,0,0,0,0};
 8000682:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000686:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800068a:	461a      	mov	r2, r3
 800068c:	2300      	movs	r3, #0
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	6053      	str	r3, [r2, #4]
 8000692:	6093      	str	r3, [r2, #8]
 8000694:	60d3      	str	r3, [r2, #12]
 8000696:	6113      	str	r3, [r2, #16]
  float inner_r = 0;
 8000698:	f04f 0300 	mov.w	r3, #0
 800069c:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
  float outer_psi_r[5][5] = {{0,0,0,0,0},
 80006a0:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80006a4:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80006a8:	4618      	mov	r0, r3
 80006aa:	2364      	movs	r3, #100	; 0x64
 80006ac:	461a      	mov	r2, r3
 80006ae:	2100      	movs	r1, #0
 80006b0:	f009 fe60 	bl	800a374 <memset>
                             {0,0,0,0,0},
                             {0,0,0,0,0}};

  while (1)
  {
	  for(int i =0; i<2; i++)
 80006b4:	2300      	movs	r3, #0
 80006b6:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 80006ba:	e021      	b.n	8000700 <main+0x1bc>
	  {
		  audio[i] = ((buffer[i] - 2048) << 4); // conversion first ADC return only positive value, while i2s accept negative so we need to remove half of the value, second conversion 12bit -> 16 bit
 80006bc:	4a79      	ldr	r2, [pc, #484]	; (80008a4 <main+0x360>)
 80006be:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80006c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006c6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80006ca:	011b      	lsls	r3, r3, #4
 80006cc:	4619      	mov	r1, r3
 80006ce:	4a7b      	ldr	r2, [pc, #492]	; (80008bc <main+0x378>)
 80006d0:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80006d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  audio[i+2] = ((Outside_buffer[i]-2048) <<4);
 80006d8:	4a74      	ldr	r2, [pc, #464]	; (80008ac <main+0x368>)
 80006da:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80006de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006e2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80006e6:	011a      	lsls	r2, r3, #4
 80006e8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80006ec:	3302      	adds	r3, #2
 80006ee:	4611      	mov	r1, r2
 80006f0:	4a72      	ldr	r2, [pc, #456]	; (80008bc <main+0x378>)
 80006f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for(int i =0; i<2; i++)
 80006f6:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80006fa:	3301      	adds	r3, #1
 80006fc:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8000700:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000704:	2b01      	cmp	r3, #1
 8000706:	ddd9      	ble.n	80006bc <main+0x178>
    audio[2] -> noise left channel
    audio[3]-> noise right channel
    */

    // insert new sample
    for(int i = 4; i > 0; i--){
 8000708:	2304      	movs	r3, #4
 800070a:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 800070e:	e028      	b.n	8000762 <main+0x21e>
        x_l[i] = x_l[i - 1];
 8000710:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8000714:	3b01      	subs	r3, #1
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800071c:	443b      	add	r3, r7
 800071e:	3b4c      	subs	r3, #76	; 0x4c
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800072c:	443b      	add	r3, r7
 800072e:	3b4c      	subs	r3, #76	; 0x4c
 8000730:	601a      	str	r2, [r3, #0]
        x_r[i] = x_r[i - 1];
 8000732:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8000736:	3b01      	subs	r3, #1
 8000738:	f507 7210 	add.w	r2, r7, #576	; 0x240
 800073c:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	4413      	add	r3, r2
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800074a:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 800074e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	440b      	add	r3, r1
 8000756:	601a      	str	r2, [r3, #0]
    for(int i = 4; i > 0; i--){
 8000758:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800075c:	3b01      	subs	r3, #1
 800075e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8000762:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8000766:	2b00      	cmp	r3, #0
 8000768:	dcd2      	bgt.n	8000710 <main+0x1cc>
    }
    x_l[0] = audio[2];
 800076a:	4b54      	ldr	r3, [pc, #336]	; (80008bc <main+0x378>)
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	ee07 3a90 	vmov	s15, r3
 8000772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000776:	edc7 7a7d 	vstr	s15, [r7, #500]	; 0x1f4
    x_r[0] = audio[3];
 800077a:	4b50      	ldr	r3, [pc, #320]	; (80008bc <main+0x378>)
 800077c:	68db      	ldr	r3, [r3, #12]
 800077e:	ee07 3a90 	vmov	s15, r3
 8000782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000786:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800078a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800078e:	edc3 7a00 	vstr	s15, [r3]

    // estimate filter output   
    y_l = y_r = 0;
 8000792:	f04f 0300 	mov.w	r3, #0
 8000796:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 800079a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800079e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

    for(int i = 0; i < 5; i++){
 80007a2:	2300      	movs	r3, #0
 80007a4:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80007a8:	e03a      	b.n	8000820 <main+0x2dc>
        y_l+=x_l[i]*w_l[i];
 80007aa:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80007b4:	443b      	add	r3, r7
 80007b6:	3b4c      	subs	r3, #76	; 0x4c
 80007b8:	ed93 7a00 	vldr	s14, [r3]
 80007bc:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80007c6:	443b      	add	r3, r7
 80007c8:	3b60      	subs	r3, #96	; 0x60
 80007ca:	edd3 7a00 	vldr	s15, [r3]
 80007ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007d2:	ed97 7a8f 	vldr	s14, [r7, #572]	; 0x23c
 80007d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007da:	edc7 7a8f 	vstr	s15, [r7, #572]	; 0x23c
        y_r+=x_r[i]*w_r[i];
 80007de:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80007e2:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 80007e6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	4413      	add	r3, r2
 80007ee:	ed93 7a00 	vldr	s14, [r3]
 80007f2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80007f6:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80007fa:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	4413      	add	r3, r2
 8000802:	edd3 7a00 	vldr	s15, [r3]
 8000806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800080a:	ed97 7a8e 	vldr	s14, [r7, #568]	; 0x238
 800080e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000812:	edc7 7a8e 	vstr	s15, [r7, #568]	; 0x238
    for(int i = 0; i < 5; i++){
 8000816:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800081a:	3301      	adds	r3, #1
 800081c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8000820:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000824:	2b04      	cmp	r3, #4
 8000826:	ddc0      	ble.n	80007aa <main+0x266>
    }
    e_l = audio[0] - y_l;
 8000828:	4b24      	ldr	r3, [pc, #144]	; (80008bc <main+0x378>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	ee07 3a90 	vmov	s15, r3
 8000830:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000834:	edd7 7a8f 	vldr	s15, [r7, #572]	; 0x23c
 8000838:	ee77 7a67 	vsub.f32	s15, s14, s15
 800083c:	edc7 7a83 	vstr	s15, [r7, #524]	; 0x20c
    e_r = audio[0] - y_r;
 8000840:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <main+0x378>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	ee07 3a90 	vmov	s15, r3
 8000848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800084c:	edd7 7a8e 	vldr	s15, [r7, #568]	; 0x238
 8000850:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000854:	edc7 7a82 	vstr	s15, [r7, #520]	; 0x208

    // update filter coefficient
    inner_l = inner_r = 0;
 8000858:	f04f 0300 	mov.w	r3, #0
 800085c:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8000860:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8000864:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234

    for(int i = 0; i < 5; i++){
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800086e:	e0cb      	b.n	8000a08 <main+0x4c4>
      psi_l[i] = 0;
 8000870:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800087a:	443b      	add	r3, r7
 800087c:	3bd8      	subs	r3, #216	; 0xd8
 800087e:	f04f 0200 	mov.w	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
      psi_r[i] = 0;
 8000884:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000888:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 800088c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	4413      	add	r3, r2
 8000894:	f04f 0200 	mov.w	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < 5; j++){
 800089a:	2300      	movs	r3, #0
 800089c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80008a0:	e073      	b.n	800098a <main+0x446>
 80008a2:	bf00      	nop
 80008a4:	2000011c 	.word	0x2000011c
 80008a8:	2000013c 	.word	0x2000013c
 80008ac:	20000124 	.word	0x20000124
 80008b0:	20000184 	.word	0x20000184
 80008b4:	3f7ff972 	.word	0x3f7ff972
 80008b8:	42c80000 	.word	0x42c80000
 80008bc:	2000012c 	.word	0x2000012c
            psi_l[i]+=S_l[i][j]*x_l[j];   // psi = S@x
 80008c0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80008ca:	443b      	add	r3, r7
 80008cc:	3bd8      	subs	r3, #216	; 0xd8
 80008ce:	ed93 7a00 	vldr	s14, [r3]
 80008d2:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80008d6:	4613      	mov	r3, r2
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	4413      	add	r3, r2
 80008dc:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80008e0:	4413      	add	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80008e8:	443b      	add	r3, r7
 80008ea:	3bc4      	subs	r3, #196	; 0xc4
 80008ec:	edd3 6a00 	vldr	s13, [r3]
 80008f0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80008fa:	443b      	add	r3, r7
 80008fc:	3b4c      	subs	r3, #76	; 0x4c
 80008fe:	edd3 7a00 	vldr	s15, [r3]
 8000902:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800090a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000914:	443b      	add	r3, r7
 8000916:	3bd8      	subs	r3, #216	; 0xd8
 8000918:	edc3 7a00 	vstr	s15, [r3]
            psi_r[i]+=S_r[i][j]*x_r[j];
 800091c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000920:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8000924:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	4413      	add	r3, r2
 800092c:	ed93 7a00 	vldr	s14, [r3]
 8000930:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000934:	f5a3 71e4 	sub.w	r1, r3, #456	; 0x1c8
 8000938:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800093c:	4613      	mov	r3, r2
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	4413      	add	r3, r2
 8000942:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8000946:	4413      	add	r3, r2
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	440b      	add	r3, r1
 800094c:	edd3 6a00 	vldr	s13, [r3]
 8000950:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000954:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8000958:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	4413      	add	r3, r2
 8000960:	edd3 7a00 	vldr	s15, [r3]
 8000964:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000968:	ee77 7a27 	vadd.f32	s15, s14, s15
 800096c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000970:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8000974:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	4413      	add	r3, r2
 800097c:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 5; j++){
 8000980:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000984:	3301      	adds	r3, #1
 8000986:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800098a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800098e:	2b04      	cmp	r3, #4
 8000990:	dd96      	ble.n	80008c0 <main+0x37c>
        }
        inner_l += psi_l[i]*x_l[i]; // inner
 8000992:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800099c:	443b      	add	r3, r7
 800099e:	3bd8      	subs	r3, #216	; 0xd8
 80009a0:	ed93 7a00 	vldr	s14, [r3]
 80009a4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80009ae:	443b      	add	r3, r7
 80009b0:	3b4c      	subs	r3, #76	; 0x4c
 80009b2:	edd3 7a00 	vldr	s15, [r3]
 80009b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ba:	ed97 7a8d 	vldr	s14, [r7, #564]	; 0x234
 80009be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009c2:	edc7 7a8d 	vstr	s15, [r7, #564]	; 0x234
        inner_r += psi_r[i]*x_r[i];
 80009c6:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80009ca:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 80009ce:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	4413      	add	r3, r2
 80009d6:	ed93 7a00 	vldr	s14, [r3]
 80009da:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80009de:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 80009e2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	4413      	add	r3, r2
 80009ea:	edd3 7a00 	vldr	s15, [r3]
 80009ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009f2:	ed97 7a8c 	vldr	s14, [r7, #560]	; 0x230
 80009f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009fa:	edc7 7a8c 	vstr	s15, [r7, #560]	; 0x230
    for(int i = 0; i < 5; i++){
 80009fe:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000a02:	3301      	adds	r3, #1
 8000a04:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8000a08:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000a0c:	2b04      	cmp	r3, #4
 8000a0e:	f77f af2f 	ble.w	8000870 <main+0x32c>
    }

    for(int i = 0; i < 5; i++){
 8000a12:	2300      	movs	r3, #0
 8000a14:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000a18:	e13e      	b.n	8000c98 <main+0x754>
        for(int j=0;j<5;j++){
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8000a20:	e130      	b.n	8000c84 <main+0x740>
            outer_psi_l[i][j] = psi_l[i] * psi_l[j] / (inner_l + l);   // outer = outer/(l+inner)
 8000a22:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000a2c:	443b      	add	r3, r7
 8000a2e:	3bd8      	subs	r3, #216	; 0xd8
 8000a30:	ed93 7a00 	vldr	s14, [r3]
 8000a34:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000a3e:	443b      	add	r3, r7
 8000a40:	3bd8      	subs	r3, #216	; 0xd8
 8000a42:	edd3 7a00 	vldr	s15, [r3]
 8000a46:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000a4a:	ed97 7a8d 	vldr	s14, [r7, #564]	; 0x234
 8000a4e:	edd7 7a84 	vldr	s15, [r7, #528]	; 0x210
 8000a52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a5a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000a5e:	f5a3 719e 	sub.w	r1, r3, #316	; 0x13c
 8000a62:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8000a66:	4613      	mov	r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	4413      	add	r3, r2
 8000a6c:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000a70:	4413      	add	r3, r2
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	440b      	add	r3, r1
 8000a76:	edc3 7a00 	vstr	s15, [r3]
            S_l[i][j] = (S_l[i][j] - outer_psi_l[i][j])/l;               // S = (S - outer)/l
 8000a7a:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8000a7e:	4613      	mov	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4413      	add	r3, r2
 8000a84:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000a88:	4413      	add	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000a90:	443b      	add	r3, r7
 8000a92:	3bc4      	subs	r3, #196	; 0xc4
 8000a94:	ed93 7a00 	vldr	s14, [r3]
 8000a98:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000a9c:	f5a3 719e 	sub.w	r1, r3, #316	; 0x13c
 8000aa0:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	4413      	add	r3, r2
 8000aaa:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000aae:	4413      	add	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	edd3 7a00 	vldr	s15, [r3]
 8000ab8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000abc:	ed97 7a84 	vldr	s14, [r7, #528]	; 0x210
 8000ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ac4:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8000ac8:	4613      	mov	r3, r2
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4413      	add	r3, r2
 8000ace:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000ad2:	4413      	add	r3, r2
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000ada:	443b      	add	r3, r7
 8000adc:	3bc4      	subs	r3, #196	; 0xc4
 8000ade:	edc3 7a00 	vstr	s15, [r3]
            w_l[i]+=S_l[i][j]*x_l[j]*e_l;                                  // w += e * (S@x)
 8000ae2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000aec:	443b      	add	r3, r7
 8000aee:	3b60      	subs	r3, #96	; 0x60
 8000af0:	ed93 7a00 	vldr	s14, [r3]
 8000af4:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8000af8:	4613      	mov	r3, r2
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	4413      	add	r3, r2
 8000afe:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000b02:	4413      	add	r3, r2
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000b0a:	443b      	add	r3, r7
 8000b0c:	3bc4      	subs	r3, #196	; 0xc4
 8000b0e:	edd3 6a00 	vldr	s13, [r3]
 8000b12:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000b1c:	443b      	add	r3, r7
 8000b1e:	3b4c      	subs	r3, #76	; 0x4c
 8000b20:	edd3 7a00 	vldr	s15, [r3]
 8000b24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000b28:	edd7 7a83 	vldr	s15, [r7, #524]	; 0x20c
 8000b2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b34:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000b3e:	443b      	add	r3, r7
 8000b40:	3b60      	subs	r3, #96	; 0x60
 8000b42:	edc3 7a00 	vstr	s15, [r3]

            outer_psi_r[i][j] = psi_r[i] * psi_r[j] / (inner_r + l);   // outer = outer/(l+inner)
 8000b46:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000b4a:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8000b4e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	4413      	add	r3, r2
 8000b56:	ed93 7a00 	vldr	s14, [r3]
 8000b5a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000b5e:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8000b62:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	4413      	add	r3, r2
 8000b6a:	edd3 7a00 	vldr	s15, [r3]
 8000b6e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000b72:	ed97 7a8c 	vldr	s14, [r7, #560]	; 0x230
 8000b76:	edd7 7a84 	vldr	s15, [r7, #528]	; 0x210
 8000b7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b82:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000b86:	f5a3 7110 	sub.w	r1, r3, #576	; 0x240
 8000b8a:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8000b8e:	4613      	mov	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	4413      	add	r3, r2
 8000b94:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000b98:	4413      	add	r3, r2
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	440b      	add	r3, r1
 8000b9e:	edc3 7a00 	vstr	s15, [r3]
            S_r[i][j] = (S_r[i][j] - outer_psi_r[i][j])/l;               // S = (S - outer)/l
 8000ba2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000ba6:	f5a3 71e4 	sub.w	r1, r3, #456	; 0x1c8
 8000baa:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8000bae:	4613      	mov	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	4413      	add	r3, r2
 8000bb4:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000bb8:	4413      	add	r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	ed93 7a00 	vldr	s14, [r3]
 8000bc2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000bc6:	f5a3 7110 	sub.w	r1, r3, #576	; 0x240
 8000bca:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8000bce:	4613      	mov	r3, r2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	4413      	add	r3, r2
 8000bd4:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000bd8:	4413      	add	r3, r2
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	440b      	add	r3, r1
 8000bde:	edd3 7a00 	vldr	s15, [r3]
 8000be2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000be6:	ed97 7a84 	vldr	s14, [r7, #528]	; 0x210
 8000bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bee:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000bf2:	f5a3 71e4 	sub.w	r1, r3, #456	; 0x1c8
 8000bf6:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000c04:	4413      	add	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	440b      	add	r3, r1
 8000c0a:	edc3 7a00 	vstr	s15, [r3]
            w_r[i]+=S_r[i][j]*x_r[j]*e_r; 
 8000c0e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000c12:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8000c16:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	ed93 7a00 	vldr	s14, [r3]
 8000c22:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000c26:	f5a3 71e4 	sub.w	r1, r3, #456	; 0x1c8
 8000c2a:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8000c2e:	4613      	mov	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	4413      	add	r3, r2
 8000c34:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000c38:	4413      	add	r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	edd3 6a00 	vldr	s13, [r3]
 8000c42:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000c46:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8000c4a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	4413      	add	r3, r2
 8000c52:	edd3 7a00 	vldr	s15, [r3]
 8000c56:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000c5a:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 8000c5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c66:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000c6a:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8000c6e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	edc3 7a00 	vstr	s15, [r3]
        for(int j=0;j<5;j++){
 8000c7a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000c7e:	3301      	adds	r3, #1
 8000c80:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8000c84:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000c88:	2b04      	cmp	r3, #4
 8000c8a:	f77f aeca 	ble.w	8000a22 <main+0x4de>
    for(int i = 0; i < 5; i++){
 8000c8e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000c92:	3301      	adds	r3, #1
 8000c94:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000c98:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000c9c:	2b04      	cmp	r3, #4
 8000c9e:	f77f aebc 	ble.w	8000a1a <main+0x4d6>
        }
    }


	  //PLACE FOR FILTER ENDED
	  i2s_data[0] = audio[2]; //inserting samples to array sent to amplifier
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <main+0x798>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <main+0x79c>)
 8000caa:	801a      	strh	r2, [r3, #0]
	  i2s_data[1] = audio[3];
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <main+0x798>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <main+0x79c>)
 8000cb4:	805a      	strh	r2, [r3, #2]
	  HAL_I2S_Transmit_DMA(&hi2s3,  i2s_data, 2); //transmit data to cs43122
 8000cb6:	2202      	movs	r2, #2
 8000cb8:	4909      	ldr	r1, [pc, #36]	; (8000ce0 <main+0x79c>)
 8000cba:	480a      	ldr	r0, [pc, #40]	; (8000ce4 <main+0x7a0>)
 8000cbc:	f002 fd5e 	bl	800377c <HAL_I2S_Transmit_DMA>
	  CDC_Transmit_FS((uint8_t *) i2s_data, strlen(i2s_data));
 8000cc0:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <main+0x79c>)
 8000cc2:	f7ff fa81 	bl	80001c8 <strlen>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <main+0x79c>)
 8000cce:	f008 fed1 	bl	8009a74 <CDC_Transmit_FS>
	  HAL_Delay(100);
 8000cd2:	2064      	movs	r0, #100	; 0x64
 8000cd4:	f000 fd48 	bl	8001768 <HAL_Delay>
	  for(int i =0; i<2; i++)
 8000cd8:	e4ec      	b.n	80006b4 <main+0x170>
 8000cda:	bf00      	nop
 8000cdc:	2000012c 	.word	0x2000012c
 8000ce0:	20000118 	.word	0x20000118
 8000ce4:	200002e0 	.word	0x200002e0

08000ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b094      	sub	sp, #80	; 0x50
 8000cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cee:	f107 0320 	add.w	r3, r7, #32
 8000cf2:	2230      	movs	r2, #48	; 0x30
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f009 fb3c 	bl	800a374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	4b28      	ldr	r3, [pc, #160]	; (8000db4 <SystemClock_Config+0xcc>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	4a27      	ldr	r2, [pc, #156]	; (8000db4 <SystemClock_Config+0xcc>)
 8000d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1c:	4b25      	ldr	r3, [pc, #148]	; (8000db4 <SystemClock_Config+0xcc>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d28:	2300      	movs	r3, #0
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <SystemClock_Config+0xd0>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a21      	ldr	r2, [pc, #132]	; (8000db8 <SystemClock_Config+0xd0>)
 8000d32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <SystemClock_Config+0xd0>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d44:	2301      	movs	r3, #1
 8000d46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d58:	2304      	movs	r3, #4
 8000d5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000d5c:	2390      	movs	r3, #144	; 0x90
 8000d5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000d64:	2306      	movs	r3, #6
 8000d66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d68:	f107 0320 	add.w	r3, r7, #32
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f004 fbe9 	bl	8005544 <HAL_RCC_OscConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d78:	f000 f9e6 	bl	8001148 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d80:	2302      	movs	r3, #2
 8000d82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000d88:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000d8e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	2104      	movs	r1, #4
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f004 fe4a 	bl	8005a34 <HAL_RCC_ClockConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000da6:	f000 f9cf 	bl	8001148 <Error_Handler>
  }
}
 8000daa:	bf00      	nop
 8000dac:	3750      	adds	r7, #80	; 0x50
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40007000 	.word	0x40007000

08000dbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dce:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <MX_ADC1_Init+0xb4>)
 8000dd0:	4a28      	ldr	r2, [pc, #160]	; (8000e74 <MX_ADC1_Init+0xb8>)
 8000dd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000dd4:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <MX_ADC1_Init+0xb4>)
 8000dd6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000dda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ddc:	4b24      	ldr	r3, [pc, #144]	; (8000e70 <MX_ADC1_Init+0xb4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000de2:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <MX_ADC1_Init+0xb4>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000de8:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <MX_ADC1_Init+0xb4>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dee:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <MX_ADC1_Init+0xb4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000df6:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <MX_ADC1_Init+0xb4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <MX_ADC1_Init+0xb4>)
 8000dfe:	4a1e      	ldr	r2, [pc, #120]	; (8000e78 <MX_ADC1_Init+0xbc>)
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <MX_ADC1_Init+0xb4>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000e08:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <MX_ADC1_Init+0xb4>)
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <MX_ADC1_Init+0xb4>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e16:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <MX_ADC1_Init+0xb4>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e1c:	4814      	ldr	r0, [pc, #80]	; (8000e70 <MX_ADC1_Init+0xb4>)
 8000e1e:	f000 fcc7 	bl	80017b0 <HAL_ADC_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e28:	f000 f98e 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e38:	463b      	mov	r3, r7
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <MX_ADC1_Init+0xb4>)
 8000e3e:	f000 fe29 	bl	8001a94 <HAL_ADC_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e48:	f000 f97e 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e54:	463b      	mov	r3, r7
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_ADC1_Init+0xb4>)
 8000e5a:	f000 fe1b 	bl	8001a94 <HAL_ADC_ConfigChannel>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e64:	f000 f970 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	2000013c 	.word	0x2000013c
 8000e74:	40012000 	.word	0x40012000
 8000e78:	0f000001 	.word	0x0f000001

08000e7c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e82:	463b      	mov	r3, r7
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000e8e:	4b28      	ldr	r3, [pc, #160]	; (8000f30 <MX_ADC2_Init+0xb4>)
 8000e90:	4a28      	ldr	r2, [pc, #160]	; (8000f34 <MX_ADC2_Init+0xb8>)
 8000e92:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000e94:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <MX_ADC2_Init+0xb4>)
 8000e96:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e9a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e9c:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <MX_ADC2_Init+0xb4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8000ea2:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <MX_ADC2_Init+0xb4>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000ea8:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <MX_ADC2_Init+0xb4>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000eae:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <MX_ADC2_Init+0xb4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <MX_ADC2_Init+0xb4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ebc:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <MX_ADC2_Init+0xb4>)
 8000ebe:	4a1e      	ldr	r2, [pc, #120]	; (8000f38 <MX_ADC2_Init+0xbc>)
 8000ec0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <MX_ADC2_Init+0xb4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <MX_ADC2_Init+0xb4>)
 8000eca:	2202      	movs	r2, #2
 8000ecc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <MX_ADC2_Init+0xb4>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <MX_ADC2_Init+0xb4>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000edc:	4814      	ldr	r0, [pc, #80]	; (8000f30 <MX_ADC2_Init+0xb4>)
 8000ede:	f000 fc67 	bl	80017b0 <HAL_ADC_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000ee8:	f000 f92e 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000eec:	2302      	movs	r3, #2
 8000eee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ef8:	463b      	mov	r3, r7
 8000efa:	4619      	mov	r1, r3
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <MX_ADC2_Init+0xb4>)
 8000efe:	f000 fdc9 	bl	8001a94 <HAL_ADC_ConfigChannel>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000f08:	f000 f91e 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f14:	463b      	mov	r3, r7
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_ADC2_Init+0xb4>)
 8000f1a:	f000 fdbb 	bl	8001a94 <HAL_ADC_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000f24:	f000 f910 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000184 	.word	0x20000184
 8000f34:	40012100 	.word	0x40012100
 8000f38:	0f000001 	.word	0x0f000001

08000f3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <MX_I2C1_Init+0x50>)
 8000f42:	4a13      	ldr	r2, [pc, #76]	; (8000f90 <MX_I2C1_Init+0x54>)
 8000f44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_I2C1_Init+0x50>)
 8000f48:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <MX_I2C1_Init+0x58>)
 8000f4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_I2C1_Init+0x50>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_I2C1_Init+0x50>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_I2C1_Init+0x50>)
 8000f5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f60:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <MX_I2C1_Init+0x50>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_I2C1_Init+0x50>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <MX_I2C1_Init+0x50>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_I2C1_Init+0x50>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <MX_I2C1_Init+0x50>)
 8000f7a:	f001 fe63 	bl	8002c44 <HAL_I2C_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f84:	f000 f8e0 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	2000028c 	.word	0x2000028c
 8000f90:	40005400 	.word	0x40005400
 8000f94:	000186a0 	.word	0x000186a0

08000f98 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <MX_I2S3_Init+0x54>)
 8000f9e:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <MX_I2S3_Init+0x58>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_I2S3_Init+0x54>)
 8000fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_I2S3_Init+0x54>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_I2S3_Init+0x54>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <MX_I2S3_Init+0x54>)
 8000fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fbc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_I2S3_Init+0x54>)
 8000fc0:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000fc4:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_I2S3_Init+0x54>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <MX_I2S3_Init+0x54>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_I2S3_Init+0x54>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <MX_I2S3_Init+0x54>)
 8000fda:	f002 fa8f 	bl	80034fc <HAL_I2S_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000fe4:	f000 f8b0 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200002e0 	.word	0x200002e0
 8000ff0:	40003c00 	.word	0x40003c00

08000ff4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	; (800106c <MX_DMA_Init+0x78>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a1a      	ldr	r2, [pc, #104]	; (800106c <MX_DMA_Init+0x78>)
 8001004:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <MX_DMA_Init+0x78>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_DMA_Init+0x78>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a13      	ldr	r2, [pc, #76]	; (800106c <MX_DMA_Init+0x78>)
 8001020:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_DMA_Init+0x78>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	2010      	movs	r0, #16
 8001038:	f001 f8a7 	bl	800218a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800103c:	2010      	movs	r0, #16
 800103e:	f001 f8c0 	bl	80021c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	2038      	movs	r0, #56	; 0x38
 8001048:	f001 f89f 	bl	800218a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800104c:	2038      	movs	r0, #56	; 0x38
 800104e:	f001 f8b8 	bl	80021c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	203a      	movs	r0, #58	; 0x3a
 8001058:	f001 f897 	bl	800218a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800105c:	203a      	movs	r0, #58	; 0x3a
 800105e:	f001 f8b0 	bl	80021c2 <HAL_NVIC_EnableIRQ>

}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800

08001070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <MX_GPIO_Init+0xd0>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a2c      	ldr	r2, [pc, #176]	; (8001140 <MX_GPIO_Init+0xd0>)
 8001090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <MX_GPIO_Init+0xd0>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b26      	ldr	r3, [pc, #152]	; (8001140 <MX_GPIO_Init+0xd0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a25      	ldr	r2, [pc, #148]	; (8001140 <MX_GPIO_Init+0xd0>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b23      	ldr	r3, [pc, #140]	; (8001140 <MX_GPIO_Init+0xd0>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <MX_GPIO_Init+0xd0>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a1e      	ldr	r2, [pc, #120]	; (8001140 <MX_GPIO_Init+0xd0>)
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <MX_GPIO_Init+0xd0>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_GPIO_Init+0xd0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a17      	ldr	r2, [pc, #92]	; (8001140 <MX_GPIO_Init+0xd0>)
 80010e4:	f043 0308 	orr.w	r3, r3, #8
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_GPIO_Init+0xd0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	603b      	str	r3, [r7, #0]
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_GPIO_Init+0xd0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a10      	ldr	r2, [pc, #64]	; (8001140 <MX_GPIO_Init+0xd0>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_GPIO_Init+0xd0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_RST_GPIO_Port, AUDIO_RST_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2110      	movs	r1, #16
 8001116:	480b      	ldr	r0, [pc, #44]	; (8001144 <MX_GPIO_Init+0xd4>)
 8001118:	f001 fd7a 	bl	8002c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 800111c:	2310      	movs	r3, #16
 800111e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2301      	movs	r3, #1
 8001122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	4804      	ldr	r0, [pc, #16]	; (8001144 <MX_GPIO_Init+0xd4>)
 8001134:	f001 fbd0 	bl	80028d8 <HAL_GPIO_Init>

}
 8001138:	bf00      	nop
 800113a:	3728      	adds	r7, #40	; 0x28
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40023800 	.word	0x40023800
 8001144:	40020c00 	.word	0x40020c00

08001148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800114c:	b672      	cpsid	i
}
 800114e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001150:	e7fe      	b.n	8001150 <Error_Handler+0x8>
	...

08001154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <HAL_MspInit+0x4c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	4a0f      	ldr	r2, [pc, #60]	; (80011a0 <HAL_MspInit+0x4c>)
 8001164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001168:	6453      	str	r3, [r2, #68]	; 0x44
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <HAL_MspInit+0x4c>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <HAL_MspInit+0x4c>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	4a08      	ldr	r2, [pc, #32]	; (80011a0 <HAL_MspInit+0x4c>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001184:	6413      	str	r3, [r2, #64]	; 0x40
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_MspInit+0x4c>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001192:	2007      	movs	r0, #7
 8001194:	f000 ffee 	bl	8002174 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40023800 	.word	0x40023800

080011a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a5e      	ldr	r2, [pc, #376]	; (800133c <HAL_ADC_MspInit+0x198>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d158      	bne.n	8001278 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
 80011ca:	4b5d      	ldr	r3, [pc, #372]	; (8001340 <HAL_ADC_MspInit+0x19c>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a5c      	ldr	r2, [pc, #368]	; (8001340 <HAL_ADC_MspInit+0x19c>)
 80011d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b5a      	ldr	r3, [pc, #360]	; (8001340 <HAL_ADC_MspInit+0x19c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011de:	61bb      	str	r3, [r7, #24]
 80011e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	4b56      	ldr	r3, [pc, #344]	; (8001340 <HAL_ADC_MspInit+0x19c>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a55      	ldr	r2, [pc, #340]	; (8001340 <HAL_ADC_MspInit+0x19c>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b53      	ldr	r3, [pc, #332]	; (8001340 <HAL_ADC_MspInit+0x19c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011fe:	2303      	movs	r3, #3
 8001200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001202:	2303      	movs	r3, #3
 8001204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	4619      	mov	r1, r3
 8001210:	484c      	ldr	r0, [pc, #304]	; (8001344 <HAL_ADC_MspInit+0x1a0>)
 8001212:	f001 fb61 	bl	80028d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001216:	4b4c      	ldr	r3, [pc, #304]	; (8001348 <HAL_ADC_MspInit+0x1a4>)
 8001218:	4a4c      	ldr	r2, [pc, #304]	; (800134c <HAL_ADC_MspInit+0x1a8>)
 800121a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800121c:	4b4a      	ldr	r3, [pc, #296]	; (8001348 <HAL_ADC_MspInit+0x1a4>)
 800121e:	2200      	movs	r2, #0
 8001220:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001222:	4b49      	ldr	r3, [pc, #292]	; (8001348 <HAL_ADC_MspInit+0x1a4>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001228:	4b47      	ldr	r3, [pc, #284]	; (8001348 <HAL_ADC_MspInit+0x1a4>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800122e:	4b46      	ldr	r3, [pc, #280]	; (8001348 <HAL_ADC_MspInit+0x1a4>)
 8001230:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001234:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001236:	4b44      	ldr	r3, [pc, #272]	; (8001348 <HAL_ADC_MspInit+0x1a4>)
 8001238:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800123c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800123e:	4b42      	ldr	r3, [pc, #264]	; (8001348 <HAL_ADC_MspInit+0x1a4>)
 8001240:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001244:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001246:	4b40      	ldr	r3, [pc, #256]	; (8001348 <HAL_ADC_MspInit+0x1a4>)
 8001248:	f44f 7280 	mov.w	r2, #256	; 0x100
 800124c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800124e:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <HAL_ADC_MspInit+0x1a4>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001254:	4b3c      	ldr	r3, [pc, #240]	; (8001348 <HAL_ADC_MspInit+0x1a4>)
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800125a:	483b      	ldr	r0, [pc, #236]	; (8001348 <HAL_ADC_MspInit+0x1a4>)
 800125c:	f000 ffcc 	bl	80021f8 <HAL_DMA_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001266:	f7ff ff6f 	bl	8001148 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a36      	ldr	r2, [pc, #216]	; (8001348 <HAL_ADC_MspInit+0x1a4>)
 800126e:	639a      	str	r2, [r3, #56]	; 0x38
 8001270:	4a35      	ldr	r2, [pc, #212]	; (8001348 <HAL_ADC_MspInit+0x1a4>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001276:	e05d      	b.n	8001334 <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a34      	ldr	r2, [pc, #208]	; (8001350 <HAL_ADC_MspInit+0x1ac>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d158      	bne.n	8001334 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	4b2e      	ldr	r3, [pc, #184]	; (8001340 <HAL_ADC_MspInit+0x19c>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	4a2d      	ldr	r2, [pc, #180]	; (8001340 <HAL_ADC_MspInit+0x19c>)
 800128c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <HAL_ADC_MspInit+0x19c>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b27      	ldr	r3, [pc, #156]	; (8001340 <HAL_ADC_MspInit+0x19c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a26      	ldr	r2, [pc, #152]	; (8001340 <HAL_ADC_MspInit+0x19c>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b24      	ldr	r3, [pc, #144]	; (8001340 <HAL_ADC_MspInit+0x19c>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012ba:	230c      	movs	r3, #12
 80012bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012be:	2303      	movs	r3, #3
 80012c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 031c 	add.w	r3, r7, #28
 80012ca:	4619      	mov	r1, r3
 80012cc:	481d      	ldr	r0, [pc, #116]	; (8001344 <HAL_ADC_MspInit+0x1a0>)
 80012ce:	f001 fb03 	bl	80028d8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <HAL_ADC_MspInit+0x1b0>)
 80012d4:	4a20      	ldr	r2, [pc, #128]	; (8001358 <HAL_ADC_MspInit+0x1b4>)
 80012d6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80012d8:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <HAL_ADC_MspInit+0x1b0>)
 80012da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012de:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012e0:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <HAL_ADC_MspInit+0x1b0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_ADC_MspInit+0x1b0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HAL_ADC_MspInit+0x1b0>)
 80012ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012f2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012f4:	4b17      	ldr	r3, [pc, #92]	; (8001354 <HAL_ADC_MspInit+0x1b0>)
 80012f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012fa:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_ADC_MspInit+0x1b0>)
 80012fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001302:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <HAL_ADC_MspInit+0x1b0>)
 8001306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800130a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_ADC_MspInit+0x1b0>)
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <HAL_ADC_MspInit+0x1b0>)
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001318:	480e      	ldr	r0, [pc, #56]	; (8001354 <HAL_ADC_MspInit+0x1b0>)
 800131a:	f000 ff6d 	bl	80021f8 <HAL_DMA_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8001324:	f7ff ff10 	bl	8001148 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <HAL_ADC_MspInit+0x1b0>)
 800132c:	639a      	str	r2, [r3, #56]	; 0x38
 800132e:	4a09      	ldr	r2, [pc, #36]	; (8001354 <HAL_ADC_MspInit+0x1b0>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001334:	bf00      	nop
 8001336:	3730      	adds	r7, #48	; 0x30
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40012000 	.word	0x40012000
 8001340:	40023800 	.word	0x40023800
 8001344:	40020000 	.word	0x40020000
 8001348:	200001cc 	.word	0x200001cc
 800134c:	40026410 	.word	0x40026410
 8001350:	40012100 	.word	0x40012100
 8001354:	2000022c 	.word	0x2000022c
 8001358:	40026440 	.word	0x40026440

0800135c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a19      	ldr	r2, [pc, #100]	; (80013e0 <HAL_I2C_MspInit+0x84>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d12c      	bne.n	80013d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <HAL_I2C_MspInit+0x88>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a17      	ldr	r2, [pc, #92]	; (80013e4 <HAL_I2C_MspInit+0x88>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_I2C_MspInit+0x88>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800139a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800139e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a0:	2312      	movs	r3, #18
 80013a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ac:	2304      	movs	r3, #4
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	480c      	ldr	r0, [pc, #48]	; (80013e8 <HAL_I2C_MspInit+0x8c>)
 80013b8:	f001 fa8e 	bl	80028d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_I2C_MspInit+0x88>)
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_I2C_MspInit+0x88>)
 80013c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013ca:	6413      	str	r3, [r2, #64]	; 0x40
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_I2C_MspInit+0x88>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013d8:	bf00      	nop
 80013da:	3728      	adds	r7, #40	; 0x28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40005400 	.word	0x40005400
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020400 	.word	0x40020400

080013ec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08e      	sub	sp, #56	; 0x38
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a4e      	ldr	r2, [pc, #312]	; (8001550 <HAL_I2S_MspInit+0x164>)
 8001418:	4293      	cmp	r3, r2
 800141a:	f040 8094 	bne.w	8001546 <HAL_I2S_MspInit+0x15a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800141e:	2301      	movs	r3, #1
 8001420:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8001422:	2332      	movs	r3, #50	; 0x32
 8001424:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001426:	2302      	movs	r3, #2
 8001428:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4618      	mov	r0, r3
 8001430:	f004 fd0c 	bl	8005e4c <HAL_RCCEx_PeriphCLKConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800143a:	f7ff fe85 	bl	8001148 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	4b44      	ldr	r3, [pc, #272]	; (8001554 <HAL_I2S_MspInit+0x168>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	4a43      	ldr	r2, [pc, #268]	; (8001554 <HAL_I2S_MspInit+0x168>)
 8001448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
 800144e:	4b41      	ldr	r3, [pc, #260]	; (8001554 <HAL_I2S_MspInit+0x168>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <HAL_I2S_MspInit+0x168>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a3c      	ldr	r2, [pc, #240]	; (8001554 <HAL_I2S_MspInit+0x168>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b3a      	ldr	r3, [pc, #232]	; (8001554 <HAL_I2S_MspInit+0x168>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	4b36      	ldr	r3, [pc, #216]	; (8001554 <HAL_I2S_MspInit+0x168>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a35      	ldr	r2, [pc, #212]	; (8001554 <HAL_I2S_MspInit+0x168>)
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b33      	ldr	r3, [pc, #204]	; (8001554 <HAL_I2S_MspInit+0x168>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001492:	2310      	movs	r3, #16
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014a2:	2306      	movs	r3, #6
 80014a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	482a      	ldr	r0, [pc, #168]	; (8001558 <HAL_I2S_MspInit+0x16c>)
 80014ae:	f001 fa13 	bl	80028d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80014b2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014c4:	2306      	movs	r3, #6
 80014c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014cc:	4619      	mov	r1, r3
 80014ce:	4823      	ldr	r0, [pc, #140]	; (800155c <HAL_I2S_MspInit+0x170>)
 80014d0:	f001 fa02 	bl	80028d8 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80014d4:	4b22      	ldr	r3, [pc, #136]	; (8001560 <HAL_I2S_MspInit+0x174>)
 80014d6:	4a23      	ldr	r2, [pc, #140]	; (8001564 <HAL_I2S_MspInit+0x178>)
 80014d8:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80014da:	4b21      	ldr	r3, [pc, #132]	; (8001560 <HAL_I2S_MspInit+0x174>)
 80014dc:	2200      	movs	r2, #0
 80014de:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014e0:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <HAL_I2S_MspInit+0x174>)
 80014e2:	2240      	movs	r2, #64	; 0x40
 80014e4:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e6:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <HAL_I2S_MspInit+0x174>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014ec:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <HAL_I2S_MspInit+0x174>)
 80014ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f2:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <HAL_I2S_MspInit+0x174>)
 80014f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014fa:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <HAL_I2S_MspInit+0x174>)
 80014fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001502:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001504:	4b16      	ldr	r3, [pc, #88]	; (8001560 <HAL_I2S_MspInit+0x174>)
 8001506:	f44f 7280 	mov.w	r2, #256	; 0x100
 800150a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800150c:	4b14      	ldr	r3, [pc, #80]	; (8001560 <HAL_I2S_MspInit+0x174>)
 800150e:	2200      	movs	r2, #0
 8001510:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001512:	4b13      	ldr	r3, [pc, #76]	; (8001560 <HAL_I2S_MspInit+0x174>)
 8001514:	2204      	movs	r2, #4
 8001516:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_I2S_MspInit+0x174>)
 800151a:	2203      	movs	r2, #3
 800151c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <HAL_I2S_MspInit+0x174>)
 8001520:	2200      	movs	r2, #0
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001524:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <HAL_I2S_MspInit+0x174>)
 8001526:	2200      	movs	r2, #0
 8001528:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800152a:	480d      	ldr	r0, [pc, #52]	; (8001560 <HAL_I2S_MspInit+0x174>)
 800152c:	f000 fe64 	bl	80021f8 <HAL_DMA_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 8001536:	f7ff fe07 	bl	8001148 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a08      	ldr	r2, [pc, #32]	; (8001560 <HAL_I2S_MspInit+0x174>)
 800153e:	639a      	str	r2, [r3, #56]	; 0x38
 8001540:	4a07      	ldr	r2, [pc, #28]	; (8001560 <HAL_I2S_MspInit+0x174>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001546:	bf00      	nop
 8001548:	3738      	adds	r7, #56	; 0x38
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40003c00 	.word	0x40003c00
 8001554:	40023800 	.word	0x40023800
 8001558:	40020000 	.word	0x40020000
 800155c:	40020800 	.word	0x40020800
 8001560:	20000328 	.word	0x20000328
 8001564:	40026088 	.word	0x40026088

08001568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800156c:	e7fe      	b.n	800156c <NMI_Handler+0x4>

0800156e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001572:	e7fe      	b.n	8001572 <HardFault_Handler+0x4>

08001574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <MemManage_Handler+0x4>

0800157a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <BusFault_Handler+0x4>

08001580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <UsageFault_Handler+0x4>

08001586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b4:	f000 f8b8 	bl	8001728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}

080015bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <DMA1_Stream5_IRQHandler+0x10>)
 80015c2:	f000 ff1f 	bl	8002404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000328 	.word	0x20000328

080015d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <DMA2_Stream0_IRQHandler+0x10>)
 80015d6:	f000 ff15 	bl	8002404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200001cc 	.word	0x200001cc

080015e4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <DMA2_Stream2_IRQHandler+0x10>)
 80015ea:	f000 ff0b 	bl	8002404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	2000022c 	.word	0x2000022c

080015f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <OTG_FS_IRQHandler+0x10>)
 80015fe:	f002 fe73 	bl	80042e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	2000186c 	.word	0x2000186c

0800160c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <SystemInit+0x20>)
 8001612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001616:	4a05      	ldr	r2, [pc, #20]	; (800162c <SystemInit+0x20>)
 8001618:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800161c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001630:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001668 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001634:	480d      	ldr	r0, [pc, #52]	; (800166c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001636:	490e      	ldr	r1, [pc, #56]	; (8001670 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001638:	4a0e      	ldr	r2, [pc, #56]	; (8001674 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800163c:	e002      	b.n	8001644 <LoopCopyDataInit>

0800163e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001642:	3304      	adds	r3, #4

08001644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001648:	d3f9      	bcc.n	800163e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164a:	4a0b      	ldr	r2, [pc, #44]	; (8001678 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800164c:	4c0b      	ldr	r4, [pc, #44]	; (800167c <LoopFillZerobss+0x26>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001650:	e001      	b.n	8001656 <LoopFillZerobss>

08001652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001654:	3204      	adds	r2, #4

08001656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001658:	d3fb      	bcc.n	8001652 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800165a:	f7ff ffd7 	bl	800160c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800165e:	f008 fe65 	bl	800a32c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001662:	f7fe ff6f 	bl	8000544 <main>
  bx  lr    
 8001666:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001668:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800166c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001670:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001674:	0800a414 	.word	0x0800a414
  ldr r2, =_sbss
 8001678:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 800167c:	20001f98 	.word	0x20001f98

08001680 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001680:	e7fe      	b.n	8001680 <ADC_IRQHandler>
	...

08001684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <HAL_Init+0x40>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <HAL_Init+0x40>)
 800168e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001692:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_Init+0x40>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <HAL_Init+0x40>)
 800169a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800169e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <HAL_Init+0x40>)
 80016a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ac:	2003      	movs	r0, #3
 80016ae:	f000 fd61 	bl	8002174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b2:	2000      	movs	r0, #0
 80016b4:	f000 f808 	bl	80016c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b8:	f7ff fd4c 	bl	8001154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40023c00 	.word	0x40023c00

080016c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x54>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_InitTick+0x58>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016de:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 fd79 	bl	80021de <HAL_SYSTICK_Config>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00e      	b.n	8001714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b0f      	cmp	r3, #15
 80016fa:	d80a      	bhi.n	8001712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fc:	2200      	movs	r2, #0
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f000 fd41 	bl	800218a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001708:	4a06      	ldr	r2, [pc, #24]	; (8001724 <HAL_InitTick+0x5c>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e000      	b.n	8001714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000000 	.word	0x20000000
 8001720:	20000008 	.word	0x20000008
 8001724:	20000004 	.word	0x20000004

08001728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x20>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_IncTick+0x24>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4413      	add	r3, r2
 8001738:	4a04      	ldr	r2, [pc, #16]	; (800174c <HAL_IncTick+0x24>)
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000008 	.word	0x20000008
 800174c:	20000388 	.word	0x20000388

08001750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return uwTick;
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <HAL_GetTick+0x14>)
 8001756:	681b      	ldr	r3, [r3, #0]
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000388 	.word	0x20000388

08001768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001770:	f7ff ffee 	bl	8001750 <HAL_GetTick>
 8001774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001780:	d005      	beq.n	800178e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_Delay+0x44>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800178e:	bf00      	nop
 8001790:	f7ff ffde 	bl	8001750 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	429a      	cmp	r2, r3
 800179e:	d8f7      	bhi.n	8001790 <HAL_Delay+0x28>
  {
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000008 	.word	0x20000008

080017b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e033      	b.n	800182e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d109      	bne.n	80017e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff fce8 	bl	80011a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d118      	bne.n	8001820 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017f6:	f023 0302 	bic.w	r3, r3, #2
 80017fa:	f043 0202 	orr.w	r2, r3, #2
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 fa68 	bl	8001cd8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f023 0303 	bic.w	r3, r3, #3
 8001816:	f043 0201 	orr.w	r2, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	641a      	str	r2, [r3, #64]	; 0x40
 800181e:	e001      	b.n	8001824 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800182c:	7bfb      	ldrb	r3, [r7, #15]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800184e:	2b01      	cmp	r3, #1
 8001850:	d101      	bne.n	8001856 <HAL_ADC_Start_DMA+0x1e>
 8001852:	2302      	movs	r3, #2
 8001854:	e0e9      	b.n	8001a2a <HAL_ADC_Start_DMA+0x1f2>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b01      	cmp	r3, #1
 800186a:	d018      	beq.n	800189e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0201 	orr.w	r2, r2, #1
 800187a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800187c:	4b6d      	ldr	r3, [pc, #436]	; (8001a34 <HAL_ADC_Start_DMA+0x1fc>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a6d      	ldr	r2, [pc, #436]	; (8001a38 <HAL_ADC_Start_DMA+0x200>)
 8001882:	fba2 2303 	umull	r2, r3, r2, r3
 8001886:	0c9a      	lsrs	r2, r3, #18
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001890:	e002      	b.n	8001898 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	3b01      	subs	r3, #1
 8001896:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f9      	bne.n	8001892 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018ac:	d107      	bne.n	80018be <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	f040 80a1 	bne.w	8001a10 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018d6:	f023 0301 	bic.w	r3, r3, #1
 80018da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d007      	beq.n	8001900 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800190c:	d106      	bne.n	800191c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f023 0206 	bic.w	r2, r3, #6
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	645a      	str	r2, [r3, #68]	; 0x44
 800191a:	e002      	b.n	8001922 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800192a:	4b44      	ldr	r3, [pc, #272]	; (8001a3c <HAL_ADC_Start_DMA+0x204>)
 800192c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001932:	4a43      	ldr	r2, [pc, #268]	; (8001a40 <HAL_ADC_Start_DMA+0x208>)
 8001934:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193a:	4a42      	ldr	r2, [pc, #264]	; (8001a44 <HAL_ADC_Start_DMA+0x20c>)
 800193c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001942:	4a41      	ldr	r2, [pc, #260]	; (8001a48 <HAL_ADC_Start_DMA+0x210>)
 8001944:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800194e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800195e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800196e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	334c      	adds	r3, #76	; 0x4c
 800197a:	4619      	mov	r1, r3
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f000 fce8 	bl	8002354 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 031f 	and.w	r3, r3, #31
 800198c:	2b00      	cmp	r3, #0
 800198e:	d12a      	bne.n	80019e6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a2d      	ldr	r2, [pc, #180]	; (8001a4c <HAL_ADC_Start_DMA+0x214>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d015      	beq.n	80019c6 <HAL_ADC_Start_DMA+0x18e>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a2c      	ldr	r2, [pc, #176]	; (8001a50 <HAL_ADC_Start_DMA+0x218>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d105      	bne.n	80019b0 <HAL_ADC_Start_DMA+0x178>
 80019a4:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <HAL_ADC_Start_DMA+0x204>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00a      	beq.n	80019c6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a27      	ldr	r2, [pc, #156]	; (8001a54 <HAL_ADC_Start_DMA+0x21c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d136      	bne.n	8001a28 <HAL_ADC_Start_DMA+0x1f0>
 80019ba:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <HAL_ADC_Start_DMA+0x204>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 0310 	and.w	r3, r3, #16
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d130      	bne.n	8001a28 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d129      	bne.n	8001a28 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	e020      	b.n	8001a28 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a18      	ldr	r2, [pc, #96]	; (8001a4c <HAL_ADC_Start_DMA+0x214>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d11b      	bne.n	8001a28 <HAL_ADC_Start_DMA+0x1f0>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d114      	bne.n	8001a28 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	e00b      	b.n	8001a28 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	f043 0210 	orr.w	r2, r3, #16
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a20:	f043 0201 	orr.w	r2, r3, #1
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000000 	.word	0x20000000
 8001a38:	431bde83 	.word	0x431bde83
 8001a3c:	40012300 	.word	0x40012300
 8001a40:	08001ed1 	.word	0x08001ed1
 8001a44:	08001f8b 	.word	0x08001f8b
 8001a48:	08001fa7 	.word	0x08001fa7
 8001a4c:	40012000 	.word	0x40012000
 8001a50:	40012100 	.word	0x40012100
 8001a54:	40012200 	.word	0x40012200

08001a58 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x1c>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e105      	b.n	8001cbc <HAL_ADC_ConfigChannel+0x228>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b09      	cmp	r3, #9
 8001abe:	d925      	bls.n	8001b0c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68d9      	ldr	r1, [r3, #12]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	461a      	mov	r2, r3
 8001ace:	4613      	mov	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3b1e      	subs	r3, #30
 8001ad6:	2207      	movs	r2, #7
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43da      	mvns	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	400a      	ands	r2, r1
 8001ae4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68d9      	ldr	r1, [r3, #12]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	4618      	mov	r0, r3
 8001af8:	4603      	mov	r3, r0
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4403      	add	r3, r0
 8001afe:	3b1e      	subs	r3, #30
 8001b00:	409a      	lsls	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	e022      	b.n	8001b52 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6919      	ldr	r1, [r3, #16]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	2207      	movs	r2, #7
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43da      	mvns	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	400a      	ands	r2, r1
 8001b2e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6919      	ldr	r1, [r3, #16]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	4618      	mov	r0, r3
 8001b42:	4603      	mov	r3, r0
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4403      	add	r3, r0
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b06      	cmp	r3, #6
 8001b58:	d824      	bhi.n	8001ba4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	3b05      	subs	r3, #5
 8001b6c:	221f      	movs	r2, #31
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43da      	mvns	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	400a      	ands	r2, r1
 8001b7a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	4618      	mov	r0, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	3b05      	subs	r3, #5
 8001b96:	fa00 f203 	lsl.w	r2, r0, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ba2:	e04c      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b0c      	cmp	r3, #12
 8001baa:	d824      	bhi.n	8001bf6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	3b23      	subs	r3, #35	; 0x23
 8001bbe:	221f      	movs	r2, #31
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43da      	mvns	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	400a      	ands	r2, r1
 8001bcc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	3b23      	subs	r3, #35	; 0x23
 8001be8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	631a      	str	r2, [r3, #48]	; 0x30
 8001bf4:	e023      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	3b41      	subs	r3, #65	; 0x41
 8001c08:	221f      	movs	r2, #31
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	400a      	ands	r2, r1
 8001c16:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	4618      	mov	r0, r3
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	3b41      	subs	r3, #65	; 0x41
 8001c32:	fa00 f203 	lsl.w	r2, r0, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c3e:	4b22      	ldr	r3, [pc, #136]	; (8001cc8 <HAL_ADC_ConfigChannel+0x234>)
 8001c40:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a21      	ldr	r2, [pc, #132]	; (8001ccc <HAL_ADC_ConfigChannel+0x238>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d109      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x1cc>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b12      	cmp	r3, #18
 8001c52:	d105      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a19      	ldr	r2, [pc, #100]	; (8001ccc <HAL_ADC_ConfigChannel+0x238>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d123      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x21e>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b10      	cmp	r3, #16
 8001c70:	d003      	beq.n	8001c7a <HAL_ADC_ConfigChannel+0x1e6>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b11      	cmp	r3, #17
 8001c78:	d11b      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b10      	cmp	r3, #16
 8001c8c:	d111      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <HAL_ADC_ConfigChannel+0x23c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a10      	ldr	r2, [pc, #64]	; (8001cd4 <HAL_ADC_ConfigChannel+0x240>)
 8001c94:	fba2 2303 	umull	r2, r3, r2, r3
 8001c98:	0c9a      	lsrs	r2, r3, #18
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ca4:	e002      	b.n	8001cac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f9      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	40012300 	.word	0x40012300
 8001ccc:	40012000 	.word	0x40012000
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	431bde83 	.word	0x431bde83

08001cd8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ce0:	4b79      	ldr	r3, [pc, #484]	; (8001ec8 <ADC_Init+0x1f0>)
 8001ce2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6859      	ldr	r1, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	021a      	lsls	r2, r3, #8
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6859      	ldr	r1, [r3, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6899      	ldr	r1, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6a:	4a58      	ldr	r2, [pc, #352]	; (8001ecc <ADC_Init+0x1f4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d022      	beq.n	8001db6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6899      	ldr	r1, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001da0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6899      	ldr	r1, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	e00f      	b.n	8001dd6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dd4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0202 	bic.w	r2, r2, #2
 8001de4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6899      	ldr	r1, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	7e1b      	ldrb	r3, [r3, #24]
 8001df0:	005a      	lsls	r2, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d01b      	beq.n	8001e3c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e12:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6859      	ldr	r1, [r3, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	035a      	lsls	r2, r3, #13
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	e007      	b.n	8001e4c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	051a      	lsls	r2, r3, #20
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6899      	ldr	r1, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e8e:	025a      	lsls	r2, r3, #9
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ea6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6899      	ldr	r1, [r3, #8]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	029a      	lsls	r2, r3, #10
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	609a      	str	r2, [r3, #8]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	40012300 	.word	0x40012300
 8001ecc:	0f000001 	.word	0x0f000001

08001ed0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001edc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d13c      	bne.n	8001f64 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d12b      	bne.n	8001f5c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d127      	bne.n	8001f5c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f12:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d006      	beq.n	8001f28 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d119      	bne.n	8001f5c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0220 	bic.w	r2, r2, #32
 8001f36:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d105      	bne.n	8001f5c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	f043 0201 	orr.w	r2, r3, #1
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f7ff fd7b 	bl	8001a58 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f62:	e00e      	b.n	8001f82 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	f003 0310 	and.w	r3, r3, #16
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f7ff fd85 	bl	8001a80 <HAL_ADC_ErrorCallback>
}
 8001f76:	e004      	b.n	8001f82 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	4798      	blx	r3
}
 8001f82:	bf00      	nop
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b084      	sub	sp, #16
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f96:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f7ff fd67 	bl	8001a6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f9e:	bf00      	nop
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b084      	sub	sp, #16
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2240      	movs	r2, #64	; 0x40
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f043 0204 	orr.w	r2, r3, #4
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f7ff fd5a 	bl	8001a80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002006:	4a04      	ldr	r2, [pc, #16]	; (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	60d3      	str	r3, [r2, #12]
}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <__NVIC_GetPriorityGrouping+0x18>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	0a1b      	lsrs	r3, r3, #8
 8002026:	f003 0307 	and.w	r3, r3, #7
}
 800202a:	4618      	mov	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	2b00      	cmp	r3, #0
 8002048:	db0b      	blt.n	8002062 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	f003 021f 	and.w	r2, r3, #31
 8002050:	4907      	ldr	r1, [pc, #28]	; (8002070 <__NVIC_EnableIRQ+0x38>)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	2001      	movs	r0, #1
 800205a:	fa00 f202 	lsl.w	r2, r0, r2
 800205e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000e100 	.word	0xe000e100

08002074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	6039      	str	r1, [r7, #0]
 800207e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002084:	2b00      	cmp	r3, #0
 8002086:	db0a      	blt.n	800209e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	b2da      	uxtb	r2, r3
 800208c:	490c      	ldr	r1, [pc, #48]	; (80020c0 <__NVIC_SetPriority+0x4c>)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	0112      	lsls	r2, r2, #4
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	440b      	add	r3, r1
 8002098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800209c:	e00a      	b.n	80020b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4908      	ldr	r1, [pc, #32]	; (80020c4 <__NVIC_SetPriority+0x50>)
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	3b04      	subs	r3, #4
 80020ac:	0112      	lsls	r2, r2, #4
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	440b      	add	r3, r1
 80020b2:	761a      	strb	r2, [r3, #24]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000e100 	.word	0xe000e100
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	; 0x24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f1c3 0307 	rsb	r3, r3, #7
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	bf28      	it	cs
 80020e6:	2304      	movcs	r3, #4
 80020e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3304      	adds	r3, #4
 80020ee:	2b06      	cmp	r3, #6
 80020f0:	d902      	bls.n	80020f8 <NVIC_EncodePriority+0x30>
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3b03      	subs	r3, #3
 80020f6:	e000      	b.n	80020fa <NVIC_EncodePriority+0x32>
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43da      	mvns	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	401a      	ands	r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002110:	f04f 31ff 	mov.w	r1, #4294967295
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	fa01 f303 	lsl.w	r3, r1, r3
 800211a:	43d9      	mvns	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	4313      	orrs	r3, r2
         );
}
 8002122:	4618      	mov	r0, r3
 8002124:	3724      	adds	r7, #36	; 0x24
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
	...

08002130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3b01      	subs	r3, #1
 800213c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002140:	d301      	bcc.n	8002146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002142:	2301      	movs	r3, #1
 8002144:	e00f      	b.n	8002166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002146:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <SysTick_Config+0x40>)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800214e:	210f      	movs	r1, #15
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f7ff ff8e 	bl	8002074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <SysTick_Config+0x40>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800215e:	4b04      	ldr	r3, [pc, #16]	; (8002170 <SysTick_Config+0x40>)
 8002160:	2207      	movs	r2, #7
 8002162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	e000e010 	.word	0xe000e010

08002174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff ff29 	bl	8001fd4 <__NVIC_SetPriorityGrouping>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800218a:	b580      	push	{r7, lr}
 800218c:	b086      	sub	sp, #24
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800219c:	f7ff ff3e 	bl	800201c <__NVIC_GetPriorityGrouping>
 80021a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	6978      	ldr	r0, [r7, #20]
 80021a8:	f7ff ff8e 	bl	80020c8 <NVIC_EncodePriority>
 80021ac:	4602      	mov	r2, r0
 80021ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff5d 	bl	8002074 <__NVIC_SetPriority>
}
 80021ba:	bf00      	nop
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff31 	bl	8002038 <__NVIC_EnableIRQ>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ffa2 	bl	8002130 <SysTick_Config>
 80021ec:	4603      	mov	r3, r0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002204:	f7ff faa4 	bl	8001750 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e099      	b.n	8002348 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0201 	bic.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002234:	e00f      	b.n	8002256 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002236:	f7ff fa8b 	bl	8001750 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b05      	cmp	r3, #5
 8002242:	d908      	bls.n	8002256 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2220      	movs	r2, #32
 8002248:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2203      	movs	r2, #3
 800224e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e078      	b.n	8002348 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1e8      	bne.n	8002236 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	4b38      	ldr	r3, [pc, #224]	; (8002350 <HAL_DMA_Init+0x158>)
 8002270:	4013      	ands	r3, r2
 8002272:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002282:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d107      	bne.n	80022c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	4313      	orrs	r3, r2
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	4313      	orrs	r3, r2
 80022be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f023 0307 	bic.w	r3, r3, #7
 80022d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	4313      	orrs	r3, r2
 80022e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d117      	bne.n	800231a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00e      	beq.n	800231a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 fa6f 	bl	80027e0 <DMA_CheckFifoParam>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d008      	beq.n	800231a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2240      	movs	r2, #64	; 0x40
 800230c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002316:	2301      	movs	r3, #1
 8002318:	e016      	b.n	8002348 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 fa26 	bl	8002774 <DMA_CalcBaseAndBitshift>
 8002328:	4603      	mov	r3, r0
 800232a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002330:	223f      	movs	r2, #63	; 0x3f
 8002332:	409a      	lsls	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	f010803f 	.word	0xf010803f

08002354 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <HAL_DMA_Start_IT+0x26>
 8002376:	2302      	movs	r3, #2
 8002378:	e040      	b.n	80023fc <HAL_DMA_Start_IT+0xa8>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b01      	cmp	r3, #1
 800238c:	d12f      	bne.n	80023ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2202      	movs	r2, #2
 8002392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f9b8 	bl	8002718 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ac:	223f      	movs	r2, #63	; 0x3f
 80023ae:	409a      	lsls	r2, r3
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0216 	orr.w	r2, r2, #22
 80023c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d007      	beq.n	80023dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0208 	orr.w	r2, r2, #8
 80023da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	e005      	b.n	80023fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023f6:	2302      	movs	r3, #2
 80023f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002410:	4b8e      	ldr	r3, [pc, #568]	; (800264c <HAL_DMA_IRQHandler+0x248>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a8e      	ldr	r2, [pc, #568]	; (8002650 <HAL_DMA_IRQHandler+0x24c>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	0a9b      	lsrs	r3, r3, #10
 800241c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002422:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242e:	2208      	movs	r2, #8
 8002430:	409a      	lsls	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4013      	ands	r3, r2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d01a      	beq.n	8002470 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	d013      	beq.n	8002470 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0204 	bic.w	r2, r2, #4
 8002456:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245c:	2208      	movs	r2, #8
 800245e:	409a      	lsls	r2, r3
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002468:	f043 0201 	orr.w	r2, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002474:	2201      	movs	r2, #1
 8002476:	409a      	lsls	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4013      	ands	r3, r2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d012      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00b      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002492:	2201      	movs	r2, #1
 8002494:	409a      	lsls	r2, r3
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249e:	f043 0202 	orr.w	r2, r3, #2
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024aa:	2204      	movs	r2, #4
 80024ac:	409a      	lsls	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d012      	beq.n	80024dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00b      	beq.n	80024dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c8:	2204      	movs	r2, #4
 80024ca:	409a      	lsls	r2, r3
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d4:	f043 0204 	orr.w	r2, r3, #4
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e0:	2210      	movs	r2, #16
 80024e2:	409a      	lsls	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d043      	beq.n	8002574 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d03c      	beq.n	8002574 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fe:	2210      	movs	r2, #16
 8002500:	409a      	lsls	r2, r3
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d018      	beq.n	8002546 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d108      	bne.n	8002534 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	2b00      	cmp	r3, #0
 8002528:	d024      	beq.n	8002574 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	4798      	blx	r3
 8002532:	e01f      	b.n	8002574 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01b      	beq.n	8002574 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	4798      	blx	r3
 8002544:	e016      	b.n	8002574 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d107      	bne.n	8002564 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0208 	bic.w	r2, r2, #8
 8002562:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002578:	2220      	movs	r2, #32
 800257a:	409a      	lsls	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4013      	ands	r3, r2
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 808f 	beq.w	80026a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0310 	and.w	r3, r3, #16
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 8087 	beq.w	80026a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259a:	2220      	movs	r2, #32
 800259c:	409a      	lsls	r2, r3
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b05      	cmp	r3, #5
 80025ac:	d136      	bne.n	800261c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0216 	bic.w	r2, r2, #22
 80025bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d103      	bne.n	80025de <HAL_DMA_IRQHandler+0x1da>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d007      	beq.n	80025ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0208 	bic.w	r2, r2, #8
 80025ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f2:	223f      	movs	r2, #63	; 0x3f
 80025f4:	409a      	lsls	r2, r3
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800260e:	2b00      	cmp	r3, #0
 8002610:	d07e      	beq.n	8002710 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	4798      	blx	r3
        }
        return;
 800261a:	e079      	b.n	8002710 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d01d      	beq.n	8002666 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10d      	bne.n	8002654 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263c:	2b00      	cmp	r3, #0
 800263e:	d031      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	4798      	blx	r3
 8002648:	e02c      	b.n	80026a4 <HAL_DMA_IRQHandler+0x2a0>
 800264a:	bf00      	nop
 800264c:	20000000 	.word	0x20000000
 8002650:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002658:	2b00      	cmp	r3, #0
 800265a:	d023      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	4798      	blx	r3
 8002664:	e01e      	b.n	80026a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10f      	bne.n	8002694 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0210 	bic.w	r2, r2, #16
 8002682:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d032      	beq.n	8002712 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d022      	beq.n	80026fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2205      	movs	r2, #5
 80026bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0201 	bic.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	3301      	adds	r3, #1
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d307      	bcc.n	80026ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f2      	bne.n	80026d0 <HAL_DMA_IRQHandler+0x2cc>
 80026ea:	e000      	b.n	80026ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	4798      	blx	r3
 800270e:	e000      	b.n	8002712 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002710:	bf00      	nop
    }
  }
}
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
 8002724:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002734:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b40      	cmp	r3, #64	; 0x40
 8002744:	d108      	bne.n	8002758 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002756:	e007      	b.n	8002768 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	60da      	str	r2, [r3, #12]
}
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	b2db      	uxtb	r3, r3
 8002782:	3b10      	subs	r3, #16
 8002784:	4a14      	ldr	r2, [pc, #80]	; (80027d8 <DMA_CalcBaseAndBitshift+0x64>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	091b      	lsrs	r3, r3, #4
 800278c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800278e:	4a13      	ldr	r2, [pc, #76]	; (80027dc <DMA_CalcBaseAndBitshift+0x68>)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4413      	add	r3, r2
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d909      	bls.n	80027b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027aa:	f023 0303 	bic.w	r3, r3, #3
 80027ae:	1d1a      	adds	r2, r3, #4
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	659a      	str	r2, [r3, #88]	; 0x58
 80027b4:	e007      	b.n	80027c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027be:	f023 0303 	bic.w	r3, r3, #3
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	aaaaaaab 	.word	0xaaaaaaab
 80027dc:	0800a3fc 	.word	0x0800a3fc

080027e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d11f      	bne.n	800283a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d856      	bhi.n	80028ae <DMA_CheckFifoParam+0xce>
 8002800:	a201      	add	r2, pc, #4	; (adr r2, 8002808 <DMA_CheckFifoParam+0x28>)
 8002802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002806:	bf00      	nop
 8002808:	08002819 	.word	0x08002819
 800280c:	0800282b 	.word	0x0800282b
 8002810:	08002819 	.word	0x08002819
 8002814:	080028af 	.word	0x080028af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d046      	beq.n	80028b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002828:	e043      	b.n	80028b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002832:	d140      	bne.n	80028b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002838:	e03d      	b.n	80028b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002842:	d121      	bne.n	8002888 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b03      	cmp	r3, #3
 8002848:	d837      	bhi.n	80028ba <DMA_CheckFifoParam+0xda>
 800284a:	a201      	add	r2, pc, #4	; (adr r2, 8002850 <DMA_CheckFifoParam+0x70>)
 800284c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002850:	08002861 	.word	0x08002861
 8002854:	08002867 	.word	0x08002867
 8002858:	08002861 	.word	0x08002861
 800285c:	08002879 	.word	0x08002879
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
      break;
 8002864:	e030      	b.n	80028c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d025      	beq.n	80028be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002876:	e022      	b.n	80028be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002880:	d11f      	bne.n	80028c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002886:	e01c      	b.n	80028c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d903      	bls.n	8002896 <DMA_CheckFifoParam+0xb6>
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2b03      	cmp	r3, #3
 8002892:	d003      	beq.n	800289c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002894:	e018      	b.n	80028c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	73fb      	strb	r3, [r7, #15]
      break;
 800289a:	e015      	b.n	80028c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00e      	beq.n	80028c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
      break;
 80028ac:	e00b      	b.n	80028c6 <DMA_CheckFifoParam+0xe6>
      break;
 80028ae:	bf00      	nop
 80028b0:	e00a      	b.n	80028c8 <DMA_CheckFifoParam+0xe8>
      break;
 80028b2:	bf00      	nop
 80028b4:	e008      	b.n	80028c8 <DMA_CheckFifoParam+0xe8>
      break;
 80028b6:	bf00      	nop
 80028b8:	e006      	b.n	80028c8 <DMA_CheckFifoParam+0xe8>
      break;
 80028ba:	bf00      	nop
 80028bc:	e004      	b.n	80028c8 <DMA_CheckFifoParam+0xe8>
      break;
 80028be:	bf00      	nop
 80028c0:	e002      	b.n	80028c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80028c2:	bf00      	nop
 80028c4:	e000      	b.n	80028c8 <DMA_CheckFifoParam+0xe8>
      break;
 80028c6:	bf00      	nop
    }
  } 
  
  return status; 
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop

080028d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d8:	b480      	push	{r7}
 80028da:	b089      	sub	sp, #36	; 0x24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
 80028f2:	e16b      	b.n	8002bcc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028f4:	2201      	movs	r2, #1
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	4013      	ands	r3, r2
 8002906:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	429a      	cmp	r2, r3
 800290e:	f040 815a 	bne.w	8002bc6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b01      	cmp	r3, #1
 800291c:	d005      	beq.n	800292a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002926:	2b02      	cmp	r3, #2
 8002928:	d130      	bne.n	800298c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	2203      	movs	r2, #3
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002960:	2201      	movs	r2, #1
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	f003 0201 	and.w	r2, r3, #1
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	2b03      	cmp	r3, #3
 8002996:	d017      	beq.n	80029c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	2203      	movs	r2, #3
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d123      	bne.n	8002a1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	08da      	lsrs	r2, r3, #3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3208      	adds	r2, #8
 80029dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	220f      	movs	r2, #15
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	691a      	ldr	r2, [r3, #16]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	08da      	lsrs	r2, r3, #3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3208      	adds	r2, #8
 8002a16:	69b9      	ldr	r1, [r7, #24]
 8002a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	2203      	movs	r2, #3
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 0203 	and.w	r2, r3, #3
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80b4 	beq.w	8002bc6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	4b60      	ldr	r3, [pc, #384]	; (8002be4 <HAL_GPIO_Init+0x30c>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	4a5f      	ldr	r2, [pc, #380]	; (8002be4 <HAL_GPIO_Init+0x30c>)
 8002a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6e:	4b5d      	ldr	r3, [pc, #372]	; (8002be4 <HAL_GPIO_Init+0x30c>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a7a:	4a5b      	ldr	r2, [pc, #364]	; (8002be8 <HAL_GPIO_Init+0x310>)
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	089b      	lsrs	r3, r3, #2
 8002a80:	3302      	adds	r3, #2
 8002a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	220f      	movs	r2, #15
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a52      	ldr	r2, [pc, #328]	; (8002bec <HAL_GPIO_Init+0x314>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d02b      	beq.n	8002afe <HAL_GPIO_Init+0x226>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a51      	ldr	r2, [pc, #324]	; (8002bf0 <HAL_GPIO_Init+0x318>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d025      	beq.n	8002afa <HAL_GPIO_Init+0x222>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a50      	ldr	r2, [pc, #320]	; (8002bf4 <HAL_GPIO_Init+0x31c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d01f      	beq.n	8002af6 <HAL_GPIO_Init+0x21e>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a4f      	ldr	r2, [pc, #316]	; (8002bf8 <HAL_GPIO_Init+0x320>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d019      	beq.n	8002af2 <HAL_GPIO_Init+0x21a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a4e      	ldr	r2, [pc, #312]	; (8002bfc <HAL_GPIO_Init+0x324>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d013      	beq.n	8002aee <HAL_GPIO_Init+0x216>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a4d      	ldr	r2, [pc, #308]	; (8002c00 <HAL_GPIO_Init+0x328>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00d      	beq.n	8002aea <HAL_GPIO_Init+0x212>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a4c      	ldr	r2, [pc, #304]	; (8002c04 <HAL_GPIO_Init+0x32c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d007      	beq.n	8002ae6 <HAL_GPIO_Init+0x20e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a4b      	ldr	r2, [pc, #300]	; (8002c08 <HAL_GPIO_Init+0x330>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d101      	bne.n	8002ae2 <HAL_GPIO_Init+0x20a>
 8002ade:	2307      	movs	r3, #7
 8002ae0:	e00e      	b.n	8002b00 <HAL_GPIO_Init+0x228>
 8002ae2:	2308      	movs	r3, #8
 8002ae4:	e00c      	b.n	8002b00 <HAL_GPIO_Init+0x228>
 8002ae6:	2306      	movs	r3, #6
 8002ae8:	e00a      	b.n	8002b00 <HAL_GPIO_Init+0x228>
 8002aea:	2305      	movs	r3, #5
 8002aec:	e008      	b.n	8002b00 <HAL_GPIO_Init+0x228>
 8002aee:	2304      	movs	r3, #4
 8002af0:	e006      	b.n	8002b00 <HAL_GPIO_Init+0x228>
 8002af2:	2303      	movs	r3, #3
 8002af4:	e004      	b.n	8002b00 <HAL_GPIO_Init+0x228>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e002      	b.n	8002b00 <HAL_GPIO_Init+0x228>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <HAL_GPIO_Init+0x228>
 8002afe:	2300      	movs	r3, #0
 8002b00:	69fa      	ldr	r2, [r7, #28]
 8002b02:	f002 0203 	and.w	r2, r2, #3
 8002b06:	0092      	lsls	r2, r2, #2
 8002b08:	4093      	lsls	r3, r2
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b10:	4935      	ldr	r1, [pc, #212]	; (8002be8 <HAL_GPIO_Init+0x310>)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	089b      	lsrs	r3, r3, #2
 8002b16:	3302      	adds	r3, #2
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b1e:	4b3b      	ldr	r3, [pc, #236]	; (8002c0c <HAL_GPIO_Init+0x334>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b42:	4a32      	ldr	r2, [pc, #200]	; (8002c0c <HAL_GPIO_Init+0x334>)
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b48:	4b30      	ldr	r3, [pc, #192]	; (8002c0c <HAL_GPIO_Init+0x334>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b6c:	4a27      	ldr	r2, [pc, #156]	; (8002c0c <HAL_GPIO_Init+0x334>)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b72:	4b26      	ldr	r3, [pc, #152]	; (8002c0c <HAL_GPIO_Init+0x334>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b96:	4a1d      	ldr	r2, [pc, #116]	; (8002c0c <HAL_GPIO_Init+0x334>)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b9c:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <HAL_GPIO_Init+0x334>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bc0:	4a12      	ldr	r2, [pc, #72]	; (8002c0c <HAL_GPIO_Init+0x334>)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	61fb      	str	r3, [r7, #28]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	2b0f      	cmp	r3, #15
 8002bd0:	f67f ae90 	bls.w	80028f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	3724      	adds	r7, #36	; 0x24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40013800 	.word	0x40013800
 8002bec:	40020000 	.word	0x40020000
 8002bf0:	40020400 	.word	0x40020400
 8002bf4:	40020800 	.word	0x40020800
 8002bf8:	40020c00 	.word	0x40020c00
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40021400 	.word	0x40021400
 8002c04:	40021800 	.word	0x40021800
 8002c08:	40021c00 	.word	0x40021c00
 8002c0c:	40013c00 	.word	0x40013c00

08002c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	807b      	strh	r3, [r7, #2]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c20:	787b      	ldrb	r3, [r7, #1]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c26:	887a      	ldrh	r2, [r7, #2]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c2c:	e003      	b.n	8002c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c2e:	887b      	ldrh	r3, [r7, #2]
 8002c30:	041a      	lsls	r2, r3, #16
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	619a      	str	r2, [r3, #24]
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e12b      	b.n	8002eae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fe fb76 	bl	800135c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2224      	movs	r2, #36	; 0x24
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0201 	bic.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ca6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ca8:	f003 f8bc 	bl	8005e24 <HAL_RCC_GetPCLK1Freq>
 8002cac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	4a81      	ldr	r2, [pc, #516]	; (8002eb8 <HAL_I2C_Init+0x274>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d807      	bhi.n	8002cc8 <HAL_I2C_Init+0x84>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4a80      	ldr	r2, [pc, #512]	; (8002ebc <HAL_I2C_Init+0x278>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	bf94      	ite	ls
 8002cc0:	2301      	movls	r3, #1
 8002cc2:	2300      	movhi	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	e006      	b.n	8002cd6 <HAL_I2C_Init+0x92>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4a7d      	ldr	r2, [pc, #500]	; (8002ec0 <HAL_I2C_Init+0x27c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	bf94      	ite	ls
 8002cd0:	2301      	movls	r3, #1
 8002cd2:	2300      	movhi	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e0e7      	b.n	8002eae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4a78      	ldr	r2, [pc, #480]	; (8002ec4 <HAL_I2C_Init+0x280>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	0c9b      	lsrs	r3, r3, #18
 8002ce8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	4a6a      	ldr	r2, [pc, #424]	; (8002eb8 <HAL_I2C_Init+0x274>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d802      	bhi.n	8002d18 <HAL_I2C_Init+0xd4>
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	3301      	adds	r3, #1
 8002d16:	e009      	b.n	8002d2c <HAL_I2C_Init+0xe8>
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d1e:	fb02 f303 	mul.w	r3, r2, r3
 8002d22:	4a69      	ldr	r2, [pc, #420]	; (8002ec8 <HAL_I2C_Init+0x284>)
 8002d24:	fba2 2303 	umull	r2, r3, r2, r3
 8002d28:	099b      	lsrs	r3, r3, #6
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	430b      	orrs	r3, r1
 8002d32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	495c      	ldr	r1, [pc, #368]	; (8002eb8 <HAL_I2C_Init+0x274>)
 8002d48:	428b      	cmp	r3, r1
 8002d4a:	d819      	bhi.n	8002d80 <HAL_I2C_Init+0x13c>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1e59      	subs	r1, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d5a:	1c59      	adds	r1, r3, #1
 8002d5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d60:	400b      	ands	r3, r1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <HAL_I2C_Init+0x138>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	1e59      	subs	r1, r3, #1
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d74:	3301      	adds	r3, #1
 8002d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d7a:	e051      	b.n	8002e20 <HAL_I2C_Init+0x1dc>
 8002d7c:	2304      	movs	r3, #4
 8002d7e:	e04f      	b.n	8002e20 <HAL_I2C_Init+0x1dc>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d111      	bne.n	8002dac <HAL_I2C_Init+0x168>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1e58      	subs	r0, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	440b      	add	r3, r1
 8002d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	e012      	b.n	8002dd2 <HAL_I2C_Init+0x18e>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	1e58      	subs	r0, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6859      	ldr	r1, [r3, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	0099      	lsls	r1, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2300      	movne	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_I2C_Init+0x196>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e022      	b.n	8002e20 <HAL_I2C_Init+0x1dc>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10e      	bne.n	8002e00 <HAL_I2C_Init+0x1bc>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1e58      	subs	r0, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6859      	ldr	r1, [r3, #4]
 8002dea:	460b      	mov	r3, r1
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	440b      	add	r3, r1
 8002df0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002df4:	3301      	adds	r3, #1
 8002df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dfe:	e00f      	b.n	8002e20 <HAL_I2C_Init+0x1dc>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	1e58      	subs	r0, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6859      	ldr	r1, [r3, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	0099      	lsls	r1, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e16:	3301      	adds	r3, #1
 8002e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	6809      	ldr	r1, [r1, #0]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69da      	ldr	r2, [r3, #28]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6911      	ldr	r1, [r2, #16]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68d2      	ldr	r2, [r2, #12]
 8002e5a:	4311      	orrs	r1, r2
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6812      	ldr	r2, [r2, #0]
 8002e60:	430b      	orrs	r3, r1
 8002e62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	000186a0 	.word	0x000186a0
 8002ebc:	001e847f 	.word	0x001e847f
 8002ec0:	003d08ff 	.word	0x003d08ff
 8002ec4:	431bde83 	.word	0x431bde83
 8002ec8:	10624dd3 	.word	0x10624dd3

08002ecc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	4608      	mov	r0, r1
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4603      	mov	r3, r0
 8002edc:	817b      	strh	r3, [r7, #10]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	813b      	strh	r3, [r7, #8]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ee6:	f7fe fc33 	bl	8001750 <HAL_GetTick>
 8002eea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	f040 80d9 	bne.w	80030ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	2319      	movs	r3, #25
 8002f00:	2201      	movs	r2, #1
 8002f02:	496d      	ldr	r1, [pc, #436]	; (80030b8 <HAL_I2C_Mem_Write+0x1ec>)
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 f971 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002f10:	2302      	movs	r3, #2
 8002f12:	e0cc      	b.n	80030ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_I2C_Mem_Write+0x56>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e0c5      	b.n	80030ae <HAL_I2C_Mem_Write+0x1e2>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d007      	beq.n	8002f48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2221      	movs	r2, #33	; 0x21
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2240      	movs	r2, #64	; 0x40
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a3a      	ldr	r2, [r7, #32]
 8002f72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4a4d      	ldr	r2, [pc, #308]	; (80030bc <HAL_I2C_Mem_Write+0x1f0>)
 8002f88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f8a:	88f8      	ldrh	r0, [r7, #6]
 8002f8c:	893a      	ldrh	r2, [r7, #8]
 8002f8e:	8979      	ldrh	r1, [r7, #10]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	9301      	str	r3, [sp, #4]
 8002f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	4603      	mov	r3, r0
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f890 	bl	80030c0 <I2C_RequestMemoryWrite>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d052      	beq.n	800304c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e081      	b.n	80030ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f9f2 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00d      	beq.n	8002fd6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d107      	bne.n	8002fd2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e06b      	b.n	80030ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	781a      	ldrb	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b04      	cmp	r3, #4
 8003012:	d11b      	bne.n	800304c <HAL_I2C_Mem_Write+0x180>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003018:	2b00      	cmp	r3, #0
 800301a:	d017      	beq.n	800304c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	781a      	ldrb	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1aa      	bne.n	8002faa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f9de 	bl	800341a <I2C_WaitOnBTFFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00d      	beq.n	8003080 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	2b04      	cmp	r3, #4
 800306a:	d107      	bne.n	800307c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800307a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e016      	b.n	80030ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	e000      	b.n	80030ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80030ac:	2302      	movs	r3, #2
  }
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	00100002 	.word	0x00100002
 80030bc:	ffff0000 	.word	0xffff0000

080030c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	4608      	mov	r0, r1
 80030ca:	4611      	mov	r1, r2
 80030cc:	461a      	mov	r2, r3
 80030ce:	4603      	mov	r3, r0
 80030d0:	817b      	strh	r3, [r7, #10]
 80030d2:	460b      	mov	r3, r1
 80030d4:	813b      	strh	r3, [r7, #8]
 80030d6:	4613      	mov	r3, r2
 80030d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 f878 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00d      	beq.n	800311e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003110:	d103      	bne.n	800311a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003118:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e05f      	b.n	80031de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800311e:	897b      	ldrh	r3, [r7, #10]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	461a      	mov	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800312c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	6a3a      	ldr	r2, [r7, #32]
 8003132:	492d      	ldr	r1, [pc, #180]	; (80031e8 <I2C_RequestMemoryWrite+0x128>)
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f8b0 	bl	800329a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e04c      	b.n	80031de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800315a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315c:	6a39      	ldr	r1, [r7, #32]
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f91a 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00d      	beq.n	8003186 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	2b04      	cmp	r3, #4
 8003170:	d107      	bne.n	8003182 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003180:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e02b      	b.n	80031de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d105      	bne.n	8003198 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800318c:	893b      	ldrh	r3, [r7, #8]
 800318e:	b2da      	uxtb	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	611a      	str	r2, [r3, #16]
 8003196:	e021      	b.n	80031dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003198:	893b      	ldrh	r3, [r7, #8]
 800319a:	0a1b      	lsrs	r3, r3, #8
 800319c:	b29b      	uxth	r3, r3
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a8:	6a39      	ldr	r1, [r7, #32]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f8f4 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d107      	bne.n	80031ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e005      	b.n	80031de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031d2:	893b      	ldrh	r3, [r7, #8]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	00010002 	.word	0x00010002

080031ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	4613      	mov	r3, r2
 80031fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031fc:	e025      	b.n	800324a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003204:	d021      	beq.n	800324a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003206:	f7fe faa3 	bl	8001750 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d302      	bcc.n	800321c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d116      	bne.n	800324a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f043 0220 	orr.w	r2, r3, #32
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e023      	b.n	8003292 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	0c1b      	lsrs	r3, r3, #16
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b01      	cmp	r3, #1
 8003252:	d10d      	bne.n	8003270 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	43da      	mvns	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	4013      	ands	r3, r2
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	bf0c      	ite	eq
 8003266:	2301      	moveq	r3, #1
 8003268:	2300      	movne	r3, #0
 800326a:	b2db      	uxtb	r3, r3
 800326c:	461a      	mov	r2, r3
 800326e:	e00c      	b.n	800328a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	43da      	mvns	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	4013      	ands	r3, r2
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	bf0c      	ite	eq
 8003282:	2301      	moveq	r3, #1
 8003284:	2300      	movne	r3, #0
 8003286:	b2db      	uxtb	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	429a      	cmp	r2, r3
 800328e:	d0b6      	beq.n	80031fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032a8:	e051      	b.n	800334e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b8:	d123      	bne.n	8003302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f043 0204 	orr.w	r2, r3, #4
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e046      	b.n	8003390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003308:	d021      	beq.n	800334e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800330a:	f7fe fa21 	bl	8001750 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	429a      	cmp	r2, r3
 8003318:	d302      	bcc.n	8003320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d116      	bne.n	800334e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f043 0220 	orr.w	r2, r3, #32
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e020      	b.n	8003390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	0c1b      	lsrs	r3, r3, #16
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b01      	cmp	r3, #1
 8003356:	d10c      	bne.n	8003372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	43da      	mvns	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	4013      	ands	r3, r2
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	bf14      	ite	ne
 800336a:	2301      	movne	r3, #1
 800336c:	2300      	moveq	r3, #0
 800336e:	b2db      	uxtb	r3, r3
 8003370:	e00b      	b.n	800338a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	43da      	mvns	r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	4013      	ands	r3, r2
 800337e:	b29b      	uxth	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	bf14      	ite	ne
 8003384:	2301      	movne	r3, #1
 8003386:	2300      	moveq	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d18d      	bne.n	80032aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033a4:	e02d      	b.n	8003402 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f878 	bl	800349c <I2C_IsAcknowledgeFailed>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e02d      	b.n	8003412 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d021      	beq.n	8003402 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033be:	f7fe f9c7 	bl	8001750 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d302      	bcc.n	80033d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d116      	bne.n	8003402 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2220      	movs	r2, #32
 80033de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f043 0220 	orr.w	r2, r3, #32
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e007      	b.n	8003412 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340c:	2b80      	cmp	r3, #128	; 0x80
 800340e:	d1ca      	bne.n	80033a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b084      	sub	sp, #16
 800341e:	af00      	add	r7, sp, #0
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003426:	e02d      	b.n	8003484 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 f837 	bl	800349c <I2C_IsAcknowledgeFailed>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e02d      	b.n	8003494 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d021      	beq.n	8003484 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003440:	f7fe f986 	bl	8001750 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	429a      	cmp	r2, r3
 800344e:	d302      	bcc.n	8003456 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d116      	bne.n	8003484 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	f043 0220 	orr.w	r2, r3, #32
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e007      	b.n	8003494 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b04      	cmp	r3, #4
 8003490:	d1ca      	bne.n	8003428 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b2:	d11b      	bne.n	80034ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	f043 0204 	orr.w	r2, r3, #4
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
	...

080034fc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e128      	b.n	8003760 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a90      	ldr	r2, [pc, #576]	; (8003768 <HAL_I2S_Init+0x26c>)
 8003526:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7fd ff5f 	bl	80013ec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2202      	movs	r2, #2
 8003532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003544:	f023 030f 	bic.w	r3, r3, #15
 8003548:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2202      	movs	r2, #2
 8003550:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d060      	beq.n	800361c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d102      	bne.n	8003568 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003562:	2310      	movs	r3, #16
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	e001      	b.n	800356c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003568:	2320      	movs	r3, #32
 800356a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2b20      	cmp	r3, #32
 8003572:	d802      	bhi.n	800357a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800357a:	2001      	movs	r0, #1
 800357c:	f002 fd48 	bl	8006010 <HAL_RCCEx_GetPeriphCLKFreq>
 8003580:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800358a:	d125      	bne.n	80035d8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d010      	beq.n	80035b6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	fbb2 f2f3 	udiv	r2, r2, r3
 800359e:	4613      	mov	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	461a      	mov	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b0:	3305      	adds	r3, #5
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	e01f      	b.n	80035f6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	461a      	mov	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d2:	3305      	adds	r3, #5
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	e00e      	b.n	80035f6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	461a      	mov	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f2:	3305      	adds	r3, #5
 80035f4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4a5c      	ldr	r2, [pc, #368]	; (800376c <HAL_I2S_Init+0x270>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	08db      	lsrs	r3, r3, #3
 8003600:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	085b      	lsrs	r3, r3, #1
 8003612:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	61bb      	str	r3, [r7, #24]
 800361a:	e003      	b.n	8003624 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800361c:	2302      	movs	r3, #2
 800361e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d902      	bls.n	8003630 <HAL_I2S_Init+0x134>
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	2bff      	cmp	r3, #255	; 0xff
 800362e:	d907      	bls.n	8003640 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003634:	f043 0210 	orr.w	r2, r3, #16
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e08f      	b.n	8003760 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	ea42 0103 	orr.w	r1, r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	430a      	orrs	r2, r1
 8003652:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800365e:	f023 030f 	bic.w	r3, r3, #15
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6851      	ldr	r1, [r2, #4]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6892      	ldr	r2, [r2, #8]
 800366a:	4311      	orrs	r1, r2
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	68d2      	ldr	r2, [r2, #12]
 8003670:	4311      	orrs	r1, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6992      	ldr	r2, [r2, #24]
 8003676:	430a      	orrs	r2, r1
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003682:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d161      	bne.n	8003750 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a38      	ldr	r2, [pc, #224]	; (8003770 <HAL_I2S_Init+0x274>)
 8003690:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a37      	ldr	r2, [pc, #220]	; (8003774 <HAL_I2S_Init+0x278>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d101      	bne.n	80036a0 <HAL_I2S_Init+0x1a4>
 800369c:	4b36      	ldr	r3, [pc, #216]	; (8003778 <HAL_I2S_Init+0x27c>)
 800369e:	e001      	b.n	80036a4 <HAL_I2S_Init+0x1a8>
 80036a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	4932      	ldr	r1, [pc, #200]	; (8003774 <HAL_I2S_Init+0x278>)
 80036ac:	428a      	cmp	r2, r1
 80036ae:	d101      	bne.n	80036b4 <HAL_I2S_Init+0x1b8>
 80036b0:	4a31      	ldr	r2, [pc, #196]	; (8003778 <HAL_I2S_Init+0x27c>)
 80036b2:	e001      	b.n	80036b8 <HAL_I2S_Init+0x1bc>
 80036b4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80036b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80036bc:	f023 030f 	bic.w	r3, r3, #15
 80036c0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a2b      	ldr	r2, [pc, #172]	; (8003774 <HAL_I2S_Init+0x278>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_I2S_Init+0x1d4>
 80036cc:	4b2a      	ldr	r3, [pc, #168]	; (8003778 <HAL_I2S_Init+0x27c>)
 80036ce:	e001      	b.n	80036d4 <HAL_I2S_Init+0x1d8>
 80036d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d4:	2202      	movs	r2, #2
 80036d6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a25      	ldr	r2, [pc, #148]	; (8003774 <HAL_I2S_Init+0x278>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d101      	bne.n	80036e6 <HAL_I2S_Init+0x1ea>
 80036e2:	4b25      	ldr	r3, [pc, #148]	; (8003778 <HAL_I2S_Init+0x27c>)
 80036e4:	e001      	b.n	80036ea <HAL_I2S_Init+0x1ee>
 80036e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f6:	d003      	beq.n	8003700 <HAL_I2S_Init+0x204>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d103      	bne.n	8003708 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	e001      	b.n	800370c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003708:	2300      	movs	r3, #0
 800370a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003716:	4313      	orrs	r3, r2
 8003718:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003720:	4313      	orrs	r3, r2
 8003722:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800372a:	4313      	orrs	r3, r2
 800372c:	b29a      	uxth	r2, r3
 800372e:	897b      	ldrh	r3, [r7, #10]
 8003730:	4313      	orrs	r3, r2
 8003732:	b29b      	uxth	r3, r3
 8003734:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003738:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a0d      	ldr	r2, [pc, #52]	; (8003774 <HAL_I2S_Init+0x278>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d101      	bne.n	8003748 <HAL_I2S_Init+0x24c>
 8003744:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <HAL_I2S_Init+0x27c>)
 8003746:	e001      	b.n	800374c <HAL_I2S_Init+0x250>
 8003748:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800374c:	897a      	ldrh	r2, [r7, #10]
 800374e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3720      	adds	r7, #32
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	08003a81 	.word	0x08003a81
 800376c:	cccccccd 	.word	0xcccccccd
 8003770:	08003b95 	.word	0x08003b95
 8003774:	40003800 	.word	0x40003800
 8003778:	40003400 	.word	0x40003400

0800377c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	4613      	mov	r3, r2
 8003788:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HAL_I2S_Transmit_DMA+0x1a>
 8003790:	88fb      	ldrh	r3, [r7, #6]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e08e      	b.n	80038b8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <HAL_I2S_Transmit_DMA+0x2e>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e086      	b.n	80038b8 <HAL_I2S_Transmit_DMA+0x13c>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d005      	beq.n	80037ca <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80037c6:	2302      	movs	r3, #2
 80037c8:	e076      	b.n	80038b8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2203      	movs	r2, #3
 80037ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d002      	beq.n	80037f6 <HAL_I2S_Transmit_DMA+0x7a>
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	2b05      	cmp	r3, #5
 80037f4:	d10a      	bne.n	800380c <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80037f6:	88fb      	ldrh	r3, [r7, #6]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	855a      	strh	r2, [r3, #42]	; 0x2a
 800380a:	e005      	b.n	8003818 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	88fa      	ldrh	r2, [r7, #6]
 8003810:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	88fa      	ldrh	r2, [r7, #6]
 8003816:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381c:	4a28      	ldr	r2, [pc, #160]	; (80038c0 <HAL_I2S_Transmit_DMA+0x144>)
 800381e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	4a27      	ldr	r2, [pc, #156]	; (80038c4 <HAL_I2S_Transmit_DMA+0x148>)
 8003826:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	4a26      	ldr	r2, [pc, #152]	; (80038c8 <HAL_I2S_Transmit_DMA+0x14c>)
 800382e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003838:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003840:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003846:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003848:	f7fe fd84 	bl	8002354 <HAL_DMA_Start_IT>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00f      	beq.n	8003872 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	f043 0208 	orr.w	r2, r3, #8
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e022      	b.n	80038b8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387c:	2b00      	cmp	r3, #0
 800387e:	d107      	bne.n	8003890 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	69da      	ldr	r2, [r3, #28]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800388e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d107      	bne.n	80038ae <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 0202 	orr.w	r2, r2, #2
 80038ac:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	0800395f 	.word	0x0800395f
 80038c4:	0800391d 	.word	0x0800391d
 80038c8:	0800397b 	.word	0x0800397b

080038cc <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10e      	bne.n	8003950 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0202 	bic.w	r2, r2, #2
 8003940:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f7ff ffc5 	bl	80038e0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003956:	bf00      	nop
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f7ff ffad 	bl	80038cc <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003972:	bf00      	nop
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b084      	sub	sp, #16
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003986:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0203 	bic.w	r2, r2, #3
 8003996:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b0:	f043 0208 	orr.w	r2, r3, #8
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f7ff ffa5 	bl	8003908 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b082      	sub	sp, #8
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	881a      	ldrh	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	1c9a      	adds	r2, r3, #2
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10e      	bne.n	8003a1a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a0a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff ff63 	bl	80038e0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	b292      	uxth	r2, r2
 8003a36:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	1c9a      	adds	r2, r3, #2
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10e      	bne.n	8003a78 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a68:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff ff3e 	bl	80038f4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a78:	bf00      	nop
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d13a      	bne.n	8003b12 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d109      	bne.n	8003aba <I2S_IRQHandler+0x3a>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab0:	2b40      	cmp	r3, #64	; 0x40
 8003ab2:	d102      	bne.n	8003aba <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff ffb4 	bl	8003a22 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac0:	2b40      	cmp	r3, #64	; 0x40
 8003ac2:	d126      	bne.n	8003b12 <I2S_IRQHandler+0x92>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	d11f      	bne.n	8003b12 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ae0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b04:	f043 0202 	orr.w	r2, r3, #2
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7ff fefb 	bl	8003908 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d136      	bne.n	8003b8c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d109      	bne.n	8003b3c <I2S_IRQHandler+0xbc>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b32:	2b80      	cmp	r3, #128	; 0x80
 8003b34:	d102      	bne.n	8003b3c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff ff45 	bl	80039c6 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d122      	bne.n	8003b8c <I2S_IRQHandler+0x10c>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b20      	cmp	r3, #32
 8003b52:	d11b      	bne.n	8003b8c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b62:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	f043 0204 	orr.w	r2, r3, #4
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff febe 	bl	8003908 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b8c:	bf00      	nop
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a92      	ldr	r2, [pc, #584]	; (8003df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d101      	bne.n	8003bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003bae:	4b92      	ldr	r3, [pc, #584]	; (8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bb0:	e001      	b.n	8003bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003bb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a8b      	ldr	r2, [pc, #556]	; (8003df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d101      	bne.n	8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003bcc:	4b8a      	ldr	r3, [pc, #552]	; (8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bce:	e001      	b.n	8003bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003bd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be0:	d004      	beq.n	8003bec <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f040 8099 	bne.w	8003d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d107      	bne.n	8003c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f925 	bl	8003e50 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d107      	bne.n	8003c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f9c8 	bl	8003fb0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c26:	2b40      	cmp	r3, #64	; 0x40
 8003c28:	d13a      	bne.n	8003ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d035      	beq.n	8003ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a6e      	ldr	r2, [pc, #440]	; (8003df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d101      	bne.n	8003c42 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003c3e:	4b6e      	ldr	r3, [pc, #440]	; (8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c40:	e001      	b.n	8003c46 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003c42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4969      	ldr	r1, [pc, #420]	; (8003df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c4e:	428b      	cmp	r3, r1
 8003c50:	d101      	bne.n	8003c56 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003c52:	4b69      	ldr	r3, [pc, #420]	; (8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c54:	e001      	b.n	8003c5a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003c56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c5e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c6e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c92:	f043 0202 	orr.w	r2, r3, #2
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff fe34 	bl	8003908 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	f040 80c3 	bne.w	8003e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f003 0320 	and.w	r3, r3, #32
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 80bd 	beq.w	8003e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cc6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a49      	ldr	r2, [pc, #292]	; (8003df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d101      	bne.n	8003cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003cd2:	4b49      	ldr	r3, [pc, #292]	; (8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cd4:	e001      	b.n	8003cda <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003cd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4944      	ldr	r1, [pc, #272]	; (8003df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ce2:	428b      	cmp	r3, r1
 8003ce4:	d101      	bne.n	8003cea <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003ce6:	4b44      	ldr	r3, [pc, #272]	; (8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ce8:	e001      	b.n	8003cee <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003cea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cf2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	60bb      	str	r3, [r7, #8]
 8003d00:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0e:	f043 0204 	orr.w	r2, r3, #4
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff fdf6 	bl	8003908 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d1c:	e089      	b.n	8003e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d107      	bne.n	8003d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f8be 	bl	8003eb4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d107      	bne.n	8003d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f8fd 	bl	8003f4c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d58:	2b40      	cmp	r3, #64	; 0x40
 8003d5a:	d12f      	bne.n	8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d02a      	beq.n	8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d74:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1e      	ldr	r2, [pc, #120]	; (8003df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d101      	bne.n	8003d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003d80:	4b1d      	ldr	r3, [pc, #116]	; (8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d82:	e001      	b.n	8003d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003d84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4919      	ldr	r1, [pc, #100]	; (8003df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d90:	428b      	cmp	r3, r1
 8003d92:	d101      	bne.n	8003d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003d94:	4b18      	ldr	r3, [pc, #96]	; (8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d96:	e001      	b.n	8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003d98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003da0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dae:	f043 0202 	orr.w	r2, r3, #2
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff fda6 	bl	8003908 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b08      	cmp	r3, #8
 8003dc4:	d136      	bne.n	8003e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d031      	beq.n	8003e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a07      	ldr	r2, [pc, #28]	; (8003df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d101      	bne.n	8003dde <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003dda:	4b07      	ldr	r3, [pc, #28]	; (8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ddc:	e001      	b.n	8003de2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003dde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4902      	ldr	r1, [pc, #8]	; (8003df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dea:	428b      	cmp	r3, r1
 8003dec:	d106      	bne.n	8003dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003dee:	4b02      	ldr	r3, [pc, #8]	; (8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003df0:	e006      	b.n	8003e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003df2:	bf00      	nop
 8003df4:	40003800 	.word	0x40003800
 8003df8:	40003400 	.word	0x40003400
 8003dfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e04:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e14:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e22:	f043 0204 	orr.w	r2, r3, #4
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff fd6c 	bl	8003908 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e30:	e000      	b.n	8003e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e32:	bf00      	nop
}
 8003e34:	bf00      	nop
 8003e36:	3720      	adds	r7, #32
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	1c99      	adds	r1, r3, #2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6251      	str	r1, [r2, #36]	; 0x24
 8003e62:	881a      	ldrh	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d113      	bne.n	8003eaa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e90:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d106      	bne.n	8003eaa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7ff ffc9 	bl	8003e3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003eaa:	bf00      	nop
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	1c99      	adds	r1, r3, #2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6251      	str	r1, [r2, #36]	; 0x24
 8003ec6:	8819      	ldrh	r1, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1d      	ldr	r2, [pc, #116]	; (8003f44 <I2SEx_TxISR_I2SExt+0x90>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d101      	bne.n	8003ed6 <I2SEx_TxISR_I2SExt+0x22>
 8003ed2:	4b1d      	ldr	r3, [pc, #116]	; (8003f48 <I2SEx_TxISR_I2SExt+0x94>)
 8003ed4:	e001      	b.n	8003eda <I2SEx_TxISR_I2SExt+0x26>
 8003ed6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eda:	460a      	mov	r2, r1
 8003edc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d121      	bne.n	8003f3a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a12      	ldr	r2, [pc, #72]	; (8003f44 <I2SEx_TxISR_I2SExt+0x90>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d101      	bne.n	8003f04 <I2SEx_TxISR_I2SExt+0x50>
 8003f00:	4b11      	ldr	r3, [pc, #68]	; (8003f48 <I2SEx_TxISR_I2SExt+0x94>)
 8003f02:	e001      	b.n	8003f08 <I2SEx_TxISR_I2SExt+0x54>
 8003f04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	490d      	ldr	r1, [pc, #52]	; (8003f44 <I2SEx_TxISR_I2SExt+0x90>)
 8003f10:	428b      	cmp	r3, r1
 8003f12:	d101      	bne.n	8003f18 <I2SEx_TxISR_I2SExt+0x64>
 8003f14:	4b0c      	ldr	r3, [pc, #48]	; (8003f48 <I2SEx_TxISR_I2SExt+0x94>)
 8003f16:	e001      	b.n	8003f1c <I2SEx_TxISR_I2SExt+0x68>
 8003f18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f20:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d106      	bne.n	8003f3a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff ff81 	bl	8003e3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f3a:	bf00      	nop
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40003800 	.word	0x40003800
 8003f48:	40003400 	.word	0x40003400

08003f4c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68d8      	ldr	r0, [r3, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5e:	1c99      	adds	r1, r3, #2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f64:	b282      	uxth	r2, r0
 8003f66:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d113      	bne.n	8003fa8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f8e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff ff4a 	bl	8003e3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fa8:	bf00      	nop
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a20      	ldr	r2, [pc, #128]	; (8004040 <I2SEx_RxISR_I2SExt+0x90>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d101      	bne.n	8003fc6 <I2SEx_RxISR_I2SExt+0x16>
 8003fc2:	4b20      	ldr	r3, [pc, #128]	; (8004044 <I2SEx_RxISR_I2SExt+0x94>)
 8003fc4:	e001      	b.n	8003fca <I2SEx_RxISR_I2SExt+0x1a>
 8003fc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fca:	68d8      	ldr	r0, [r3, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	1c99      	adds	r1, r3, #2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003fd6:	b282      	uxth	r2, r0
 8003fd8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d121      	bne.n	8004036 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a12      	ldr	r2, [pc, #72]	; (8004040 <I2SEx_RxISR_I2SExt+0x90>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d101      	bne.n	8004000 <I2SEx_RxISR_I2SExt+0x50>
 8003ffc:	4b11      	ldr	r3, [pc, #68]	; (8004044 <I2SEx_RxISR_I2SExt+0x94>)
 8003ffe:	e001      	b.n	8004004 <I2SEx_RxISR_I2SExt+0x54>
 8004000:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	490d      	ldr	r1, [pc, #52]	; (8004040 <I2SEx_RxISR_I2SExt+0x90>)
 800400c:	428b      	cmp	r3, r1
 800400e:	d101      	bne.n	8004014 <I2SEx_RxISR_I2SExt+0x64>
 8004010:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <I2SEx_RxISR_I2SExt+0x94>)
 8004012:	e001      	b.n	8004018 <I2SEx_RxISR_I2SExt+0x68>
 8004014:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004018:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800401c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d106      	bne.n	8004036 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff ff03 	bl	8003e3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004036:	bf00      	nop
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40003800 	.word	0x40003800
 8004044:	40003400 	.word	0x40003400

08004048 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800404a:	b08f      	sub	sp, #60	; 0x3c
 800404c:	af0a      	add	r7, sp, #40	; 0x28
 800404e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e10f      	b.n	800427a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d106      	bne.n	800407a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f005 fe45 	bl	8009d04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2203      	movs	r2, #3
 800407e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408a:	2b00      	cmp	r3, #0
 800408c:	d102      	bne.n	8004094 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f002 f92c 	bl	80062f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	687e      	ldr	r6, [r7, #4]
 80040a6:	466d      	mov	r5, sp
 80040a8:	f106 0410 	add.w	r4, r6, #16
 80040ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80040bc:	1d33      	adds	r3, r6, #4
 80040be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040c0:	6838      	ldr	r0, [r7, #0]
 80040c2:	f002 f803 	bl	80060cc <USB_CoreInit>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d005      	beq.n	80040d8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0d0      	b.n	800427a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2100      	movs	r1, #0
 80040de:	4618      	mov	r0, r3
 80040e0:	f002 f91a 	bl	8006318 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040e4:	2300      	movs	r3, #0
 80040e6:	73fb      	strb	r3, [r7, #15]
 80040e8:	e04a      	b.n	8004180 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040ea:	7bfa      	ldrb	r2, [r7, #15]
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	4613      	mov	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	333d      	adds	r3, #61	; 0x3d
 80040fa:	2201      	movs	r2, #1
 80040fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040fe:	7bfa      	ldrb	r2, [r7, #15]
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	440b      	add	r3, r1
 800410c:	333c      	adds	r3, #60	; 0x3c
 800410e:	7bfa      	ldrb	r2, [r7, #15]
 8004110:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004112:	7bfa      	ldrb	r2, [r7, #15]
 8004114:	7bfb      	ldrb	r3, [r7, #15]
 8004116:	b298      	uxth	r0, r3
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	4613      	mov	r3, r2
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	4413      	add	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	440b      	add	r3, r1
 8004124:	3344      	adds	r3, #68	; 0x44
 8004126:	4602      	mov	r2, r0
 8004128:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800412a:	7bfa      	ldrb	r2, [r7, #15]
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	3340      	adds	r3, #64	; 0x40
 800413a:	2200      	movs	r2, #0
 800413c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800413e:	7bfa      	ldrb	r2, [r7, #15]
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	4413      	add	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	440b      	add	r3, r1
 800414c:	3348      	adds	r3, #72	; 0x48
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004152:	7bfa      	ldrb	r2, [r7, #15]
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	4613      	mov	r3, r2
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	4413      	add	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	440b      	add	r3, r1
 8004160:	334c      	adds	r3, #76	; 0x4c
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004166:	7bfa      	ldrb	r2, [r7, #15]
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	3354      	adds	r3, #84	; 0x54
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800417a:	7bfb      	ldrb	r3, [r7, #15]
 800417c:	3301      	adds	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
 8004180:	7bfa      	ldrb	r2, [r7, #15]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	429a      	cmp	r2, r3
 8004188:	d3af      	bcc.n	80040ea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800418a:	2300      	movs	r3, #0
 800418c:	73fb      	strb	r3, [r7, #15]
 800418e:	e044      	b.n	800421a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004190:	7bfa      	ldrb	r2, [r7, #15]
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	4413      	add	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80041a2:	2200      	movs	r2, #0
 80041a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041a6:	7bfa      	ldrb	r2, [r7, #15]
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80041b8:	7bfa      	ldrb	r2, [r7, #15]
 80041ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041bc:	7bfa      	ldrb	r2, [r7, #15]
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80041ce:	2200      	movs	r2, #0
 80041d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041d2:	7bfa      	ldrb	r2, [r7, #15]
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	4613      	mov	r3, r2
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041e8:	7bfa      	ldrb	r2, [r7, #15]
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041fe:	7bfa      	ldrb	r2, [r7, #15]
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	4613      	mov	r3, r2
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	4413      	add	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	440b      	add	r3, r1
 800420c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	3301      	adds	r3, #1
 8004218:	73fb      	strb	r3, [r7, #15]
 800421a:	7bfa      	ldrb	r2, [r7, #15]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	429a      	cmp	r2, r3
 8004222:	d3b5      	bcc.n	8004190 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	603b      	str	r3, [r7, #0]
 800422a:	687e      	ldr	r6, [r7, #4]
 800422c:	466d      	mov	r5, sp
 800422e:	f106 0410 	add.w	r4, r6, #16
 8004232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004238:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800423a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800423e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004242:	1d33      	adds	r3, r6, #4
 8004244:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004246:	6838      	ldr	r0, [r7, #0]
 8004248:	f002 f8b2 	bl	80063b0 <USB_DevInit>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d005      	beq.n	800425e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2202      	movs	r2, #2
 8004256:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e00d      	b.n	800427a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f003 fa01 	bl	800767a <USB_DevDisconnect>

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004282 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b084      	sub	sp, #16
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004296:	2b01      	cmp	r3, #1
 8004298:	d101      	bne.n	800429e <HAL_PCD_Start+0x1c>
 800429a:	2302      	movs	r3, #2
 800429c:	e020      	b.n	80042e0 <HAL_PCD_Start+0x5e>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d109      	bne.n	80042c2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d005      	beq.n	80042c2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f002 f804 	bl	80062d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f003 f9b1 	bl	8007638 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80042e8:	b590      	push	{r4, r7, lr}
 80042ea:	b08d      	sub	sp, #52	; 0x34
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f003 fa6f 	bl	80077e2 <USB_GetMode>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	f040 848a 	bne.w	8004c20 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f003 f9d3 	bl	80076bc <USB_ReadInterrupts>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 8480 	beq.w	8004c1e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	0a1b      	lsrs	r3, r3, #8
 8004328:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f003 f9c0 	bl	80076bc <USB_ReadInterrupts>
 800433c:	4603      	mov	r3, r0
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b02      	cmp	r3, #2
 8004344:	d107      	bne.n	8004356 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695a      	ldr	r2, [r3, #20]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f002 0202 	and.w	r2, r2, #2
 8004354:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f003 f9ae 	bl	80076bc <USB_ReadInterrupts>
 8004360:	4603      	mov	r3, r0
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	2b10      	cmp	r3, #16
 8004368:	d161      	bne.n	800442e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	699a      	ldr	r2, [r3, #24]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0210 	bic.w	r2, r2, #16
 8004378:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	f003 020f 	and.w	r2, r3, #15
 8004386:	4613      	mov	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	4413      	add	r3, r2
 8004396:	3304      	adds	r3, #4
 8004398:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	0c5b      	lsrs	r3, r3, #17
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d124      	bne.n	80043f0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80043ac:	4013      	ands	r3, r2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d035      	beq.n	800441e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	091b      	lsrs	r3, r3, #4
 80043ba:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	461a      	mov	r2, r3
 80043c4:	6a38      	ldr	r0, [r7, #32]
 80043c6:	f002 ffe5 	bl	8007394 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	691a      	ldr	r2, [r3, #16]
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	091b      	lsrs	r3, r3, #4
 80043d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043d6:	441a      	add	r2, r3
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	6a1a      	ldr	r2, [r3, #32]
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	091b      	lsrs	r3, r3, #4
 80043e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043e8:	441a      	add	r2, r3
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	621a      	str	r2, [r3, #32]
 80043ee:	e016      	b.n	800441e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	0c5b      	lsrs	r3, r3, #17
 80043f4:	f003 030f 	and.w	r3, r3, #15
 80043f8:	2b06      	cmp	r3, #6
 80043fa:	d110      	bne.n	800441e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004402:	2208      	movs	r2, #8
 8004404:	4619      	mov	r1, r3
 8004406:	6a38      	ldr	r0, [r7, #32]
 8004408:	f002 ffc4 	bl	8007394 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	6a1a      	ldr	r2, [r3, #32]
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	091b      	lsrs	r3, r3, #4
 8004414:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004418:	441a      	add	r2, r3
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699a      	ldr	r2, [r3, #24]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0210 	orr.w	r2, r2, #16
 800442c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f003 f942 	bl	80076bc <USB_ReadInterrupts>
 8004438:	4603      	mov	r3, r0
 800443a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800443e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004442:	f040 80a7 	bne.w	8004594 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004446:	2300      	movs	r3, #0
 8004448:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f003 f947 	bl	80076e2 <USB_ReadDevAllOutEpInterrupt>
 8004454:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004456:	e099      	b.n	800458c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 808e 	beq.w	8004580 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	4611      	mov	r1, r2
 800446e:	4618      	mov	r0, r3
 8004470:	f003 f96b 	bl	800774a <USB_ReadDevOutEPInterrupt>
 8004474:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00c      	beq.n	800449a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448c:	461a      	mov	r2, r3
 800448e:	2301      	movs	r3, #1
 8004490:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004492:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 fec3 	bl	8005220 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00c      	beq.n	80044be <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b0:	461a      	mov	r2, r3
 80044b2:	2308      	movs	r3, #8
 80044b4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80044b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 ff99 	bl	80053f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f003 0310 	and.w	r3, r3, #16
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d008      	beq.n	80044da <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d4:	461a      	mov	r2, r3
 80044d6:	2310      	movs	r3, #16
 80044d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d030      	beq.n	8004546 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ec:	2b80      	cmp	r3, #128	; 0x80
 80044ee:	d109      	bne.n	8004504 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004502:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004506:	4613      	mov	r3, r2
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	4413      	add	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	4413      	add	r3, r2
 8004516:	3304      	adds	r3, #4
 8004518:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	78db      	ldrb	r3, [r3, #3]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d108      	bne.n	8004534 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2200      	movs	r2, #0
 8004526:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	b2db      	uxtb	r3, r3
 800452c:	4619      	mov	r1, r3
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f005 fcee 	bl	8009f10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004540:	461a      	mov	r2, r3
 8004542:	2302      	movs	r3, #2
 8004544:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d008      	beq.n	8004562 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455c:	461a      	mov	r2, r3
 800455e:	2320      	movs	r3, #32
 8004560:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d009      	beq.n	8004580 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004578:	461a      	mov	r2, r3
 800457a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800457e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	3301      	adds	r3, #1
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004588:	085b      	lsrs	r3, r3, #1
 800458a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800458c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458e:	2b00      	cmp	r3, #0
 8004590:	f47f af62 	bne.w	8004458 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f003 f88f 	bl	80076bc <USB_ReadInterrupts>
 800459e:	4603      	mov	r3, r0
 80045a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045a8:	f040 80db 	bne.w	8004762 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f003 f8b0 	bl	8007716 <USB_ReadDevAllInEpInterrupt>
 80045b6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80045bc:	e0cd      	b.n	800475a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80045be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 80c2 	beq.w	800474e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	4611      	mov	r1, r2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f003 f8d6 	bl	8007786 <USB_ReadDevInEPInterrupt>
 80045da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d057      	beq.n	8004696 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	f003 030f 	and.w	r3, r3, #15
 80045ec:	2201      	movs	r2, #1
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	43db      	mvns	r3, r3
 8004600:	69f9      	ldr	r1, [r7, #28]
 8004602:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004606:	4013      	ands	r3, r2
 8004608:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	4413      	add	r3, r2
 8004612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004616:	461a      	mov	r2, r3
 8004618:	2301      	movs	r3, #1
 800461a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d132      	bne.n	800468a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004628:	4613      	mov	r3, r2
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	334c      	adds	r3, #76	; 0x4c
 8004634:	6819      	ldr	r1, [r3, #0]
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463a:	4613      	mov	r3, r2
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	4413      	add	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4403      	add	r3, r0
 8004644:	3348      	adds	r3, #72	; 0x48
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4419      	add	r1, r3
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464e:	4613      	mov	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4403      	add	r3, r0
 8004658:	334c      	adds	r3, #76	; 0x4c
 800465a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	2b00      	cmp	r3, #0
 8004660:	d113      	bne.n	800468a <HAL_PCD_IRQHandler+0x3a2>
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004666:	4613      	mov	r3, r2
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	440b      	add	r3, r1
 8004670:	3354      	adds	r3, #84	; 0x54
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d108      	bne.n	800468a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004682:	461a      	mov	r2, r3
 8004684:	2101      	movs	r1, #1
 8004686:	f003 f8dd 	bl	8007844 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	b2db      	uxtb	r3, r3
 800468e:	4619      	mov	r1, r3
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f005 fbb8 	bl	8009e06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d008      	beq.n	80046b2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ac:	461a      	mov	r2, r3
 80046ae:	2308      	movs	r3, #8
 80046b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f003 0310 	and.w	r3, r3, #16
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d008      	beq.n	80046ce <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c8:	461a      	mov	r2, r3
 80046ca:	2310      	movs	r3, #16
 80046cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d008      	beq.n	80046ea <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e4:	461a      	mov	r2, r3
 80046e6:	2340      	movs	r3, #64	; 0x40
 80046e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d023      	beq.n	800473c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80046f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046f6:	6a38      	ldr	r0, [r7, #32]
 80046f8:	f001 ffbe 	bl	8006678 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80046fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046fe:	4613      	mov	r3, r2
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	4413      	add	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	3338      	adds	r3, #56	; 0x38
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	4413      	add	r3, r2
 800470c:	3304      	adds	r3, #4
 800470e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	78db      	ldrb	r3, [r3, #3]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d108      	bne.n	800472a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	2200      	movs	r2, #0
 800471c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	b2db      	uxtb	r3, r3
 8004722:	4619      	mov	r1, r3
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f005 fc05 	bl	8009f34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004736:	461a      	mov	r2, r3
 8004738:	2302      	movs	r3, #2
 800473a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004746:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fcdb 	bl	8005104 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	3301      	adds	r3, #1
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	085b      	lsrs	r3, r3, #1
 8004758:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475c:	2b00      	cmp	r3, #0
 800475e:	f47f af2e 	bne.w	80045be <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f002 ffa8 	bl	80076bc <USB_ReadInterrupts>
 800476c:	4603      	mov	r3, r0
 800476e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004772:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004776:	d122      	bne.n	80047be <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	69fa      	ldr	r2, [r7, #28]
 8004782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004786:	f023 0301 	bic.w	r3, r3, #1
 800478a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004792:	2b01      	cmp	r3, #1
 8004794:	d108      	bne.n	80047a8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800479e:	2100      	movs	r1, #0
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 fec3 	bl	800552c <HAL_PCDEx_LPM_Callback>
 80047a6:	e002      	b.n	80047ae <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f005 fba3 	bl	8009ef4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695a      	ldr	r2, [r3, #20]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80047bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f002 ff7a 	bl	80076bc <USB_ReadInterrupts>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d2:	d112      	bne.n	80047fa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d102      	bne.n	80047ea <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f005 fb5f 	bl	8009ea8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	695a      	ldr	r2, [r3, #20]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80047f8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f002 ff5c 	bl	80076bc <USB_ReadInterrupts>
 8004804:	4603      	mov	r3, r0
 8004806:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800480a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480e:	f040 80b7 	bne.w	8004980 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	69fa      	ldr	r2, [r7, #28]
 800481c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004820:	f023 0301 	bic.w	r3, r3, #1
 8004824:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2110      	movs	r1, #16
 800482c:	4618      	mov	r0, r3
 800482e:	f001 ff23 	bl	8006678 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004832:	2300      	movs	r3, #0
 8004834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004836:	e046      	b.n	80048c6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	4413      	add	r3, r2
 8004840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004844:	461a      	mov	r2, r3
 8004846:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800484a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800484c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800485c:	0151      	lsls	r1, r2, #5
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	440a      	add	r2, r1
 8004862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004866:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800486a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800486c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	4413      	add	r3, r2
 8004874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004878:	461a      	mov	r2, r3
 800487a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800487e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004890:	0151      	lsls	r1, r2, #5
 8004892:	69fa      	ldr	r2, [r7, #28]
 8004894:	440a      	add	r2, r1
 8004896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800489a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800489e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80048a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048b0:	0151      	lsls	r1, r2, #5
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	440a      	add	r2, r1
 80048b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048be:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c2:	3301      	adds	r3, #1
 80048c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d3b3      	bcc.n	8004838 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048de:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80048e2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d016      	beq.n	800491a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048f6:	69fa      	ldr	r2, [r7, #28]
 80048f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048fc:	f043 030b 	orr.w	r3, r3, #11
 8004900:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004912:	f043 030b 	orr.w	r3, r3, #11
 8004916:	6453      	str	r3, [r2, #68]	; 0x44
 8004918:	e015      	b.n	8004946 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004928:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800492c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004930:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004940:	f043 030b 	orr.w	r3, r3, #11
 8004944:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004954:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004958:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800496a:	461a      	mov	r2, r3
 800496c:	f002 ff6a 	bl	8007844 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	695a      	ldr	r2, [r3, #20]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800497e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4618      	mov	r0, r3
 8004986:	f002 fe99 	bl	80076bc <USB_ReadInterrupts>
 800498a:	4603      	mov	r3, r0
 800498c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004994:	d124      	bne.n	80049e0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f002 ff2f 	bl	80077fe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f001 fee4 	bl	8006772 <USB_GetDevSpeed>
 80049aa:	4603      	mov	r3, r0
 80049ac:	461a      	mov	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681c      	ldr	r4, [r3, #0]
 80049b6:	f001 fa29 	bl	8005e0c <HAL_RCC_GetHCLKFreq>
 80049ba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	461a      	mov	r2, r3
 80049c4:	4620      	mov	r0, r4
 80049c6:	f001 fbe3 	bl	8006190 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f005 fa43 	bl	8009e56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695a      	ldr	r2, [r3, #20]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80049de:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f002 fe69 	bl	80076bc <USB_ReadInterrupts>
 80049ea:	4603      	mov	r3, r0
 80049ec:	f003 0308 	and.w	r3, r3, #8
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d10a      	bne.n	8004a0a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f005 fa20 	bl	8009e3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695a      	ldr	r2, [r3, #20]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f002 0208 	and.w	r2, r2, #8
 8004a08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f002 fe54 	bl	80076bc <USB_ReadInterrupts>
 8004a14:	4603      	mov	r3, r0
 8004a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1a:	2b80      	cmp	r3, #128	; 0x80
 8004a1c:	d122      	bne.n	8004a64 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a2e:	e014      	b.n	8004a5a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a34:	4613      	mov	r3, r2
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	4413      	add	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d105      	bne.n	8004a54 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fb27 	bl	80050a2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	3301      	adds	r3, #1
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d3e5      	bcc.n	8004a30 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f002 fe27 	bl	80076bc <USB_ReadInterrupts>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a78:	d13b      	bne.n	8004af2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7e:	e02b      	b.n	8004ad8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a90:	6879      	ldr	r1, [r7, #4]
 8004a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a94:	4613      	mov	r3, r2
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	4413      	add	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	440b      	add	r3, r1
 8004a9e:	3340      	adds	r3, #64	; 0x40
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d115      	bne.n	8004ad2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004aa6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	da12      	bge.n	8004ad2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004aac:	6879      	ldr	r1, [r7, #4]
 8004aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	333f      	adds	r3, #63	; 0x3f
 8004abc:	2201      	movs	r2, #1
 8004abe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	4619      	mov	r1, r3
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fae8 	bl	80050a2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d3ce      	bcc.n	8004a80 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695a      	ldr	r2, [r3, #20]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f002 fde0 	bl	80076bc <USB_ReadInterrupts>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b06:	d155      	bne.n	8004bb4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b08:	2301      	movs	r3, #1
 8004b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b0c:	e045      	b.n	8004b9a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b22:	4613      	mov	r3, r2
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	4413      	add	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	440b      	add	r3, r1
 8004b2c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d12e      	bne.n	8004b94 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004b36:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	da2b      	bge.n	8004b94 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004b48:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d121      	bne.n	8004b94 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004b50:	6879      	ldr	r1, [r7, #4]
 8004b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b54:	4613      	mov	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	4413      	add	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004b62:	2201      	movs	r2, #1
 8004b64:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10a      	bne.n	8004b94 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	69fa      	ldr	r2, [r7, #28]
 8004b88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b90:	6053      	str	r3, [r2, #4]
            break;
 8004b92:	e007      	b.n	8004ba4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	3301      	adds	r3, #1
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d3b4      	bcc.n	8004b0e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	695a      	ldr	r2, [r3, #20]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f002 fd7f 	bl	80076bc <USB_ReadInterrupts>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc8:	d10a      	bne.n	8004be0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f005 f9c4 	bl	8009f58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695a      	ldr	r2, [r3, #20]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004bde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f002 fd69 	bl	80076bc <USB_ReadInterrupts>
 8004bea:	4603      	mov	r3, r0
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d115      	bne.n	8004c20 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	f003 0304 	and.w	r3, r3, #4
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f005 f9b4 	bl	8009f74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6859      	ldr	r1, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	605a      	str	r2, [r3, #4]
 8004c1c:	e000      	b.n	8004c20 <HAL_PCD_IRQHandler+0x938>
      return;
 8004c1e:	bf00      	nop
    }
  }
}
 8004c20:	3734      	adds	r7, #52	; 0x34
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd90      	pop	{r4, r7, pc}

08004c26 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_PCD_SetAddress+0x1a>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e013      	b.n	8004c68 <HAL_PCD_SetAddress+0x42>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	78fa      	ldrb	r2, [r7, #3]
 8004c4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	78fa      	ldrb	r2, [r7, #3]
 8004c56:	4611      	mov	r1, r2
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f002 fcc7 	bl	80075ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	4608      	mov	r0, r1
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	4603      	mov	r3, r0
 8004c80:	70fb      	strb	r3, [r7, #3]
 8004c82:	460b      	mov	r3, r1
 8004c84:	803b      	strh	r3, [r7, #0]
 8004c86:	4613      	mov	r3, r2
 8004c88:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	da0f      	bge.n	8004cb6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c96:	78fb      	ldrb	r3, [r7, #3]
 8004c98:	f003 020f 	and.w	r2, r3, #15
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	4413      	add	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	3338      	adds	r3, #56	; 0x38
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	4413      	add	r3, r2
 8004caa:	3304      	adds	r3, #4
 8004cac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	705a      	strb	r2, [r3, #1]
 8004cb4:	e00f      	b.n	8004cd6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cb6:	78fb      	ldrb	r3, [r7, #3]
 8004cb8:	f003 020f 	and.w	r2, r3, #15
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	4413      	add	r3, r2
 8004ccc:	3304      	adds	r3, #4
 8004cce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004ce2:	883a      	ldrh	r2, [r7, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	78ba      	ldrb	r2, [r7, #2]
 8004cec:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	785b      	ldrb	r3, [r3, #1]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d004      	beq.n	8004d00 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004d00:	78bb      	ldrb	r3, [r7, #2]
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d102      	bne.n	8004d0c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d101      	bne.n	8004d1a <HAL_PCD_EP_Open+0xaa>
 8004d16:	2302      	movs	r3, #2
 8004d18:	e00e      	b.n	8004d38 <HAL_PCD_EP_Open+0xc8>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68f9      	ldr	r1, [r7, #12]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f001 fd47 	bl	80067bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004d36:	7afb      	ldrb	r3, [r7, #11]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	460b      	mov	r3, r1
 8004d4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	da0f      	bge.n	8004d74 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	f003 020f 	and.w	r2, r3, #15
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	4413      	add	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	3338      	adds	r3, #56	; 0x38
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	4413      	add	r3, r2
 8004d68:	3304      	adds	r3, #4
 8004d6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	705a      	strb	r2, [r3, #1]
 8004d72:	e00f      	b.n	8004d94 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d74:	78fb      	ldrb	r3, [r7, #3]
 8004d76:	f003 020f 	and.w	r2, r3, #15
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	4413      	add	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	4413      	add	r3, r2
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004d94:	78fb      	ldrb	r3, [r7, #3]
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <HAL_PCD_EP_Close+0x6e>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e00e      	b.n	8004dcc <HAL_PCD_EP_Close+0x8c>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68f9      	ldr	r1, [r7, #12]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f001 fd85 	bl	80068cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	607a      	str	r2, [r7, #4]
 8004dde:	603b      	str	r3, [r7, #0]
 8004de0:	460b      	mov	r3, r1
 8004de2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004de4:	7afb      	ldrb	r3, [r7, #11]
 8004de6:	f003 020f 	and.w	r2, r3, #15
 8004dea:	4613      	mov	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	4413      	add	r3, r2
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2200      	movs	r2, #0
 8004e14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e16:	7afb      	ldrb	r3, [r7, #11]
 8004e18:	f003 030f 	and.w	r3, r3, #15
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d102      	bne.n	8004e30 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e30:	7afb      	ldrb	r3, [r7, #11]
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d109      	bne.n	8004e4e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6818      	ldr	r0, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	461a      	mov	r2, r3
 8004e46:	6979      	ldr	r1, [r7, #20]
 8004e48:	f002 f864 	bl	8006f14 <USB_EP0StartXfer>
 8004e4c:	e008      	b.n	8004e60 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6818      	ldr	r0, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	461a      	mov	r2, r3
 8004e5a:	6979      	ldr	r1, [r7, #20]
 8004e5c:	f001 fe12 	bl	8006a84 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3718      	adds	r7, #24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	460b      	mov	r3, r1
 8004e74:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004e76:	78fb      	ldrb	r3, [r7, #3]
 8004e78:	f003 020f 	and.w	r2, r3, #15
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	4413      	add	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	440b      	add	r3, r1
 8004e88:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004e8c:	681b      	ldr	r3, [r3, #0]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b086      	sub	sp, #24
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	607a      	str	r2, [r7, #4]
 8004ea4:	603b      	str	r3, [r7, #0]
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eaa:	7afb      	ldrb	r3, [r7, #11]
 8004eac:	f003 020f 	and.w	r2, r3, #15
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	4413      	add	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	3338      	adds	r3, #56	; 0x38
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004eda:	7afb      	ldrb	r3, [r7, #11]
 8004edc:	f003 030f 	and.w	r3, r3, #15
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d102      	bne.n	8004ef4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ef4:	7afb      	ldrb	r3, [r7, #11]
 8004ef6:	f003 030f 	and.w	r3, r3, #15
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d109      	bne.n	8004f12 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	461a      	mov	r2, r3
 8004f0a:	6979      	ldr	r1, [r7, #20]
 8004f0c:	f002 f802 	bl	8006f14 <USB_EP0StartXfer>
 8004f10:	e008      	b.n	8004f24 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	6979      	ldr	r1, [r7, #20]
 8004f20:	f001 fdb0 	bl	8006a84 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3718      	adds	r7, #24
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b084      	sub	sp, #16
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	460b      	mov	r3, r1
 8004f38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004f3a:	78fb      	ldrb	r3, [r7, #3]
 8004f3c:	f003 020f 	and.w	r2, r3, #15
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d901      	bls.n	8004f4c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e050      	b.n	8004fee <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	da0f      	bge.n	8004f74 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f54:	78fb      	ldrb	r3, [r7, #3]
 8004f56:	f003 020f 	and.w	r2, r3, #15
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	4413      	add	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	3338      	adds	r3, #56	; 0x38
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	4413      	add	r3, r2
 8004f68:	3304      	adds	r3, #4
 8004f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	705a      	strb	r2, [r3, #1]
 8004f72:	e00d      	b.n	8004f90 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f74:	78fa      	ldrb	r2, [r7, #3]
 8004f76:	4613      	mov	r3, r2
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	4413      	add	r3, r2
 8004f86:	3304      	adds	r3, #4
 8004f88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f96:	78fb      	ldrb	r3, [r7, #3]
 8004f98:	f003 030f 	and.w	r3, r3, #15
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d101      	bne.n	8004fb0 <HAL_PCD_EP_SetStall+0x82>
 8004fac:	2302      	movs	r3, #2
 8004fae:	e01e      	b.n	8004fee <HAL_PCD_EP_SetStall+0xc0>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68f9      	ldr	r1, [r7, #12]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f002 fa40 	bl	8007444 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10a      	bne.n	8004fe4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6818      	ldr	r0, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	b2d9      	uxtb	r1, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f002 fc30 	bl	8007844 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b084      	sub	sp, #16
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	460b      	mov	r3, r1
 8005000:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005002:	78fb      	ldrb	r3, [r7, #3]
 8005004:	f003 020f 	and.w	r2, r3, #15
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	429a      	cmp	r2, r3
 800500e:	d901      	bls.n	8005014 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e042      	b.n	800509a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005014:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005018:	2b00      	cmp	r3, #0
 800501a:	da0f      	bge.n	800503c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800501c:	78fb      	ldrb	r3, [r7, #3]
 800501e:	f003 020f 	and.w	r2, r3, #15
 8005022:	4613      	mov	r3, r2
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	4413      	add	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	3338      	adds	r3, #56	; 0x38
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	4413      	add	r3, r2
 8005030:	3304      	adds	r3, #4
 8005032:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2201      	movs	r2, #1
 8005038:	705a      	strb	r2, [r3, #1]
 800503a:	e00f      	b.n	800505c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	f003 020f 	and.w	r2, r3, #15
 8005042:	4613      	mov	r3, r2
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	4413      	add	r3, r2
 8005052:	3304      	adds	r3, #4
 8005054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005062:	78fb      	ldrb	r3, [r7, #3]
 8005064:	f003 030f 	and.w	r3, r3, #15
 8005068:	b2da      	uxtb	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005074:	2b01      	cmp	r3, #1
 8005076:	d101      	bne.n	800507c <HAL_PCD_EP_ClrStall+0x86>
 8005078:	2302      	movs	r3, #2
 800507a:	e00e      	b.n	800509a <HAL_PCD_EP_ClrStall+0xa4>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68f9      	ldr	r1, [r7, #12]
 800508a:	4618      	mov	r0, r3
 800508c:	f002 fa48 	bl	8007520 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b084      	sub	sp, #16
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	460b      	mov	r3, r1
 80050ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80050ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	da0c      	bge.n	80050d0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	f003 020f 	and.w	r2, r3, #15
 80050bc:	4613      	mov	r3, r2
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	4413      	add	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	3338      	adds	r3, #56	; 0x38
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	4413      	add	r3, r2
 80050ca:	3304      	adds	r3, #4
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	e00c      	b.n	80050ea <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	f003 020f 	and.w	r2, r3, #15
 80050d6:	4613      	mov	r3, r2
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	4413      	add	r3, r2
 80050e6:	3304      	adds	r3, #4
 80050e8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68f9      	ldr	r1, [r7, #12]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f002 f867 	bl	80071c4 <USB_EPStopXfer>
 80050f6:	4603      	mov	r3, r0
 80050f8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80050fa:	7afb      	ldrb	r3, [r7, #11]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b08a      	sub	sp, #40	; 0x28
 8005108:	af02      	add	r7, sp, #8
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	4613      	mov	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	4413      	add	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	3338      	adds	r3, #56	; 0x38
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	4413      	add	r3, r2
 8005128:	3304      	adds	r3, #4
 800512a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6a1a      	ldr	r2, [r3, #32]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	429a      	cmp	r2, r3
 8005136:	d901      	bls.n	800513c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e06c      	b.n	8005216 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	699a      	ldr	r2, [r3, #24]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	429a      	cmp	r2, r3
 8005150:	d902      	bls.n	8005158 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	3303      	adds	r3, #3
 800515c:	089b      	lsrs	r3, r3, #2
 800515e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005160:	e02b      	b.n	80051ba <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	699a      	ldr	r2, [r3, #24]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	69fa      	ldr	r2, [r7, #28]
 8005174:	429a      	cmp	r2, r3
 8005176:	d902      	bls.n	800517e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	3303      	adds	r3, #3
 8005182:	089b      	lsrs	r3, r3, #2
 8005184:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6919      	ldr	r1, [r3, #16]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	b2da      	uxtb	r2, r3
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005196:	b2db      	uxtb	r3, r3
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	4603      	mov	r3, r0
 800519c:	6978      	ldr	r0, [r7, #20]
 800519e:	f002 f8bb 	bl	8007318 <USB_WritePacket>

    ep->xfer_buff  += len;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	441a      	add	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a1a      	ldr	r2, [r3, #32]
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	441a      	add	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d809      	bhi.n	80051e4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a1a      	ldr	r2, [r3, #32]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051d8:	429a      	cmp	r2, r3
 80051da:	d203      	bcs.n	80051e4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1be      	bne.n	8005162 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	699a      	ldr	r2, [r3, #24]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d811      	bhi.n	8005214 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	2201      	movs	r2, #1
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	43db      	mvns	r3, r3
 800520a:	6939      	ldr	r1, [r7, #16]
 800520c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005210:	4013      	ands	r3, r2
 8005212:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3720      	adds	r7, #32
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	333c      	adds	r3, #60	; 0x3c
 8005238:	3304      	adds	r3, #4
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d17b      	bne.n	800534e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b00      	cmp	r3, #0
 800525e:	d015      	beq.n	800528c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	4a61      	ldr	r2, [pc, #388]	; (80053e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	f240 80b9 	bls.w	80053dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 80b3 	beq.w	80053dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005282:	461a      	mov	r2, r3
 8005284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005288:	6093      	str	r3, [r2, #8]
 800528a:	e0a7      	b.n	80053dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b00      	cmp	r3, #0
 8005294:	d009      	beq.n	80052aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a2:	461a      	mov	r2, r3
 80052a4:	2320      	movs	r3, #32
 80052a6:	6093      	str	r3, [r2, #8]
 80052a8:	e098      	b.n	80053dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f040 8093 	bne.w	80053dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	4a4b      	ldr	r2, [pc, #300]	; (80053e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d90f      	bls.n	80052de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00a      	beq.n	80052de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d4:	461a      	mov	r2, r3
 80052d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052da:	6093      	str	r3, [r2, #8]
 80052dc:	e07e      	b.n	80053dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	4613      	mov	r3, r2
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	4413      	add	r3, r2
 80052f0:	3304      	adds	r3, #4
 80052f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	69da      	ldr	r2, [r3, #28]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	0159      	lsls	r1, r3, #5
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	440b      	add	r3, r1
 8005300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800530a:	1ad2      	subs	r2, r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d114      	bne.n	8005340 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d109      	bne.n	8005332 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6818      	ldr	r0, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005328:	461a      	mov	r2, r3
 800532a:	2101      	movs	r1, #1
 800532c:	f002 fa8a 	bl	8007844 <USB_EP0_OutStart>
 8005330:	e006      	b.n	8005340 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	691a      	ldr	r2, [r3, #16]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	441a      	add	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	b2db      	uxtb	r3, r3
 8005344:	4619      	mov	r1, r3
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f004 fd42 	bl	8009dd0 <HAL_PCD_DataOutStageCallback>
 800534c:	e046      	b.n	80053dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	4a26      	ldr	r2, [pc, #152]	; (80053ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d124      	bne.n	80053a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536c:	461a      	mov	r2, r3
 800536e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005372:	6093      	str	r3, [r2, #8]
 8005374:	e032      	b.n	80053dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f003 0320 	and.w	r3, r3, #32
 800537c:	2b00      	cmp	r3, #0
 800537e:	d008      	beq.n	8005392 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538c:	461a      	mov	r2, r3
 800538e:	2320      	movs	r3, #32
 8005390:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	b2db      	uxtb	r3, r3
 8005396:	4619      	mov	r1, r3
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f004 fd19 	bl	8009dd0 <HAL_PCD_DataOutStageCallback>
 800539e:	e01d      	b.n	80053dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d114      	bne.n	80053d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	4613      	mov	r3, r2
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	4413      	add	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	440b      	add	r3, r1
 80053b4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d108      	bne.n	80053d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6818      	ldr	r0, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80053c8:	461a      	mov	r2, r3
 80053ca:	2100      	movs	r1, #0
 80053cc:	f002 fa3a 	bl	8007844 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	4619      	mov	r1, r3
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f004 fcfa 	bl	8009dd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3720      	adds	r7, #32
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	4f54300a 	.word	0x4f54300a
 80053ec:	4f54310a 	.word	0x4f54310a

080053f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	333c      	adds	r3, #60	; 0x3c
 8005408:	3304      	adds	r3, #4
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4a15      	ldr	r2, [pc, #84]	; (8005478 <PCD_EP_OutSetupPacket_int+0x88>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d90e      	bls.n	8005444 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800542c:	2b00      	cmp	r3, #0
 800542e:	d009      	beq.n	8005444 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543c:	461a      	mov	r2, r3
 800543e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005442:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f004 fcb1 	bl	8009dac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4a0a      	ldr	r2, [pc, #40]	; (8005478 <PCD_EP_OutSetupPacket_int+0x88>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d90c      	bls.n	800546c <PCD_EP_OutSetupPacket_int+0x7c>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d108      	bne.n	800546c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6818      	ldr	r0, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005464:	461a      	mov	r2, r3
 8005466:	2101      	movs	r1, #1
 8005468:	f002 f9ec 	bl	8007844 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	4f54300a 	.word	0x4f54300a

0800547c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	70fb      	strb	r3, [r7, #3]
 8005488:	4613      	mov	r3, r2
 800548a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d107      	bne.n	80054aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800549a:	883b      	ldrh	r3, [r7, #0]
 800549c:	0419      	lsls	r1, r3, #16
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	629a      	str	r2, [r3, #40]	; 0x28
 80054a8:	e028      	b.n	80054fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b0:	0c1b      	lsrs	r3, r3, #16
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	4413      	add	r3, r2
 80054b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80054b8:	2300      	movs	r3, #0
 80054ba:	73fb      	strb	r3, [r7, #15]
 80054bc:	e00d      	b.n	80054da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
 80054c4:	3340      	adds	r3, #64	; 0x40
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	0c1b      	lsrs	r3, r3, #16
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	4413      	add	r3, r2
 80054d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
 80054d6:	3301      	adds	r3, #1
 80054d8:	73fb      	strb	r3, [r7, #15]
 80054da:	7bfa      	ldrb	r2, [r7, #15]
 80054dc:	78fb      	ldrb	r3, [r7, #3]
 80054de:	3b01      	subs	r3, #1
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d3ec      	bcc.n	80054be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80054e4:	883b      	ldrh	r3, [r7, #0]
 80054e6:	0418      	lsls	r0, r3, #16
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6819      	ldr	r1, [r3, #0]
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	4302      	orrs	r2, r0
 80054f4:	3340      	adds	r3, #64	; 0x40
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	440b      	add	r3, r1
 80054fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	460b      	mov	r3, r1
 8005514:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	887a      	ldrh	r2, [r7, #2]
 800551c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	460b      	mov	r3, r1
 8005536:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e267      	b.n	8005a26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d075      	beq.n	800564e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005562:	4b88      	ldr	r3, [pc, #544]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 030c 	and.w	r3, r3, #12
 800556a:	2b04      	cmp	r3, #4
 800556c:	d00c      	beq.n	8005588 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800556e:	4b85      	ldr	r3, [pc, #532]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005576:	2b08      	cmp	r3, #8
 8005578:	d112      	bne.n	80055a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800557a:	4b82      	ldr	r3, [pc, #520]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005586:	d10b      	bne.n	80055a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005588:	4b7e      	ldr	r3, [pc, #504]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d05b      	beq.n	800564c <HAL_RCC_OscConfig+0x108>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d157      	bne.n	800564c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e242      	b.n	8005a26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a8:	d106      	bne.n	80055b8 <HAL_RCC_OscConfig+0x74>
 80055aa:	4b76      	ldr	r3, [pc, #472]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a75      	ldr	r2, [pc, #468]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 80055b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	e01d      	b.n	80055f4 <HAL_RCC_OscConfig+0xb0>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055c0:	d10c      	bne.n	80055dc <HAL_RCC_OscConfig+0x98>
 80055c2:	4b70      	ldr	r3, [pc, #448]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a6f      	ldr	r2, [pc, #444]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 80055c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	4b6d      	ldr	r3, [pc, #436]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a6c      	ldr	r2, [pc, #432]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 80055d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	e00b      	b.n	80055f4 <HAL_RCC_OscConfig+0xb0>
 80055dc:	4b69      	ldr	r3, [pc, #420]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a68      	ldr	r2, [pc, #416]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 80055e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055e6:	6013      	str	r3, [r2, #0]
 80055e8:	4b66      	ldr	r3, [pc, #408]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a65      	ldr	r2, [pc, #404]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 80055ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d013      	beq.n	8005624 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055fc:	f7fc f8a8 	bl	8001750 <HAL_GetTick>
 8005600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005604:	f7fc f8a4 	bl	8001750 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b64      	cmp	r3, #100	; 0x64
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e207      	b.n	8005a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005616:	4b5b      	ldr	r3, [pc, #364]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0f0      	beq.n	8005604 <HAL_RCC_OscConfig+0xc0>
 8005622:	e014      	b.n	800564e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005624:	f7fc f894 	bl	8001750 <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800562c:	f7fc f890 	bl	8001750 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b64      	cmp	r3, #100	; 0x64
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e1f3      	b.n	8005a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800563e:	4b51      	ldr	r3, [pc, #324]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1f0      	bne.n	800562c <HAL_RCC_OscConfig+0xe8>
 800564a:	e000      	b.n	800564e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800564c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d063      	beq.n	8005722 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800565a:	4b4a      	ldr	r3, [pc, #296]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 030c 	and.w	r3, r3, #12
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00b      	beq.n	800567e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005666:	4b47      	ldr	r3, [pc, #284]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800566e:	2b08      	cmp	r3, #8
 8005670:	d11c      	bne.n	80056ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005672:	4b44      	ldr	r3, [pc, #272]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d116      	bne.n	80056ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800567e:	4b41      	ldr	r3, [pc, #260]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d005      	beq.n	8005696 <HAL_RCC_OscConfig+0x152>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d001      	beq.n	8005696 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e1c7      	b.n	8005a26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005696:	4b3b      	ldr	r3, [pc, #236]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	4937      	ldr	r1, [pc, #220]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056aa:	e03a      	b.n	8005722 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d020      	beq.n	80056f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056b4:	4b34      	ldr	r3, [pc, #208]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 80056b6:	2201      	movs	r2, #1
 80056b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ba:	f7fc f849 	bl	8001750 <HAL_GetTick>
 80056be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056c2:	f7fc f845 	bl	8001750 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e1a8      	b.n	8005a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056d4:	4b2b      	ldr	r3, [pc, #172]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0f0      	beq.n	80056c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056e0:	4b28      	ldr	r3, [pc, #160]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	00db      	lsls	r3, r3, #3
 80056ee:	4925      	ldr	r1, [pc, #148]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	600b      	str	r3, [r1, #0]
 80056f4:	e015      	b.n	8005722 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056f6:	4b24      	ldr	r3, [pc, #144]	; (8005788 <HAL_RCC_OscConfig+0x244>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fc:	f7fc f828 	bl	8001750 <HAL_GetTick>
 8005700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005702:	e008      	b.n	8005716 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005704:	f7fc f824 	bl	8001750 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e187      	b.n	8005a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005716:	4b1b      	ldr	r3, [pc, #108]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1f0      	bne.n	8005704 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d036      	beq.n	800579c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d016      	beq.n	8005764 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005736:	4b15      	ldr	r3, [pc, #84]	; (800578c <HAL_RCC_OscConfig+0x248>)
 8005738:	2201      	movs	r2, #1
 800573a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800573c:	f7fc f808 	bl	8001750 <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005742:	e008      	b.n	8005756 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005744:	f7fc f804 	bl	8001750 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e167      	b.n	8005a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005756:	4b0b      	ldr	r3, [pc, #44]	; (8005784 <HAL_RCC_OscConfig+0x240>)
 8005758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0f0      	beq.n	8005744 <HAL_RCC_OscConfig+0x200>
 8005762:	e01b      	b.n	800579c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005764:	4b09      	ldr	r3, [pc, #36]	; (800578c <HAL_RCC_OscConfig+0x248>)
 8005766:	2200      	movs	r2, #0
 8005768:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800576a:	f7fb fff1 	bl	8001750 <HAL_GetTick>
 800576e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005770:	e00e      	b.n	8005790 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005772:	f7fb ffed 	bl	8001750 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d907      	bls.n	8005790 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e150      	b.n	8005a26 <HAL_RCC_OscConfig+0x4e2>
 8005784:	40023800 	.word	0x40023800
 8005788:	42470000 	.word	0x42470000
 800578c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005790:	4b88      	ldr	r3, [pc, #544]	; (80059b4 <HAL_RCC_OscConfig+0x470>)
 8005792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1ea      	bne.n	8005772 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 8097 	beq.w	80058d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057aa:	2300      	movs	r3, #0
 80057ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057ae:	4b81      	ldr	r3, [pc, #516]	; (80059b4 <HAL_RCC_OscConfig+0x470>)
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10f      	bne.n	80057da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ba:	2300      	movs	r3, #0
 80057bc:	60bb      	str	r3, [r7, #8]
 80057be:	4b7d      	ldr	r3, [pc, #500]	; (80059b4 <HAL_RCC_OscConfig+0x470>)
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	4a7c      	ldr	r2, [pc, #496]	; (80059b4 <HAL_RCC_OscConfig+0x470>)
 80057c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c8:	6413      	str	r3, [r2, #64]	; 0x40
 80057ca:	4b7a      	ldr	r3, [pc, #488]	; (80059b4 <HAL_RCC_OscConfig+0x470>)
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057d2:	60bb      	str	r3, [r7, #8]
 80057d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057d6:	2301      	movs	r3, #1
 80057d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057da:	4b77      	ldr	r3, [pc, #476]	; (80059b8 <HAL_RCC_OscConfig+0x474>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d118      	bne.n	8005818 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057e6:	4b74      	ldr	r3, [pc, #464]	; (80059b8 <HAL_RCC_OscConfig+0x474>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a73      	ldr	r2, [pc, #460]	; (80059b8 <HAL_RCC_OscConfig+0x474>)
 80057ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057f2:	f7fb ffad 	bl	8001750 <HAL_GetTick>
 80057f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f8:	e008      	b.n	800580c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057fa:	f7fb ffa9 	bl	8001750 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d901      	bls.n	800580c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e10c      	b.n	8005a26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800580c:	4b6a      	ldr	r3, [pc, #424]	; (80059b8 <HAL_RCC_OscConfig+0x474>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005814:	2b00      	cmp	r3, #0
 8005816:	d0f0      	beq.n	80057fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d106      	bne.n	800582e <HAL_RCC_OscConfig+0x2ea>
 8005820:	4b64      	ldr	r3, [pc, #400]	; (80059b4 <HAL_RCC_OscConfig+0x470>)
 8005822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005824:	4a63      	ldr	r2, [pc, #396]	; (80059b4 <HAL_RCC_OscConfig+0x470>)
 8005826:	f043 0301 	orr.w	r3, r3, #1
 800582a:	6713      	str	r3, [r2, #112]	; 0x70
 800582c:	e01c      	b.n	8005868 <HAL_RCC_OscConfig+0x324>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	2b05      	cmp	r3, #5
 8005834:	d10c      	bne.n	8005850 <HAL_RCC_OscConfig+0x30c>
 8005836:	4b5f      	ldr	r3, [pc, #380]	; (80059b4 <HAL_RCC_OscConfig+0x470>)
 8005838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583a:	4a5e      	ldr	r2, [pc, #376]	; (80059b4 <HAL_RCC_OscConfig+0x470>)
 800583c:	f043 0304 	orr.w	r3, r3, #4
 8005840:	6713      	str	r3, [r2, #112]	; 0x70
 8005842:	4b5c      	ldr	r3, [pc, #368]	; (80059b4 <HAL_RCC_OscConfig+0x470>)
 8005844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005846:	4a5b      	ldr	r2, [pc, #364]	; (80059b4 <HAL_RCC_OscConfig+0x470>)
 8005848:	f043 0301 	orr.w	r3, r3, #1
 800584c:	6713      	str	r3, [r2, #112]	; 0x70
 800584e:	e00b      	b.n	8005868 <HAL_RCC_OscConfig+0x324>
 8005850:	4b58      	ldr	r3, [pc, #352]	; (80059b4 <HAL_RCC_OscConfig+0x470>)
 8005852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005854:	4a57      	ldr	r2, [pc, #348]	; (80059b4 <HAL_RCC_OscConfig+0x470>)
 8005856:	f023 0301 	bic.w	r3, r3, #1
 800585a:	6713      	str	r3, [r2, #112]	; 0x70
 800585c:	4b55      	ldr	r3, [pc, #340]	; (80059b4 <HAL_RCC_OscConfig+0x470>)
 800585e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005860:	4a54      	ldr	r2, [pc, #336]	; (80059b4 <HAL_RCC_OscConfig+0x470>)
 8005862:	f023 0304 	bic.w	r3, r3, #4
 8005866:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d015      	beq.n	800589c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005870:	f7fb ff6e 	bl	8001750 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005876:	e00a      	b.n	800588e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005878:	f7fb ff6a 	bl	8001750 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	f241 3288 	movw	r2, #5000	; 0x1388
 8005886:	4293      	cmp	r3, r2
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e0cb      	b.n	8005a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800588e:	4b49      	ldr	r3, [pc, #292]	; (80059b4 <HAL_RCC_OscConfig+0x470>)
 8005890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0ee      	beq.n	8005878 <HAL_RCC_OscConfig+0x334>
 800589a:	e014      	b.n	80058c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800589c:	f7fb ff58 	bl	8001750 <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058a2:	e00a      	b.n	80058ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058a4:	f7fb ff54 	bl	8001750 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e0b5      	b.n	8005a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058ba:	4b3e      	ldr	r3, [pc, #248]	; (80059b4 <HAL_RCC_OscConfig+0x470>)
 80058bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1ee      	bne.n	80058a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058c6:	7dfb      	ldrb	r3, [r7, #23]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d105      	bne.n	80058d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058cc:	4b39      	ldr	r3, [pc, #228]	; (80059b4 <HAL_RCC_OscConfig+0x470>)
 80058ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d0:	4a38      	ldr	r2, [pc, #224]	; (80059b4 <HAL_RCC_OscConfig+0x470>)
 80058d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 80a1 	beq.w	8005a24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058e2:	4b34      	ldr	r3, [pc, #208]	; (80059b4 <HAL_RCC_OscConfig+0x470>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 030c 	and.w	r3, r3, #12
 80058ea:	2b08      	cmp	r3, #8
 80058ec:	d05c      	beq.n	80059a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d141      	bne.n	800597a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f6:	4b31      	ldr	r3, [pc, #196]	; (80059bc <HAL_RCC_OscConfig+0x478>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058fc:	f7fb ff28 	bl	8001750 <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005904:	f7fb ff24 	bl	8001750 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e087      	b.n	8005a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005916:	4b27      	ldr	r3, [pc, #156]	; (80059b4 <HAL_RCC_OscConfig+0x470>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f0      	bne.n	8005904 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69da      	ldr	r2, [r3, #28]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	019b      	lsls	r3, r3, #6
 8005932:	431a      	orrs	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005938:	085b      	lsrs	r3, r3, #1
 800593a:	3b01      	subs	r3, #1
 800593c:	041b      	lsls	r3, r3, #16
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	061b      	lsls	r3, r3, #24
 8005946:	491b      	ldr	r1, [pc, #108]	; (80059b4 <HAL_RCC_OscConfig+0x470>)
 8005948:	4313      	orrs	r3, r2
 800594a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800594c:	4b1b      	ldr	r3, [pc, #108]	; (80059bc <HAL_RCC_OscConfig+0x478>)
 800594e:	2201      	movs	r2, #1
 8005950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005952:	f7fb fefd 	bl	8001750 <HAL_GetTick>
 8005956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005958:	e008      	b.n	800596c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800595a:	f7fb fef9 	bl	8001750 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d901      	bls.n	800596c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e05c      	b.n	8005a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800596c:	4b11      	ldr	r3, [pc, #68]	; (80059b4 <HAL_RCC_OscConfig+0x470>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d0f0      	beq.n	800595a <HAL_RCC_OscConfig+0x416>
 8005978:	e054      	b.n	8005a24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800597a:	4b10      	ldr	r3, [pc, #64]	; (80059bc <HAL_RCC_OscConfig+0x478>)
 800597c:	2200      	movs	r2, #0
 800597e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005980:	f7fb fee6 	bl	8001750 <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005988:	f7fb fee2 	bl	8001750 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e045      	b.n	8005a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800599a:	4b06      	ldr	r3, [pc, #24]	; (80059b4 <HAL_RCC_OscConfig+0x470>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1f0      	bne.n	8005988 <HAL_RCC_OscConfig+0x444>
 80059a6:	e03d      	b.n	8005a24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d107      	bne.n	80059c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e038      	b.n	8005a26 <HAL_RCC_OscConfig+0x4e2>
 80059b4:	40023800 	.word	0x40023800
 80059b8:	40007000 	.word	0x40007000
 80059bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059c0:	4b1b      	ldr	r3, [pc, #108]	; (8005a30 <HAL_RCC_OscConfig+0x4ec>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d028      	beq.n	8005a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059d8:	429a      	cmp	r2, r3
 80059da:	d121      	bne.n	8005a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d11a      	bne.n	8005a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059f0:	4013      	ands	r3, r2
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d111      	bne.n	8005a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a06:	085b      	lsrs	r3, r3, #1
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d107      	bne.n	8005a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d001      	beq.n	8005a24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e000      	b.n	8005a26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	40023800 	.word	0x40023800

08005a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e0cc      	b.n	8005be2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a48:	4b68      	ldr	r3, [pc, #416]	; (8005bec <HAL_RCC_ClockConfig+0x1b8>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d90c      	bls.n	8005a70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a56:	4b65      	ldr	r3, [pc, #404]	; (8005bec <HAL_RCC_ClockConfig+0x1b8>)
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a5e:	4b63      	ldr	r3, [pc, #396]	; (8005bec <HAL_RCC_ClockConfig+0x1b8>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0307 	and.w	r3, r3, #7
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d001      	beq.n	8005a70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e0b8      	b.n	8005be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d020      	beq.n	8005abe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d005      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a88:	4b59      	ldr	r3, [pc, #356]	; (8005bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	4a58      	ldr	r2, [pc, #352]	; (8005bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0308 	and.w	r3, r3, #8
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d005      	beq.n	8005aac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005aa0:	4b53      	ldr	r3, [pc, #332]	; (8005bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	4a52      	ldr	r2, [pc, #328]	; (8005bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005aaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aac:	4b50      	ldr	r3, [pc, #320]	; (8005bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	494d      	ldr	r1, [pc, #308]	; (8005bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d044      	beq.n	8005b54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d107      	bne.n	8005ae2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ad2:	4b47      	ldr	r3, [pc, #284]	; (8005bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d119      	bne.n	8005b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e07f      	b.n	8005be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d003      	beq.n	8005af2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	d107      	bne.n	8005b02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005af2:	4b3f      	ldr	r3, [pc, #252]	; (8005bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d109      	bne.n	8005b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e06f      	b.n	8005be2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b02:	4b3b      	ldr	r3, [pc, #236]	; (8005bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e067      	b.n	8005be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b12:	4b37      	ldr	r3, [pc, #220]	; (8005bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f023 0203 	bic.w	r2, r3, #3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	4934      	ldr	r1, [pc, #208]	; (8005bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b24:	f7fb fe14 	bl	8001750 <HAL_GetTick>
 8005b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b2a:	e00a      	b.n	8005b42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b2c:	f7fb fe10 	bl	8001750 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e04f      	b.n	8005be2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b42:	4b2b      	ldr	r3, [pc, #172]	; (8005bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f003 020c 	and.w	r2, r3, #12
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d1eb      	bne.n	8005b2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b54:	4b25      	ldr	r3, [pc, #148]	; (8005bec <HAL_RCC_ClockConfig+0x1b8>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d20c      	bcs.n	8005b7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b62:	4b22      	ldr	r3, [pc, #136]	; (8005bec <HAL_RCC_ClockConfig+0x1b8>)
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b6a:	4b20      	ldr	r3, [pc, #128]	; (8005bec <HAL_RCC_ClockConfig+0x1b8>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d001      	beq.n	8005b7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e032      	b.n	8005be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0304 	and.w	r3, r3, #4
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d008      	beq.n	8005b9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b88:	4b19      	ldr	r3, [pc, #100]	; (8005bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	4916      	ldr	r1, [pc, #88]	; (8005bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0308 	and.w	r3, r3, #8
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d009      	beq.n	8005bba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ba6:	4b12      	ldr	r3, [pc, #72]	; (8005bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	490e      	ldr	r1, [pc, #56]	; (8005bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bba:	f000 f821 	bl	8005c00 <HAL_RCC_GetSysClockFreq>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	4b0b      	ldr	r3, [pc, #44]	; (8005bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	091b      	lsrs	r3, r3, #4
 8005bc6:	f003 030f 	and.w	r3, r3, #15
 8005bca:	490a      	ldr	r1, [pc, #40]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8005bcc:	5ccb      	ldrb	r3, [r1, r3]
 8005bce:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd2:	4a09      	ldr	r2, [pc, #36]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005bd6:	4b09      	ldr	r3, [pc, #36]	; (8005bfc <HAL_RCC_ClockConfig+0x1c8>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fb fd74 	bl	80016c8 <HAL_InitTick>

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	40023c00 	.word	0x40023c00
 8005bf0:	40023800 	.word	0x40023800
 8005bf4:	0800a3e4 	.word	0x0800a3e4
 8005bf8:	20000000 	.word	0x20000000
 8005bfc:	20000004 	.word	0x20000004

08005c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c04:	b094      	sub	sp, #80	; 0x50
 8005c06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c10:	2300      	movs	r3, #0
 8005c12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c18:	4b79      	ldr	r3, [pc, #484]	; (8005e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f003 030c 	and.w	r3, r3, #12
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d00d      	beq.n	8005c40 <HAL_RCC_GetSysClockFreq+0x40>
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	f200 80e1 	bhi.w	8005dec <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d002      	beq.n	8005c34 <HAL_RCC_GetSysClockFreq+0x34>
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d003      	beq.n	8005c3a <HAL_RCC_GetSysClockFreq+0x3a>
 8005c32:	e0db      	b.n	8005dec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c34:	4b73      	ldr	r3, [pc, #460]	; (8005e04 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005c38:	e0db      	b.n	8005df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c3a:	4b73      	ldr	r3, [pc, #460]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x208>)
 8005c3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c3e:	e0d8      	b.n	8005df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c40:	4b6f      	ldr	r3, [pc, #444]	; (8005e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c4a:	4b6d      	ldr	r3, [pc, #436]	; (8005e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d063      	beq.n	8005d1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c56:	4b6a      	ldr	r3, [pc, #424]	; (8005e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	099b      	lsrs	r3, r3, #6
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c68:	633b      	str	r3, [r7, #48]	; 0x30
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005c72:	4622      	mov	r2, r4
 8005c74:	462b      	mov	r3, r5
 8005c76:	f04f 0000 	mov.w	r0, #0
 8005c7a:	f04f 0100 	mov.w	r1, #0
 8005c7e:	0159      	lsls	r1, r3, #5
 8005c80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c84:	0150      	lsls	r0, r2, #5
 8005c86:	4602      	mov	r2, r0
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4621      	mov	r1, r4
 8005c8c:	1a51      	subs	r1, r2, r1
 8005c8e:	6139      	str	r1, [r7, #16]
 8005c90:	4629      	mov	r1, r5
 8005c92:	eb63 0301 	sbc.w	r3, r3, r1
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	f04f 0300 	mov.w	r3, #0
 8005ca0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ca4:	4659      	mov	r1, fp
 8005ca6:	018b      	lsls	r3, r1, #6
 8005ca8:	4651      	mov	r1, sl
 8005caa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005cae:	4651      	mov	r1, sl
 8005cb0:	018a      	lsls	r2, r1, #6
 8005cb2:	4651      	mov	r1, sl
 8005cb4:	ebb2 0801 	subs.w	r8, r2, r1
 8005cb8:	4659      	mov	r1, fp
 8005cba:	eb63 0901 	sbc.w	r9, r3, r1
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	f04f 0300 	mov.w	r3, #0
 8005cc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cd2:	4690      	mov	r8, r2
 8005cd4:	4699      	mov	r9, r3
 8005cd6:	4623      	mov	r3, r4
 8005cd8:	eb18 0303 	adds.w	r3, r8, r3
 8005cdc:	60bb      	str	r3, [r7, #8]
 8005cde:	462b      	mov	r3, r5
 8005ce0:	eb49 0303 	adc.w	r3, r9, r3
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	f04f 0200 	mov.w	r2, #0
 8005cea:	f04f 0300 	mov.w	r3, #0
 8005cee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	024b      	lsls	r3, r1, #9
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	024a      	lsls	r2, r1, #9
 8005d00:	4610      	mov	r0, r2
 8005d02:	4619      	mov	r1, r3
 8005d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d06:	2200      	movs	r2, #0
 8005d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d10:	f7fa fa62 	bl	80001d8 <__aeabi_uldivmod>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4613      	mov	r3, r2
 8005d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d1c:	e058      	b.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d1e:	4b38      	ldr	r3, [pc, #224]	; (8005e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	099b      	lsrs	r3, r3, #6
 8005d24:	2200      	movs	r2, #0
 8005d26:	4618      	mov	r0, r3
 8005d28:	4611      	mov	r1, r2
 8005d2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d2e:	623b      	str	r3, [r7, #32]
 8005d30:	2300      	movs	r3, #0
 8005d32:	627b      	str	r3, [r7, #36]	; 0x24
 8005d34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005d38:	4642      	mov	r2, r8
 8005d3a:	464b      	mov	r3, r9
 8005d3c:	f04f 0000 	mov.w	r0, #0
 8005d40:	f04f 0100 	mov.w	r1, #0
 8005d44:	0159      	lsls	r1, r3, #5
 8005d46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d4a:	0150      	lsls	r0, r2, #5
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	460b      	mov	r3, r1
 8005d50:	4641      	mov	r1, r8
 8005d52:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d56:	4649      	mov	r1, r9
 8005d58:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d5c:	f04f 0200 	mov.w	r2, #0
 8005d60:	f04f 0300 	mov.w	r3, #0
 8005d64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d70:	ebb2 040a 	subs.w	r4, r2, sl
 8005d74:	eb63 050b 	sbc.w	r5, r3, fp
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	f04f 0300 	mov.w	r3, #0
 8005d80:	00eb      	lsls	r3, r5, #3
 8005d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d86:	00e2      	lsls	r2, r4, #3
 8005d88:	4614      	mov	r4, r2
 8005d8a:	461d      	mov	r5, r3
 8005d8c:	4643      	mov	r3, r8
 8005d8e:	18e3      	adds	r3, r4, r3
 8005d90:	603b      	str	r3, [r7, #0]
 8005d92:	464b      	mov	r3, r9
 8005d94:	eb45 0303 	adc.w	r3, r5, r3
 8005d98:	607b      	str	r3, [r7, #4]
 8005d9a:	f04f 0200 	mov.w	r2, #0
 8005d9e:	f04f 0300 	mov.w	r3, #0
 8005da2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005da6:	4629      	mov	r1, r5
 8005da8:	028b      	lsls	r3, r1, #10
 8005daa:	4621      	mov	r1, r4
 8005dac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005db0:	4621      	mov	r1, r4
 8005db2:	028a      	lsls	r2, r1, #10
 8005db4:	4610      	mov	r0, r2
 8005db6:	4619      	mov	r1, r3
 8005db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dba:	2200      	movs	r2, #0
 8005dbc:	61bb      	str	r3, [r7, #24]
 8005dbe:	61fa      	str	r2, [r7, #28]
 8005dc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dc4:	f7fa fa08 	bl	80001d8 <__aeabi_uldivmod>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	460b      	mov	r3, r1
 8005dcc:	4613      	mov	r3, r2
 8005dce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	0c1b      	lsrs	r3, r3, #16
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	3301      	adds	r3, #1
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005de0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005dea:	e002      	b.n	8005df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005dec:	4b05      	ldr	r3, [pc, #20]	; (8005e04 <HAL_RCC_GetSysClockFreq+0x204>)
 8005dee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3750      	adds	r7, #80	; 0x50
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dfe:	bf00      	nop
 8005e00:	40023800 	.word	0x40023800
 8005e04:	00f42400 	.word	0x00f42400
 8005e08:	007a1200 	.word	0x007a1200

08005e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e10:	4b03      	ldr	r3, [pc, #12]	; (8005e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e12:	681b      	ldr	r3, [r3, #0]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	20000000 	.word	0x20000000

08005e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e28:	f7ff fff0 	bl	8005e0c <HAL_RCC_GetHCLKFreq>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	4b05      	ldr	r3, [pc, #20]	; (8005e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	0a9b      	lsrs	r3, r3, #10
 8005e34:	f003 0307 	and.w	r3, r3, #7
 8005e38:	4903      	ldr	r1, [pc, #12]	; (8005e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e3a:	5ccb      	ldrb	r3, [r1, r3]
 8005e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	40023800 	.word	0x40023800
 8005e48:	0800a3f4 	.word	0x0800a3f4

08005e4c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d105      	bne.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d035      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e74:	4b62      	ldr	r3, [pc, #392]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e7a:	f7fb fc69 	bl	8001750 <HAL_GetTick>
 8005e7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e80:	e008      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e82:	f7fb fc65 	bl	8001750 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d901      	bls.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e0b0      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e94:	4b5b      	ldr	r3, [pc, #364]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1f0      	bne.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	019a      	lsls	r2, r3, #6
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	071b      	lsls	r3, r3, #28
 8005eac:	4955      	ldr	r1, [pc, #340]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005eb4:	4b52      	ldr	r3, [pc, #328]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005eba:	f7fb fc49 	bl	8001750 <HAL_GetTick>
 8005ebe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ec0:	e008      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005ec2:	f7fb fc45 	bl	8001750 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e090      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ed4:	4b4b      	ldr	r3, [pc, #300]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0f0      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 8083 	beq.w	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60fb      	str	r3, [r7, #12]
 8005ef2:	4b44      	ldr	r3, [pc, #272]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	4a43      	ldr	r2, [pc, #268]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efc:	6413      	str	r3, [r2, #64]	; 0x40
 8005efe:	4b41      	ldr	r3, [pc, #260]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005f0a:	4b3f      	ldr	r3, [pc, #252]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a3e      	ldr	r2, [pc, #248]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f14:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f16:	f7fb fc1b 	bl	8001750 <HAL_GetTick>
 8005f1a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005f1c:	e008      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005f1e:	f7fb fc17 	bl	8001750 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d901      	bls.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e062      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005f30:	4b35      	ldr	r3, [pc, #212]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0f0      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f3c:	4b31      	ldr	r3, [pc, #196]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f44:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d02f      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d028      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f5a:	4b2a      	ldr	r3, [pc, #168]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f62:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f64:	4b29      	ldr	r3, [pc, #164]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005f66:	2201      	movs	r2, #1
 8005f68:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f6a:	4b28      	ldr	r3, [pc, #160]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005f70:	4a24      	ldr	r2, [pc, #144]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f76:	4b23      	ldr	r3, [pc, #140]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d114      	bne.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005f82:	f7fb fbe5 	bl	8001750 <HAL_GetTick>
 8005f86:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f88:	e00a      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f8a:	f7fb fbe1 	bl	8001750 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d901      	bls.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e02a      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fa0:	4b18      	ldr	r3, [pc, #96]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d0ee      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fb8:	d10d      	bne.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005fba:	4b12      	ldr	r3, [pc, #72]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fce:	490d      	ldr	r1, [pc, #52]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	608b      	str	r3, [r1, #8]
 8005fd4:	e005      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005fd6:	4b0b      	ldr	r3, [pc, #44]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	4a0a      	ldr	r2, [pc, #40]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fdc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005fe0:	6093      	str	r3, [r2, #8]
 8005fe2:	4b08      	ldr	r3, [pc, #32]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fe4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fee:	4905      	ldr	r1, [pc, #20]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	42470068 	.word	0x42470068
 8006004:	40023800 	.word	0x40023800
 8006008:	40007000 	.word	0x40007000
 800600c:	42470e40 	.word	0x42470e40

08006010 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006018:	2300      	movs	r3, #0
 800601a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006024:	2300      	movs	r3, #0
 8006026:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d13e      	bne.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800602e:	4b23      	ldr	r3, [pc, #140]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d005      	beq.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d12f      	bne.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006044:	4b1e      	ldr	r3, [pc, #120]	; (80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006046:	617b      	str	r3, [r7, #20]
          break;
 8006048:	e02f      	b.n	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800604a:	4b1c      	ldr	r3, [pc, #112]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006052:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006056:	d108      	bne.n	800606a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006058:	4b18      	ldr	r3, [pc, #96]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006060:	4a18      	ldr	r2, [pc, #96]	; (80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006062:	fbb2 f3f3 	udiv	r3, r2, r3
 8006066:	613b      	str	r3, [r7, #16]
 8006068:	e007      	b.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800606a:	4b14      	ldr	r3, [pc, #80]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006072:	4a15      	ldr	r2, [pc, #84]	; (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006074:	fbb2 f3f3 	udiv	r3, r2, r3
 8006078:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800607a:	4b10      	ldr	r3, [pc, #64]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800607c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006080:	099b      	lsrs	r3, r3, #6
 8006082:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	fb02 f303 	mul.w	r3, r2, r3
 800608c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800608e:	4b0b      	ldr	r3, [pc, #44]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006094:	0f1b      	lsrs	r3, r3, #28
 8006096:	f003 0307 	and.w	r3, r3, #7
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a0:	617b      	str	r3, [r7, #20]
          break;
 80060a2:	e002      	b.n	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	617b      	str	r3, [r7, #20]
          break;
 80060a8:	bf00      	nop
        }
      }
      break;
 80060aa:	bf00      	nop
    }
  }
  return frequency;
 80060ac:	697b      	ldr	r3, [r7, #20]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	371c      	adds	r7, #28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40023800 	.word	0x40023800
 80060c0:	00bb8000 	.word	0x00bb8000
 80060c4:	007a1200 	.word	0x007a1200
 80060c8:	00f42400 	.word	0x00f42400

080060cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060cc:	b084      	sub	sp, #16
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	f107 001c 	add.w	r0, r7, #28
 80060da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d122      	bne.n	800612a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80060f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800610c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800610e:	2b01      	cmp	r3, #1
 8006110:	d105      	bne.n	800611e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f001 fbee 	bl	8007900 <USB_CoreReset>
 8006124:	4603      	mov	r3, r0
 8006126:	73fb      	strb	r3, [r7, #15]
 8006128:	e01a      	b.n	8006160 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f001 fbe2 	bl	8007900 <USB_CoreReset>
 800613c:	4603      	mov	r3, r0
 800613e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006142:	2b00      	cmp	r3, #0
 8006144:	d106      	bne.n	8006154 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	639a      	str	r2, [r3, #56]	; 0x38
 8006152:	e005      	b.n	8006160 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006158:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006162:	2b01      	cmp	r3, #1
 8006164:	d10b      	bne.n	800617e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f043 0206 	orr.w	r2, r3, #6
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f043 0220 	orr.w	r2, r3, #32
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800617e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800618a:	b004      	add	sp, #16
 800618c:	4770      	bx	lr
	...

08006190 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	4613      	mov	r3, r2
 800619c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800619e:	79fb      	ldrb	r3, [r7, #7]
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d165      	bne.n	8006270 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	4a41      	ldr	r2, [pc, #260]	; (80062ac <USB_SetTurnaroundTime+0x11c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d906      	bls.n	80061ba <USB_SetTurnaroundTime+0x2a>
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	4a40      	ldr	r2, [pc, #256]	; (80062b0 <USB_SetTurnaroundTime+0x120>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d202      	bcs.n	80061ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80061b4:	230f      	movs	r3, #15
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	e062      	b.n	8006280 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	4a3c      	ldr	r2, [pc, #240]	; (80062b0 <USB_SetTurnaroundTime+0x120>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d306      	bcc.n	80061d0 <USB_SetTurnaroundTime+0x40>
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	4a3b      	ldr	r2, [pc, #236]	; (80062b4 <USB_SetTurnaroundTime+0x124>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d202      	bcs.n	80061d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80061ca:	230e      	movs	r3, #14
 80061cc:	617b      	str	r3, [r7, #20]
 80061ce:	e057      	b.n	8006280 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	4a38      	ldr	r2, [pc, #224]	; (80062b4 <USB_SetTurnaroundTime+0x124>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d306      	bcc.n	80061e6 <USB_SetTurnaroundTime+0x56>
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	4a37      	ldr	r2, [pc, #220]	; (80062b8 <USB_SetTurnaroundTime+0x128>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d202      	bcs.n	80061e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80061e0:	230d      	movs	r3, #13
 80061e2:	617b      	str	r3, [r7, #20]
 80061e4:	e04c      	b.n	8006280 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	4a33      	ldr	r2, [pc, #204]	; (80062b8 <USB_SetTurnaroundTime+0x128>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d306      	bcc.n	80061fc <USB_SetTurnaroundTime+0x6c>
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	4a32      	ldr	r2, [pc, #200]	; (80062bc <USB_SetTurnaroundTime+0x12c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d802      	bhi.n	80061fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80061f6:	230c      	movs	r3, #12
 80061f8:	617b      	str	r3, [r7, #20]
 80061fa:	e041      	b.n	8006280 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4a2f      	ldr	r2, [pc, #188]	; (80062bc <USB_SetTurnaroundTime+0x12c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d906      	bls.n	8006212 <USB_SetTurnaroundTime+0x82>
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	4a2e      	ldr	r2, [pc, #184]	; (80062c0 <USB_SetTurnaroundTime+0x130>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d802      	bhi.n	8006212 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800620c:	230b      	movs	r3, #11
 800620e:	617b      	str	r3, [r7, #20]
 8006210:	e036      	b.n	8006280 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	4a2a      	ldr	r2, [pc, #168]	; (80062c0 <USB_SetTurnaroundTime+0x130>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d906      	bls.n	8006228 <USB_SetTurnaroundTime+0x98>
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	4a29      	ldr	r2, [pc, #164]	; (80062c4 <USB_SetTurnaroundTime+0x134>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d802      	bhi.n	8006228 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006222:	230a      	movs	r3, #10
 8006224:	617b      	str	r3, [r7, #20]
 8006226:	e02b      	b.n	8006280 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	4a26      	ldr	r2, [pc, #152]	; (80062c4 <USB_SetTurnaroundTime+0x134>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d906      	bls.n	800623e <USB_SetTurnaroundTime+0xae>
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	4a25      	ldr	r2, [pc, #148]	; (80062c8 <USB_SetTurnaroundTime+0x138>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d202      	bcs.n	800623e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006238:	2309      	movs	r3, #9
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	e020      	b.n	8006280 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	4a21      	ldr	r2, [pc, #132]	; (80062c8 <USB_SetTurnaroundTime+0x138>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d306      	bcc.n	8006254 <USB_SetTurnaroundTime+0xc4>
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	4a20      	ldr	r2, [pc, #128]	; (80062cc <USB_SetTurnaroundTime+0x13c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d802      	bhi.n	8006254 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800624e:	2308      	movs	r3, #8
 8006250:	617b      	str	r3, [r7, #20]
 8006252:	e015      	b.n	8006280 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	4a1d      	ldr	r2, [pc, #116]	; (80062cc <USB_SetTurnaroundTime+0x13c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d906      	bls.n	800626a <USB_SetTurnaroundTime+0xda>
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	4a1c      	ldr	r2, [pc, #112]	; (80062d0 <USB_SetTurnaroundTime+0x140>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d202      	bcs.n	800626a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006264:	2307      	movs	r3, #7
 8006266:	617b      	str	r3, [r7, #20]
 8006268:	e00a      	b.n	8006280 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800626a:	2306      	movs	r3, #6
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	e007      	b.n	8006280 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006270:	79fb      	ldrb	r3, [r7, #7]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d102      	bne.n	800627c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006276:	2309      	movs	r3, #9
 8006278:	617b      	str	r3, [r7, #20]
 800627a:	e001      	b.n	8006280 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800627c:	2309      	movs	r3, #9
 800627e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	68da      	ldr	r2, [r3, #12]
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	029b      	lsls	r3, r3, #10
 8006294:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006298:	431a      	orrs	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	371c      	adds	r7, #28
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr
 80062ac:	00d8acbf 	.word	0x00d8acbf
 80062b0:	00e4e1c0 	.word	0x00e4e1c0
 80062b4:	00f42400 	.word	0x00f42400
 80062b8:	01067380 	.word	0x01067380
 80062bc:	011a499f 	.word	0x011a499f
 80062c0:	01312cff 	.word	0x01312cff
 80062c4:	014ca43f 	.word	0x014ca43f
 80062c8:	016e3600 	.word	0x016e3600
 80062cc:	01a6ab1f 	.word	0x01a6ab1f
 80062d0:	01e84800 	.word	0x01e84800

080062d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f043 0201 	orr.w	r2, r3, #1
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f023 0201 	bic.w	r2, r3, #1
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	460b      	mov	r3, r1
 8006322:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006334:	78fb      	ldrb	r3, [r7, #3]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d115      	bne.n	8006366 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006346:	2001      	movs	r0, #1
 8006348:	f7fb fa0e 	bl	8001768 <HAL_Delay>
      ms++;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	3301      	adds	r3, #1
 8006350:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f001 fa45 	bl	80077e2 <USB_GetMode>
 8006358:	4603      	mov	r3, r0
 800635a:	2b01      	cmp	r3, #1
 800635c:	d01e      	beq.n	800639c <USB_SetCurrentMode+0x84>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2b31      	cmp	r3, #49	; 0x31
 8006362:	d9f0      	bls.n	8006346 <USB_SetCurrentMode+0x2e>
 8006364:	e01a      	b.n	800639c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006366:	78fb      	ldrb	r3, [r7, #3]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d115      	bne.n	8006398 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006378:	2001      	movs	r0, #1
 800637a:	f7fb f9f5 	bl	8001768 <HAL_Delay>
      ms++;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3301      	adds	r3, #1
 8006382:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f001 fa2c 	bl	80077e2 <USB_GetMode>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d005      	beq.n	800639c <USB_SetCurrentMode+0x84>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2b31      	cmp	r3, #49	; 0x31
 8006394:	d9f0      	bls.n	8006378 <USB_SetCurrentMode+0x60>
 8006396:	e001      	b.n	800639c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e005      	b.n	80063a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b32      	cmp	r3, #50	; 0x32
 80063a0:	d101      	bne.n	80063a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e000      	b.n	80063a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063b0:	b084      	sub	sp, #16
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b086      	sub	sp, #24
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80063be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063ca:	2300      	movs	r3, #0
 80063cc:	613b      	str	r3, [r7, #16]
 80063ce:	e009      	b.n	80063e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	3340      	adds	r3, #64	; 0x40
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	2200      	movs	r2, #0
 80063dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	3301      	adds	r3, #1
 80063e2:	613b      	str	r3, [r7, #16]
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	2b0e      	cmp	r3, #14
 80063e8:	d9f2      	bls.n	80063d0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d11c      	bne.n	800642a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063fe:	f043 0302 	orr.w	r3, r3, #2
 8006402:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006408:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006420:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	639a      	str	r2, [r3, #56]	; 0x38
 8006428:	e00b      	b.n	8006442 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006448:	461a      	mov	r2, r3
 800644a:	2300      	movs	r3, #0
 800644c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006454:	4619      	mov	r1, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800645c:	461a      	mov	r2, r3
 800645e:	680b      	ldr	r3, [r1, #0]
 8006460:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006464:	2b01      	cmp	r3, #1
 8006466:	d10c      	bne.n	8006482 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646a:	2b00      	cmp	r3, #0
 800646c:	d104      	bne.n	8006478 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800646e:	2100      	movs	r1, #0
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f965 	bl	8006740 <USB_SetDevSpeed>
 8006476:	e008      	b.n	800648a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006478:	2101      	movs	r1, #1
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f960 	bl	8006740 <USB_SetDevSpeed>
 8006480:	e003      	b.n	800648a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006482:	2103      	movs	r1, #3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f95b 	bl	8006740 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800648a:	2110      	movs	r1, #16
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f8f3 	bl	8006678 <USB_FlushTxFifo>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d001      	beq.n	800649c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f91f 	bl	80066e0 <USB_FlushRxFifo>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b2:	461a      	mov	r2, r3
 80064b4:	2300      	movs	r3, #0
 80064b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064be:	461a      	mov	r2, r3
 80064c0:	2300      	movs	r3, #0
 80064c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ca:	461a      	mov	r2, r3
 80064cc:	2300      	movs	r3, #0
 80064ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064d0:	2300      	movs	r3, #0
 80064d2:	613b      	str	r3, [r7, #16]
 80064d4:	e043      	b.n	800655e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064ec:	d118      	bne.n	8006520 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10a      	bne.n	800650a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006500:	461a      	mov	r2, r3
 8006502:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	e013      	b.n	8006532 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4413      	add	r3, r2
 8006512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006516:	461a      	mov	r2, r3
 8006518:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	e008      	b.n	8006532 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652c:	461a      	mov	r2, r3
 800652e:	2300      	movs	r3, #0
 8006530:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4413      	add	r3, r2
 800653a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653e:	461a      	mov	r2, r3
 8006540:	2300      	movs	r3, #0
 8006542:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006550:	461a      	mov	r2, r3
 8006552:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006556:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	3301      	adds	r3, #1
 800655c:	613b      	str	r3, [r7, #16]
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	429a      	cmp	r2, r3
 8006564:	d3b7      	bcc.n	80064d6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006566:	2300      	movs	r3, #0
 8006568:	613b      	str	r3, [r7, #16]
 800656a:	e043      	b.n	80065f4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800657e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006582:	d118      	bne.n	80065b6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10a      	bne.n	80065a0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006596:	461a      	mov	r2, r3
 8006598:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800659c:	6013      	str	r3, [r2, #0]
 800659e:	e013      	b.n	80065c8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ac:	461a      	mov	r2, r3
 80065ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	e008      	b.n	80065c8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c2:	461a      	mov	r2, r3
 80065c4:	2300      	movs	r3, #0
 80065c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d4:	461a      	mov	r2, r3
 80065d6:	2300      	movs	r3, #0
 80065d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e6:	461a      	mov	r2, r3
 80065e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	3301      	adds	r3, #1
 80065f2:	613b      	str	r3, [r7, #16]
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d3b7      	bcc.n	800656c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800660a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800660e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800661c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	2b00      	cmp	r3, #0
 8006622:	d105      	bne.n	8006630 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	f043 0210 	orr.w	r2, r3, #16
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	699a      	ldr	r2, [r3, #24]
 8006634:	4b0f      	ldr	r3, [pc, #60]	; (8006674 <USB_DevInit+0x2c4>)
 8006636:	4313      	orrs	r3, r2
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800663c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800663e:	2b00      	cmp	r3, #0
 8006640:	d005      	beq.n	800664e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	f043 0208 	orr.w	r2, r3, #8
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800664e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006650:	2b01      	cmp	r3, #1
 8006652:	d107      	bne.n	8006664 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800665c:	f043 0304 	orr.w	r3, r3, #4
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006664:	7dfb      	ldrb	r3, [r7, #23]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006670:	b004      	add	sp, #16
 8006672:	4770      	bx	lr
 8006674:	803c3800 	.word	0x803c3800

08006678 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	3301      	adds	r3, #1
 800668a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4a13      	ldr	r2, [pc, #76]	; (80066dc <USB_FlushTxFifo+0x64>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d901      	bls.n	8006698 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e01b      	b.n	80066d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	daf2      	bge.n	8006686 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	019b      	lsls	r3, r3, #6
 80066a8:	f043 0220 	orr.w	r2, r3, #32
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	3301      	adds	r3, #1
 80066b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	4a08      	ldr	r2, [pc, #32]	; (80066dc <USB_FlushTxFifo+0x64>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d901      	bls.n	80066c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e006      	b.n	80066d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	f003 0320 	and.w	r3, r3, #32
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	d0f0      	beq.n	80066b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3714      	adds	r7, #20
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	00030d40 	.word	0x00030d40

080066e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066e8:	2300      	movs	r3, #0
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4a11      	ldr	r2, [pc, #68]	; (800673c <USB_FlushRxFifo+0x5c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d901      	bls.n	80066fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e018      	b.n	8006730 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	2b00      	cmp	r3, #0
 8006704:	daf2      	bge.n	80066ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006706:	2300      	movs	r3, #0
 8006708:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2210      	movs	r2, #16
 800670e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	3301      	adds	r3, #1
 8006714:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4a08      	ldr	r2, [pc, #32]	; (800673c <USB_FlushRxFifo+0x5c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d901      	bls.n	8006722 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e006      	b.n	8006730 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	f003 0310 	and.w	r3, r3, #16
 800672a:	2b10      	cmp	r3, #16
 800672c:	d0f0      	beq.n	8006710 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	00030d40 	.word	0x00030d40

08006740 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	460b      	mov	r3, r1
 800674a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	78fb      	ldrb	r3, [r7, #3]
 800675a:	68f9      	ldr	r1, [r7, #12]
 800675c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006760:	4313      	orrs	r3, r2
 8006762:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006772:	b480      	push	{r7}
 8006774:	b087      	sub	sp, #28
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f003 0306 	and.w	r3, r3, #6
 800678a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d102      	bne.n	8006798 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006792:	2300      	movs	r3, #0
 8006794:	75fb      	strb	r3, [r7, #23]
 8006796:	e00a      	b.n	80067ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2b02      	cmp	r3, #2
 800679c:	d002      	beq.n	80067a4 <USB_GetDevSpeed+0x32>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2b06      	cmp	r3, #6
 80067a2:	d102      	bne.n	80067aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80067a4:	2302      	movs	r3, #2
 80067a6:	75fb      	strb	r3, [r7, #23]
 80067a8:	e001      	b.n	80067ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80067aa:	230f      	movs	r3, #15
 80067ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80067ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	371c      	adds	r7, #28
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	785b      	ldrb	r3, [r3, #1]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d13a      	bne.n	800684e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067de:	69da      	ldr	r2, [r3, #28]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	f003 030f 	and.w	r3, r3, #15
 80067e8:	2101      	movs	r1, #1
 80067ea:	fa01 f303 	lsl.w	r3, r1, r3
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	68f9      	ldr	r1, [r7, #12]
 80067f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067f6:	4313      	orrs	r3, r2
 80067f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	015a      	lsls	r2, r3, #5
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	4413      	add	r3, r2
 8006802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d155      	bne.n	80068bc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	4413      	add	r3, r2
 8006818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	791b      	ldrb	r3, [r3, #4]
 800682a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800682c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	059b      	lsls	r3, r3, #22
 8006832:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006834:	4313      	orrs	r3, r2
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	0151      	lsls	r1, r2, #5
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	440a      	add	r2, r1
 800683e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800684a:	6013      	str	r3, [r2, #0]
 800684c:	e036      	b.n	80068bc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006854:	69da      	ldr	r2, [r3, #28]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	2101      	movs	r1, #1
 8006860:	fa01 f303 	lsl.w	r3, r1, r3
 8006864:	041b      	lsls	r3, r3, #16
 8006866:	68f9      	ldr	r1, [r7, #12]
 8006868:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800686c:	4313      	orrs	r3, r2
 800686e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	4413      	add	r3, r2
 8006878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d11a      	bne.n	80068bc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	791b      	ldrb	r3, [r3, #4]
 80068a0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068a2:	430b      	orrs	r3, r1
 80068a4:	4313      	orrs	r3, r2
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	0151      	lsls	r1, r2, #5
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	440a      	add	r2, r1
 80068ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
	...

080068cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	785b      	ldrb	r3, [r3, #1]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d161      	bne.n	80069ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068fe:	d11f      	bne.n	8006940 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	0151      	lsls	r1, r2, #5
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	440a      	add	r2, r1
 8006916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800691a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800691e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	0151      	lsls	r1, r2, #5
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	440a      	add	r2, r1
 8006936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800693a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800693e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	f003 030f 	and.w	r3, r3, #15
 8006950:	2101      	movs	r1, #1
 8006952:	fa01 f303 	lsl.w	r3, r1, r3
 8006956:	b29b      	uxth	r3, r3
 8006958:	43db      	mvns	r3, r3
 800695a:	68f9      	ldr	r1, [r7, #12]
 800695c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006960:	4013      	ands	r3, r2
 8006962:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696a:	69da      	ldr	r2, [r3, #28]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	f003 030f 	and.w	r3, r3, #15
 8006974:	2101      	movs	r1, #1
 8006976:	fa01 f303 	lsl.w	r3, r1, r3
 800697a:	b29b      	uxth	r3, r3
 800697c:	43db      	mvns	r3, r3
 800697e:	68f9      	ldr	r1, [r7, #12]
 8006980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006984:	4013      	ands	r3, r2
 8006986:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	015a      	lsls	r2, r3, #5
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4413      	add	r3, r2
 8006990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	0159      	lsls	r1, r3, #5
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	440b      	add	r3, r1
 800699e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a2:	4619      	mov	r1, r3
 80069a4:	4b35      	ldr	r3, [pc, #212]	; (8006a7c <USB_DeactivateEndpoint+0x1b0>)
 80069a6:	4013      	ands	r3, r2
 80069a8:	600b      	str	r3, [r1, #0]
 80069aa:	e060      	b.n	8006a6e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069c2:	d11f      	bne.n	8006a04 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	0151      	lsls	r1, r2, #5
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	440a      	add	r2, r1
 80069da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	0151      	lsls	r1, r2, #5
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	440a      	add	r2, r1
 80069fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	f003 030f 	and.w	r3, r3, #15
 8006a14:	2101      	movs	r1, #1
 8006a16:	fa01 f303 	lsl.w	r3, r1, r3
 8006a1a:	041b      	lsls	r3, r3, #16
 8006a1c:	43db      	mvns	r3, r3
 8006a1e:	68f9      	ldr	r1, [r7, #12]
 8006a20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a24:	4013      	ands	r3, r2
 8006a26:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2e:	69da      	ldr	r2, [r3, #28]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	f003 030f 	and.w	r3, r3, #15
 8006a38:	2101      	movs	r1, #1
 8006a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a3e:	041b      	lsls	r3, r3, #16
 8006a40:	43db      	mvns	r3, r3
 8006a42:	68f9      	ldr	r1, [r7, #12]
 8006a44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a48:	4013      	ands	r3, r2
 8006a4a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	0159      	lsls	r1, r3, #5
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	440b      	add	r3, r1
 8006a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a66:	4619      	mov	r1, r3
 8006a68:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <USB_DeactivateEndpoint+0x1b4>)
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	ec337800 	.word	0xec337800
 8006a80:	eff37800 	.word	0xeff37800

08006a84 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08a      	sub	sp, #40	; 0x28
 8006a88:	af02      	add	r7, sp, #8
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	785b      	ldrb	r3, [r3, #1]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	f040 815c 	bne.w	8006d5e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d132      	bne.n	8006b14 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	0151      	lsls	r1, r2, #5
 8006ac0:	69fa      	ldr	r2, [r7, #28]
 8006ac2:	440a      	add	r2, r1
 8006ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ac8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006acc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ad0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	0151      	lsls	r1, r2, #5
 8006ae4:	69fa      	ldr	r2, [r7, #28]
 8006ae6:	440a      	add	r2, r1
 8006ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006af0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	0151      	lsls	r1, r2, #5
 8006b04:	69fa      	ldr	r2, [r7, #28]
 8006b06:	440a      	add	r2, r1
 8006b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b0c:	0cdb      	lsrs	r3, r3, #19
 8006b0e:	04db      	lsls	r3, r3, #19
 8006b10:	6113      	str	r3, [r2, #16]
 8006b12:	e074      	b.n	8006bfe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	0151      	lsls	r1, r2, #5
 8006b26:	69fa      	ldr	r2, [r7, #28]
 8006b28:	440a      	add	r2, r1
 8006b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b2e:	0cdb      	lsrs	r3, r3, #19
 8006b30:	04db      	lsls	r3, r3, #19
 8006b32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	015a      	lsls	r2, r3, #5
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	69ba      	ldr	r2, [r7, #24]
 8006b44:	0151      	lsls	r1, r2, #5
 8006b46:	69fa      	ldr	r2, [r7, #28]
 8006b48:	440a      	add	r2, r1
 8006b4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b4e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b52:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b64:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	6999      	ldr	r1, [r3, #24]
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	440b      	add	r3, r1
 8006b70:	1e59      	subs	r1, r3, #1
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b7a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006b7c:	4b9d      	ldr	r3, [pc, #628]	; (8006df4 <USB_EPStartXfer+0x370>)
 8006b7e:	400b      	ands	r3, r1
 8006b80:	69b9      	ldr	r1, [r7, #24]
 8006b82:	0148      	lsls	r0, r1, #5
 8006b84:	69f9      	ldr	r1, [r7, #28]
 8006b86:	4401      	add	r1, r0
 8006b88:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b9c:	691a      	ldr	r2, [r3, #16]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ba6:	69b9      	ldr	r1, [r7, #24]
 8006ba8:	0148      	lsls	r0, r1, #5
 8006baa:	69f9      	ldr	r1, [r7, #28]
 8006bac:	4401      	add	r1, r0
 8006bae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	791b      	ldrb	r3, [r3, #4]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d11f      	bne.n	8006bfe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	0151      	lsls	r1, r2, #5
 8006bd0:	69fa      	ldr	r2, [r7, #28]
 8006bd2:	440a      	add	r2, r1
 8006bd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bd8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006bdc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	0151      	lsls	r1, r2, #5
 8006bf0:	69fa      	ldr	r2, [r7, #28]
 8006bf2:	440a      	add	r2, r1
 8006bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bf8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bfc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d14b      	bne.n	8006c9c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d009      	beq.n	8006c20 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	015a      	lsls	r2, r3, #5
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c18:	461a      	mov	r2, r3
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	791b      	ldrb	r3, [r3, #4]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d128      	bne.n	8006c7a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d110      	bne.n	8006c5a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	0151      	lsls	r1, r2, #5
 8006c4a:	69fa      	ldr	r2, [r7, #28]
 8006c4c:	440a      	add	r2, r1
 8006c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	e00f      	b.n	8006c7a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	0151      	lsls	r1, r2, #5
 8006c6c:	69fa      	ldr	r2, [r7, #28]
 8006c6e:	440a      	add	r2, r1
 8006c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c78:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	0151      	lsls	r1, r2, #5
 8006c8c:	69fa      	ldr	r2, [r7, #28]
 8006c8e:	440a      	add	r2, r1
 8006c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c98:	6013      	str	r3, [r2, #0]
 8006c9a:	e133      	b.n	8006f04 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	69ba      	ldr	r2, [r7, #24]
 8006cac:	0151      	lsls	r1, r2, #5
 8006cae:	69fa      	ldr	r2, [r7, #28]
 8006cb0:	440a      	add	r2, r1
 8006cb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	791b      	ldrb	r3, [r3, #4]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d015      	beq.n	8006cf0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 811b 	beq.w	8006f04 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	f003 030f 	and.w	r3, r3, #15
 8006cde:	2101      	movs	r1, #1
 8006ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce4:	69f9      	ldr	r1, [r7, #28]
 8006ce6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cea:	4313      	orrs	r3, r2
 8006cec:	634b      	str	r3, [r1, #52]	; 0x34
 8006cee:	e109      	b.n	8006f04 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d110      	bne.n	8006d22 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	0151      	lsls	r1, r2, #5
 8006d12:	69fa      	ldr	r2, [r7, #28]
 8006d14:	440a      	add	r2, r1
 8006d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d1e:	6013      	str	r3, [r2, #0]
 8006d20:	e00f      	b.n	8006d42 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	015a      	lsls	r2, r3, #5
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	4413      	add	r3, r2
 8006d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	0151      	lsls	r1, r2, #5
 8006d34:	69fa      	ldr	r2, [r7, #28]
 8006d36:	440a      	add	r2, r1
 8006d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d40:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	6919      	ldr	r1, [r3, #16]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	781a      	ldrb	r2, [r3, #0]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	b298      	uxth	r0, r3
 8006d50:	79fb      	ldrb	r3, [r7, #7]
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	4603      	mov	r3, r0
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 fade 	bl	8007318 <USB_WritePacket>
 8006d5c:	e0d2      	b.n	8006f04 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	0151      	lsls	r1, r2, #5
 8006d70:	69fa      	ldr	r2, [r7, #28]
 8006d72:	440a      	add	r2, r1
 8006d74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d78:	0cdb      	lsrs	r3, r3, #19
 8006d7a:	04db      	lsls	r3, r3, #19
 8006d7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	0151      	lsls	r1, r2, #5
 8006d90:	69fa      	ldr	r2, [r7, #28]
 8006d92:	440a      	add	r2, r1
 8006d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006da0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d126      	bne.n	8006df8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	015a      	lsls	r2, r3, #5
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db6:	691a      	ldr	r2, [r3, #16]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dc0:	69b9      	ldr	r1, [r7, #24]
 8006dc2:	0148      	lsls	r0, r1, #5
 8006dc4:	69f9      	ldr	r1, [r7, #28]
 8006dc6:	4401      	add	r1, r0
 8006dc8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	015a      	lsls	r2, r3, #5
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	69ba      	ldr	r2, [r7, #24]
 8006de0:	0151      	lsls	r1, r2, #5
 8006de2:	69fa      	ldr	r2, [r7, #28]
 8006de4:	440a      	add	r2, r1
 8006de6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006dee:	6113      	str	r3, [r2, #16]
 8006df0:	e03a      	b.n	8006e68 <USB_EPStartXfer+0x3e4>
 8006df2:	bf00      	nop
 8006df4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	699a      	ldr	r2, [r3, #24]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	4413      	add	r3, r2
 8006e02:	1e5a      	subs	r2, r3, #1
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	8afa      	ldrh	r2, [r7, #22]
 8006e14:	fb03 f202 	mul.w	r2, r3, r2
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e28:	691a      	ldr	r2, [r3, #16]
 8006e2a:	8afb      	ldrh	r3, [r7, #22]
 8006e2c:	04d9      	lsls	r1, r3, #19
 8006e2e:	4b38      	ldr	r3, [pc, #224]	; (8006f10 <USB_EPStartXfer+0x48c>)
 8006e30:	400b      	ands	r3, r1
 8006e32:	69b9      	ldr	r1, [r7, #24]
 8006e34:	0148      	lsls	r0, r1, #5
 8006e36:	69f9      	ldr	r1, [r7, #28]
 8006e38:	4401      	add	r1, r0
 8006e3a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	015a      	lsls	r2, r3, #5
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	4413      	add	r3, r2
 8006e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4e:	691a      	ldr	r2, [r3, #16]
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	69db      	ldr	r3, [r3, #28]
 8006e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e58:	69b9      	ldr	r1, [r7, #24]
 8006e5a:	0148      	lsls	r0, r1, #5
 8006e5c:	69f9      	ldr	r1, [r7, #28]
 8006e5e:	4401      	add	r1, r0
 8006e60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e64:	4313      	orrs	r3, r2
 8006e66:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e68:	79fb      	ldrb	r3, [r7, #7]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d10d      	bne.n	8006e8a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d009      	beq.n	8006e8a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	6919      	ldr	r1, [r3, #16]
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	015a      	lsls	r2, r3, #5
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	4413      	add	r3, r2
 8006e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e86:	460a      	mov	r2, r1
 8006e88:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	791b      	ldrb	r3, [r3, #4]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d128      	bne.n	8006ee4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d110      	bne.n	8006ec4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	015a      	lsls	r2, r3, #5
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	69ba      	ldr	r2, [r7, #24]
 8006eb2:	0151      	lsls	r1, r2, #5
 8006eb4:	69fa      	ldr	r2, [r7, #28]
 8006eb6:	440a      	add	r2, r1
 8006eb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ebc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ec0:	6013      	str	r3, [r2, #0]
 8006ec2:	e00f      	b.n	8006ee4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	015a      	lsls	r2, r3, #5
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	4413      	add	r3, r2
 8006ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	0151      	lsls	r1, r2, #5
 8006ed6:	69fa      	ldr	r2, [r7, #28]
 8006ed8:	440a      	add	r2, r1
 8006eda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ee2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	0151      	lsls	r1, r2, #5
 8006ef6:	69fa      	ldr	r2, [r7, #28]
 8006ef8:	440a      	add	r2, r1
 8006efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006efe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3720      	adds	r7, #32
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	1ff80000 	.word	0x1ff80000

08006f14 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	785b      	ldrb	r3, [r3, #1]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	f040 80ce 	bne.w	80070d2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d132      	bne.n	8006fa4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	0151      	lsls	r1, r2, #5
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	440a      	add	r2, r1
 8006f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	0151      	lsls	r1, r2, #5
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	440a      	add	r2, r1
 8006f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	0151      	lsls	r1, r2, #5
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	440a      	add	r2, r1
 8006f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f9c:	0cdb      	lsrs	r3, r3, #19
 8006f9e:	04db      	lsls	r3, r3, #19
 8006fa0:	6113      	str	r3, [r2, #16]
 8006fa2:	e04e      	b.n	8007042 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	0151      	lsls	r1, r2, #5
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	440a      	add	r2, r1
 8006fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fbe:	0cdb      	lsrs	r3, r3, #19
 8006fc0:	04db      	lsls	r3, r3, #19
 8006fc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	0151      	lsls	r1, r2, #5
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	440a      	add	r2, r1
 8006fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fde:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006fe2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006fe6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	699a      	ldr	r2, [r3, #24]
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d903      	bls.n	8006ffc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	68da      	ldr	r2, [r3, #12]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	0151      	lsls	r1, r2, #5
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	440a      	add	r2, r1
 8007012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007016:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800701a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007028:	691a      	ldr	r2, [r3, #16]
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007032:	6939      	ldr	r1, [r7, #16]
 8007034:	0148      	lsls	r0, r1, #5
 8007036:	6979      	ldr	r1, [r7, #20]
 8007038:	4401      	add	r1, r0
 800703a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800703e:	4313      	orrs	r3, r2
 8007040:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007042:	79fb      	ldrb	r3, [r7, #7]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d11e      	bne.n	8007086 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d009      	beq.n	8007064 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705c:	461a      	mov	r2, r3
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	0151      	lsls	r1, r2, #5
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	440a      	add	r2, r1
 800707a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800707e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	e097      	b.n	80071b6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	0151      	lsls	r1, r2, #5
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	440a      	add	r2, r1
 800709c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070a4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 8083 	beq.w	80071b6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	f003 030f 	and.w	r3, r3, #15
 80070c0:	2101      	movs	r1, #1
 80070c2:	fa01 f303 	lsl.w	r3, r1, r3
 80070c6:	6979      	ldr	r1, [r7, #20]
 80070c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070cc:	4313      	orrs	r3, r2
 80070ce:	634b      	str	r3, [r1, #52]	; 0x34
 80070d0:	e071      	b.n	80071b6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	0151      	lsls	r1, r2, #5
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	440a      	add	r2, r1
 80070e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070ec:	0cdb      	lsrs	r3, r3, #19
 80070ee:	04db      	lsls	r3, r3, #19
 80070f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	0151      	lsls	r1, r2, #5
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	440a      	add	r2, r1
 8007108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800710c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007110:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007114:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	68da      	ldr	r2, [r3, #12]
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	68da      	ldr	r2, [r3, #12]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	4413      	add	r3, r2
 8007136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	0151      	lsls	r1, r2, #5
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	440a      	add	r2, r1
 8007144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007148:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800714c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	015a      	lsls	r2, r3, #5
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	4413      	add	r3, r2
 8007156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715a:	691a      	ldr	r2, [r3, #16]
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007164:	6939      	ldr	r1, [r7, #16]
 8007166:	0148      	lsls	r0, r1, #5
 8007168:	6979      	ldr	r1, [r7, #20]
 800716a:	4401      	add	r1, r0
 800716c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007170:	4313      	orrs	r3, r2
 8007172:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007174:	79fb      	ldrb	r3, [r7, #7]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d10d      	bne.n	8007196 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d009      	beq.n	8007196 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	6919      	ldr	r1, [r3, #16]
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	4413      	add	r3, r2
 800718e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007192:	460a      	mov	r2, r1
 8007194:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	4413      	add	r3, r2
 800719e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	0151      	lsls	r1, r2, #5
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	440a      	add	r2, r1
 80071ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	371c      	adds	r7, #28
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071ce:	2300      	movs	r3, #0
 80071d0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	785b      	ldrb	r3, [r3, #1]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d14a      	bne.n	8007278 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	015a      	lsls	r2, r3, #5
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	4413      	add	r3, r2
 80071ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071fa:	f040 8086 	bne.w	800730a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	4413      	add	r3, r2
 8007208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	7812      	ldrb	r2, [r2, #0]
 8007212:	0151      	lsls	r1, r2, #5
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	440a      	add	r2, r1
 8007218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800721c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007220:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	4413      	add	r3, r2
 800722c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	7812      	ldrb	r2, [r2, #0]
 8007236:	0151      	lsls	r1, r2, #5
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	440a      	add	r2, r1
 800723c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007240:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007244:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	3301      	adds	r3, #1
 800724a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007252:	4293      	cmp	r3, r2
 8007254:	d902      	bls.n	800725c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	75fb      	strb	r3, [r7, #23]
          break;
 800725a:	e056      	b.n	800730a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	015a      	lsls	r2, r3, #5
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	4413      	add	r3, r2
 8007266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007270:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007274:	d0e7      	beq.n	8007246 <USB_EPStopXfer+0x82>
 8007276:	e048      	b.n	800730a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800728c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007290:	d13b      	bne.n	800730a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	7812      	ldrb	r2, [r2, #0]
 80072a6:	0151      	lsls	r1, r2, #5
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	440a      	add	r2, r1
 80072ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80072b4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	7812      	ldrb	r2, [r2, #0]
 80072ca:	0151      	lsls	r1, r2, #5
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	440a      	add	r2, r1
 80072d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	3301      	adds	r3, #1
 80072de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d902      	bls.n	80072f0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	75fb      	strb	r3, [r7, #23]
          break;
 80072ee:	e00c      	b.n	800730a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	015a      	lsls	r2, r3, #5
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007304:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007308:	d0e7      	beq.n	80072da <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800730a:	7dfb      	ldrb	r3, [r7, #23]
}
 800730c:	4618      	mov	r0, r3
 800730e:	371c      	adds	r7, #28
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007318:	b480      	push	{r7}
 800731a:	b089      	sub	sp, #36	; 0x24
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	4611      	mov	r1, r2
 8007324:	461a      	mov	r2, r3
 8007326:	460b      	mov	r3, r1
 8007328:	71fb      	strb	r3, [r7, #7]
 800732a:	4613      	mov	r3, r2
 800732c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007336:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800733a:	2b00      	cmp	r3, #0
 800733c:	d123      	bne.n	8007386 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800733e:	88bb      	ldrh	r3, [r7, #4]
 8007340:	3303      	adds	r3, #3
 8007342:	089b      	lsrs	r3, r3, #2
 8007344:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007346:	2300      	movs	r3, #0
 8007348:	61bb      	str	r3, [r7, #24]
 800734a:	e018      	b.n	800737e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800734c:	79fb      	ldrb	r3, [r7, #7]
 800734e:	031a      	lsls	r2, r3, #12
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	4413      	add	r3, r2
 8007354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007358:	461a      	mov	r2, r3
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	3301      	adds	r3, #1
 8007364:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	3301      	adds	r3, #1
 800736a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	3301      	adds	r3, #1
 8007370:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	3301      	adds	r3, #1
 8007376:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	3301      	adds	r3, #1
 800737c:	61bb      	str	r3, [r7, #24]
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	429a      	cmp	r2, r3
 8007384:	d3e2      	bcc.n	800734c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3724      	adds	r7, #36	; 0x24
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007394:	b480      	push	{r7}
 8007396:	b08b      	sub	sp, #44	; 0x2c
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	4613      	mov	r3, r2
 80073a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80073aa:	88fb      	ldrh	r3, [r7, #6]
 80073ac:	089b      	lsrs	r3, r3, #2
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80073b2:	88fb      	ldrh	r3, [r7, #6]
 80073b4:	f003 0303 	and.w	r3, r3, #3
 80073b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80073ba:	2300      	movs	r3, #0
 80073bc:	623b      	str	r3, [r7, #32]
 80073be:	e014      	b.n	80073ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	3301      	adds	r3, #1
 80073d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	3301      	adds	r3, #1
 80073d6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	3301      	adds	r3, #1
 80073dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	3301      	adds	r3, #1
 80073e2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80073e4:	6a3b      	ldr	r3, [r7, #32]
 80073e6:	3301      	adds	r3, #1
 80073e8:	623b      	str	r3, [r7, #32]
 80073ea:	6a3a      	ldr	r2, [r7, #32]
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d3e6      	bcc.n	80073c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80073f2:	8bfb      	ldrh	r3, [r7, #30]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d01e      	beq.n	8007436 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80073f8:	2300      	movs	r3, #0
 80073fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007402:	461a      	mov	r2, r3
 8007404:	f107 0310 	add.w	r3, r7, #16
 8007408:	6812      	ldr	r2, [r2, #0]
 800740a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	b2db      	uxtb	r3, r3
 8007412:	00db      	lsls	r3, r3, #3
 8007414:	fa22 f303 	lsr.w	r3, r2, r3
 8007418:	b2da      	uxtb	r2, r3
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	701a      	strb	r2, [r3, #0]
      i++;
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	3301      	adds	r3, #1
 8007422:	623b      	str	r3, [r7, #32]
      pDest++;
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	3301      	adds	r3, #1
 8007428:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800742a:	8bfb      	ldrh	r3, [r7, #30]
 800742c:	3b01      	subs	r3, #1
 800742e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007430:	8bfb      	ldrh	r3, [r7, #30]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1ea      	bne.n	800740c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007438:	4618      	mov	r0, r3
 800743a:	372c      	adds	r7, #44	; 0x2c
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	785b      	ldrb	r3, [r3, #1]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d12c      	bne.n	80074ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	4413      	add	r3, r2
 8007468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	db12      	blt.n	8007498 <USB_EPSetStall+0x54>
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00f      	beq.n	8007498 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	015a      	lsls	r2, r3, #5
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	4413      	add	r3, r2
 8007480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	0151      	lsls	r1, r2, #5
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	440a      	add	r2, r1
 800748e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007492:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007496:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	0151      	lsls	r1, r2, #5
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	440a      	add	r2, r1
 80074ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80074b6:	6013      	str	r3, [r2, #0]
 80074b8:	e02b      	b.n	8007512 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	015a      	lsls	r2, r3, #5
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	4413      	add	r3, r2
 80074c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	db12      	blt.n	80074f2 <USB_EPSetStall+0xae>
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00f      	beq.n	80074f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	015a      	lsls	r2, r3, #5
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	4413      	add	r3, r2
 80074da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	0151      	lsls	r1, r2, #5
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	440a      	add	r2, r1
 80074e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80074f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	015a      	lsls	r2, r3, #5
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	4413      	add	r3, r2
 80074fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	0151      	lsls	r1, r2, #5
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	440a      	add	r2, r1
 8007508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800750c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007510:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	785b      	ldrb	r3, [r3, #1]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d128      	bne.n	800758e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	015a      	lsls	r2, r3, #5
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	4413      	add	r3, r2
 8007544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	0151      	lsls	r1, r2, #5
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	440a      	add	r2, r1
 8007552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007556:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800755a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	791b      	ldrb	r3, [r3, #4]
 8007560:	2b03      	cmp	r3, #3
 8007562:	d003      	beq.n	800756c <USB_EPClearStall+0x4c>
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	791b      	ldrb	r3, [r3, #4]
 8007568:	2b02      	cmp	r3, #2
 800756a:	d138      	bne.n	80075de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4413      	add	r3, r2
 8007574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	0151      	lsls	r1, r2, #5
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	440a      	add	r2, r1
 8007582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800758a:	6013      	str	r3, [r2, #0]
 800758c:	e027      	b.n	80075de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	0151      	lsls	r1, r2, #5
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	440a      	add	r2, r1
 80075a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	791b      	ldrb	r3, [r3, #4]
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d003      	beq.n	80075be <USB_EPClearStall+0x9e>
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	791b      	ldrb	r3, [r3, #4]
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d10f      	bne.n	80075de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	0151      	lsls	r1, r2, #5
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	440a      	add	r2, r1
 80075d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	460b      	mov	r3, r1
 80075f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800760a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800760e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	78fb      	ldrb	r3, [r7, #3]
 800761a:	011b      	lsls	r3, r3, #4
 800761c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007620:	68f9      	ldr	r1, [r7, #12]
 8007622:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007626:	4313      	orrs	r3, r2
 8007628:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007652:	f023 0303 	bic.w	r3, r3, #3
 8007656:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007666:	f023 0302 	bic.w	r3, r3, #2
 800766a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800767a:	b480      	push	{r7}
 800767c:	b085      	sub	sp, #20
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007694:	f023 0303 	bic.w	r3, r3, #3
 8007698:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076a8:	f043 0302 	orr.w	r3, r3, #2
 80076ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3714      	adds	r7, #20
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	4013      	ands	r3, r2
 80076d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80076d4:	68fb      	ldr	r3, [r7, #12]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b085      	sub	sp, #20
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076fe:	69db      	ldr	r3, [r3, #28]
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	4013      	ands	r3, r2
 8007704:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	0c1b      	lsrs	r3, r3, #16
}
 800770a:	4618      	mov	r0, r3
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007716:	b480      	push	{r7}
 8007718:	b085      	sub	sp, #20
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	4013      	ands	r3, r2
 8007738:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	b29b      	uxth	r3, r3
}
 800773e:	4618      	mov	r0, r3
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800774a:	b480      	push	{r7}
 800774c:	b085      	sub	sp, #20
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	460b      	mov	r3, r1
 8007754:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800775a:	78fb      	ldrb	r3, [r7, #3]
 800775c:	015a      	lsls	r2, r3, #5
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	4413      	add	r3, r2
 8007762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007770:	695b      	ldr	r3, [r3, #20]
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	4013      	ands	r3, r2
 8007776:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007778:	68bb      	ldr	r3, [r7, #8]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007786:	b480      	push	{r7}
 8007788:	b087      	sub	sp, #28
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	460b      	mov	r3, r1
 8007790:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80077aa:	78fb      	ldrb	r3, [r7, #3]
 80077ac:	f003 030f 	and.w	r3, r3, #15
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	fa22 f303 	lsr.w	r3, r2, r3
 80077b6:	01db      	lsls	r3, r3, #7
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	4313      	orrs	r3, r2
 80077be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80077c0:	78fb      	ldrb	r3, [r7, #3]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	4013      	ands	r3, r2
 80077d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077d4:	68bb      	ldr	r3, [r7, #8]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	371c      	adds	r7, #28
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b083      	sub	sp, #12
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	f003 0301 	and.w	r3, r3, #1
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80077fe:	b480      	push	{r7}
 8007800:	b085      	sub	sp, #20
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007818:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800781c:	f023 0307 	bic.w	r3, r3, #7
 8007820:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007834:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007844:	b480      	push	{r7}
 8007846:	b087      	sub	sp, #28
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	460b      	mov	r3, r1
 800784e:	607a      	str	r2, [r7, #4]
 8007850:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	333c      	adds	r3, #60	; 0x3c
 800785a:	3304      	adds	r3, #4
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	4a26      	ldr	r2, [pc, #152]	; (80078fc <USB_EP0_OutStart+0xb8>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d90a      	bls.n	800787e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007874:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007878:	d101      	bne.n	800787e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	e037      	b.n	80078ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007884:	461a      	mov	r2, r3
 8007886:	2300      	movs	r3, #0
 8007888:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007898:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800789c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078ac:	f043 0318 	orr.w	r3, r3, #24
 80078b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078c0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80078c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80078c6:	7afb      	ldrb	r3, [r7, #11]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d10f      	bne.n	80078ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d2:	461a      	mov	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078e6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80078ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	371c      	adds	r7, #28
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	4f54300a 	.word	0x4f54300a

08007900 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007908:	2300      	movs	r3, #0
 800790a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	3301      	adds	r3, #1
 8007910:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	4a13      	ldr	r2, [pc, #76]	; (8007964 <USB_CoreReset+0x64>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d901      	bls.n	800791e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e01b      	b.n	8007956 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	2b00      	cmp	r3, #0
 8007924:	daf2      	bge.n	800790c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007926:	2300      	movs	r3, #0
 8007928:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	f043 0201 	orr.w	r2, r3, #1
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	3301      	adds	r3, #1
 800793a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	4a09      	ldr	r2, [pc, #36]	; (8007964 <USB_CoreReset+0x64>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d901      	bls.n	8007948 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e006      	b.n	8007956 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	2b01      	cmp	r3, #1
 8007952:	d0f0      	beq.n	8007936 <USB_CoreReset+0x36>

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3714      	adds	r7, #20
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	00030d40 	.word	0x00030d40

08007968 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	460b      	mov	r3, r1
 8007972:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007974:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007978:	f002 fc94 	bl	800a2a4 <USBD_static_malloc>
 800797c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d109      	bne.n	8007998 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	32b0      	adds	r2, #176	; 0xb0
 800798e:	2100      	movs	r1, #0
 8007990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007994:	2302      	movs	r3, #2
 8007996:	e0d4      	b.n	8007b42 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007998:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800799c:	2100      	movs	r1, #0
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f002 fce8 	bl	800a374 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	32b0      	adds	r2, #176	; 0xb0
 80079ae:	68f9      	ldr	r1, [r7, #12]
 80079b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	32b0      	adds	r2, #176	; 0xb0
 80079be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	7c1b      	ldrb	r3, [r3, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d138      	bne.n	8007a42 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80079d0:	4b5e      	ldr	r3, [pc, #376]	; (8007b4c <USBD_CDC_Init+0x1e4>)
 80079d2:	7819      	ldrb	r1, [r3, #0]
 80079d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079d8:	2202      	movs	r2, #2
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f002 fb3f 	bl	800a05e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80079e0:	4b5a      	ldr	r3, [pc, #360]	; (8007b4c <USBD_CDC_Init+0x1e4>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	f003 020f 	and.w	r2, r3, #15
 80079e8:	6879      	ldr	r1, [r7, #4]
 80079ea:	4613      	mov	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	440b      	add	r3, r1
 80079f4:	3324      	adds	r3, #36	; 0x24
 80079f6:	2201      	movs	r2, #1
 80079f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80079fa:	4b55      	ldr	r3, [pc, #340]	; (8007b50 <USBD_CDC_Init+0x1e8>)
 80079fc:	7819      	ldrb	r1, [r3, #0]
 80079fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a02:	2202      	movs	r2, #2
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f002 fb2a 	bl	800a05e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007a0a:	4b51      	ldr	r3, [pc, #324]	; (8007b50 <USBD_CDC_Init+0x1e8>)
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	f003 020f 	and.w	r2, r3, #15
 8007a12:	6879      	ldr	r1, [r7, #4]
 8007a14:	4613      	mov	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	4413      	add	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	440b      	add	r3, r1
 8007a1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a22:	2201      	movs	r2, #1
 8007a24:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007a26:	4b4b      	ldr	r3, [pc, #300]	; (8007b54 <USBD_CDC_Init+0x1ec>)
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	f003 020f 	and.w	r2, r3, #15
 8007a2e:	6879      	ldr	r1, [r7, #4]
 8007a30:	4613      	mov	r3, r2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	4413      	add	r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	440b      	add	r3, r1
 8007a3a:	3326      	adds	r3, #38	; 0x26
 8007a3c:	2210      	movs	r2, #16
 8007a3e:	801a      	strh	r2, [r3, #0]
 8007a40:	e035      	b.n	8007aae <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007a42:	4b42      	ldr	r3, [pc, #264]	; (8007b4c <USBD_CDC_Init+0x1e4>)
 8007a44:	7819      	ldrb	r1, [r3, #0]
 8007a46:	2340      	movs	r3, #64	; 0x40
 8007a48:	2202      	movs	r2, #2
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f002 fb07 	bl	800a05e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007a50:	4b3e      	ldr	r3, [pc, #248]	; (8007b4c <USBD_CDC_Init+0x1e4>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	f003 020f 	and.w	r2, r3, #15
 8007a58:	6879      	ldr	r1, [r7, #4]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	440b      	add	r3, r1
 8007a64:	3324      	adds	r3, #36	; 0x24
 8007a66:	2201      	movs	r2, #1
 8007a68:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007a6a:	4b39      	ldr	r3, [pc, #228]	; (8007b50 <USBD_CDC_Init+0x1e8>)
 8007a6c:	7819      	ldrb	r1, [r3, #0]
 8007a6e:	2340      	movs	r3, #64	; 0x40
 8007a70:	2202      	movs	r2, #2
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f002 faf3 	bl	800a05e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007a78:	4b35      	ldr	r3, [pc, #212]	; (8007b50 <USBD_CDC_Init+0x1e8>)
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	f003 020f 	and.w	r2, r3, #15
 8007a80:	6879      	ldr	r1, [r7, #4]
 8007a82:	4613      	mov	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	440b      	add	r3, r1
 8007a8c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a90:	2201      	movs	r2, #1
 8007a92:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007a94:	4b2f      	ldr	r3, [pc, #188]	; (8007b54 <USBD_CDC_Init+0x1ec>)
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	f003 020f 	and.w	r2, r3, #15
 8007a9c:	6879      	ldr	r1, [r7, #4]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	440b      	add	r3, r1
 8007aa8:	3326      	adds	r3, #38	; 0x26
 8007aaa:	2210      	movs	r2, #16
 8007aac:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007aae:	4b29      	ldr	r3, [pc, #164]	; (8007b54 <USBD_CDC_Init+0x1ec>)
 8007ab0:	7819      	ldrb	r1, [r3, #0]
 8007ab2:	2308      	movs	r3, #8
 8007ab4:	2203      	movs	r2, #3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f002 fad1 	bl	800a05e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007abc:	4b25      	ldr	r3, [pc, #148]	; (8007b54 <USBD_CDC_Init+0x1ec>)
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	f003 020f 	and.w	r2, r3, #15
 8007ac4:	6879      	ldr	r1, [r7, #4]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	4413      	add	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	440b      	add	r3, r1
 8007ad0:	3324      	adds	r3, #36	; 0x24
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	33b0      	adds	r3, #176	; 0xb0
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d101      	bne.n	8007b10 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	e018      	b.n	8007b42 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	7c1b      	ldrb	r3, [r3, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10a      	bne.n	8007b2e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b18:	4b0d      	ldr	r3, [pc, #52]	; (8007b50 <USBD_CDC_Init+0x1e8>)
 8007b1a:	7819      	ldrb	r1, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f002 fb88 	bl	800a23c <USBD_LL_PrepareReceive>
 8007b2c:	e008      	b.n	8007b40 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b2e:	4b08      	ldr	r3, [pc, #32]	; (8007b50 <USBD_CDC_Init+0x1e8>)
 8007b30:	7819      	ldrb	r1, [r3, #0]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b38:	2340      	movs	r3, #64	; 0x40
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f002 fb7e 	bl	800a23c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	20000093 	.word	0x20000093
 8007b50:	20000094 	.word	0x20000094
 8007b54:	20000095 	.word	0x20000095

08007b58 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	460b      	mov	r3, r1
 8007b62:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007b64:	4b3a      	ldr	r3, [pc, #232]	; (8007c50 <USBD_CDC_DeInit+0xf8>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f002 fa9d 	bl	800a0aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007b70:	4b37      	ldr	r3, [pc, #220]	; (8007c50 <USBD_CDC_DeInit+0xf8>)
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	f003 020f 	and.w	r2, r3, #15
 8007b78:	6879      	ldr	r1, [r7, #4]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	440b      	add	r3, r1
 8007b84:	3324      	adds	r3, #36	; 0x24
 8007b86:	2200      	movs	r2, #0
 8007b88:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007b8a:	4b32      	ldr	r3, [pc, #200]	; (8007c54 <USBD_CDC_DeInit+0xfc>)
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	4619      	mov	r1, r3
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f002 fa8a 	bl	800a0aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007b96:	4b2f      	ldr	r3, [pc, #188]	; (8007c54 <USBD_CDC_DeInit+0xfc>)
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	f003 020f 	and.w	r2, r3, #15
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4413      	add	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	440b      	add	r3, r1
 8007baa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007bae:	2200      	movs	r2, #0
 8007bb0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007bb2:	4b29      	ldr	r3, [pc, #164]	; (8007c58 <USBD_CDC_DeInit+0x100>)
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f002 fa76 	bl	800a0aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007bbe:	4b26      	ldr	r3, [pc, #152]	; (8007c58 <USBD_CDC_DeInit+0x100>)
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	f003 020f 	and.w	r2, r3, #15
 8007bc6:	6879      	ldr	r1, [r7, #4]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4413      	add	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	440b      	add	r3, r1
 8007bd2:	3324      	adds	r3, #36	; 0x24
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007bd8:	4b1f      	ldr	r3, [pc, #124]	; (8007c58 <USBD_CDC_DeInit+0x100>)
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	f003 020f 	and.w	r2, r3, #15
 8007be0:	6879      	ldr	r1, [r7, #4]
 8007be2:	4613      	mov	r3, r2
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	4413      	add	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	440b      	add	r3, r1
 8007bec:	3326      	adds	r3, #38	; 0x26
 8007bee:	2200      	movs	r2, #0
 8007bf0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	32b0      	adds	r2, #176	; 0xb0
 8007bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d01f      	beq.n	8007c44 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	33b0      	adds	r3, #176	; 0xb0
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	32b0      	adds	r2, #176	; 0xb0
 8007c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f002 fb4a 	bl	800a2c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	32b0      	adds	r2, #176	; 0xb0
 8007c36:	2100      	movs	r1, #0
 8007c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	20000093 	.word	0x20000093
 8007c54:	20000094 	.word	0x20000094
 8007c58:	20000095 	.word	0x20000095

08007c5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b086      	sub	sp, #24
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	32b0      	adds	r2, #176	; 0xb0
 8007c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c74:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007c76:	2300      	movs	r3, #0
 8007c78:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d101      	bne.n	8007c8c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e0bf      	b.n	8007e0c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d050      	beq.n	8007d3a <USBD_CDC_Setup+0xde>
 8007c98:	2b20      	cmp	r3, #32
 8007c9a:	f040 80af 	bne.w	8007dfc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	88db      	ldrh	r3, [r3, #6]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d03a      	beq.n	8007d1c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	b25b      	sxtb	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	da1b      	bge.n	8007ce8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	33b0      	adds	r3, #176	; 0xb0
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	683a      	ldr	r2, [r7, #0]
 8007cc4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007cc6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007cc8:	683a      	ldr	r2, [r7, #0]
 8007cca:	88d2      	ldrh	r2, [r2, #6]
 8007ccc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	88db      	ldrh	r3, [r3, #6]
 8007cd2:	2b07      	cmp	r3, #7
 8007cd4:	bf28      	it	cs
 8007cd6:	2307      	movcs	r3, #7
 8007cd8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	89fa      	ldrh	r2, [r7, #14]
 8007cde:	4619      	mov	r1, r3
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f001 fd89 	bl	80097f8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007ce6:	e090      	b.n	8007e0a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	785a      	ldrb	r2, [r3, #1]
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	88db      	ldrh	r3, [r3, #6]
 8007cf6:	2b3f      	cmp	r3, #63	; 0x3f
 8007cf8:	d803      	bhi.n	8007d02 <USBD_CDC_Setup+0xa6>
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	88db      	ldrh	r3, [r3, #6]
 8007cfe:	b2da      	uxtb	r2, r3
 8007d00:	e000      	b.n	8007d04 <USBD_CDC_Setup+0xa8>
 8007d02:	2240      	movs	r2, #64	; 0x40
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007d0a:	6939      	ldr	r1, [r7, #16]
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007d12:	461a      	mov	r2, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f001 fd9b 	bl	8009850 <USBD_CtlPrepareRx>
      break;
 8007d1a:	e076      	b.n	8007e0a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	33b0      	adds	r3, #176	; 0xb0
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	683a      	ldr	r2, [r7, #0]
 8007d30:	7850      	ldrb	r0, [r2, #1]
 8007d32:	2200      	movs	r2, #0
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	4798      	blx	r3
      break;
 8007d38:	e067      	b.n	8007e0a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	785b      	ldrb	r3, [r3, #1]
 8007d3e:	2b0b      	cmp	r3, #11
 8007d40:	d851      	bhi.n	8007de6 <USBD_CDC_Setup+0x18a>
 8007d42:	a201      	add	r2, pc, #4	; (adr r2, 8007d48 <USBD_CDC_Setup+0xec>)
 8007d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d48:	08007d79 	.word	0x08007d79
 8007d4c:	08007df5 	.word	0x08007df5
 8007d50:	08007de7 	.word	0x08007de7
 8007d54:	08007de7 	.word	0x08007de7
 8007d58:	08007de7 	.word	0x08007de7
 8007d5c:	08007de7 	.word	0x08007de7
 8007d60:	08007de7 	.word	0x08007de7
 8007d64:	08007de7 	.word	0x08007de7
 8007d68:	08007de7 	.word	0x08007de7
 8007d6c:	08007de7 	.word	0x08007de7
 8007d70:	08007da3 	.word	0x08007da3
 8007d74:	08007dcd 	.word	0x08007dcd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	2b03      	cmp	r3, #3
 8007d82:	d107      	bne.n	8007d94 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007d84:	f107 030a 	add.w	r3, r7, #10
 8007d88:	2202      	movs	r2, #2
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f001 fd33 	bl	80097f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d92:	e032      	b.n	8007dfa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007d94:	6839      	ldr	r1, [r7, #0]
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f001 fcbd 	bl	8009716 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	75fb      	strb	r3, [r7, #23]
          break;
 8007da0:	e02b      	b.n	8007dfa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d107      	bne.n	8007dbe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007dae:	f107 030d 	add.w	r3, r7, #13
 8007db2:	2201      	movs	r2, #1
 8007db4:	4619      	mov	r1, r3
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f001 fd1e 	bl	80097f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007dbc:	e01d      	b.n	8007dfa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007dbe:	6839      	ldr	r1, [r7, #0]
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f001 fca8 	bl	8009716 <USBD_CtlError>
            ret = USBD_FAIL;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	75fb      	strb	r3, [r7, #23]
          break;
 8007dca:	e016      	b.n	8007dfa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	d00f      	beq.n	8007df8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f001 fc9b 	bl	8009716 <USBD_CtlError>
            ret = USBD_FAIL;
 8007de0:	2303      	movs	r3, #3
 8007de2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007de4:	e008      	b.n	8007df8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f001 fc94 	bl	8009716 <USBD_CtlError>
          ret = USBD_FAIL;
 8007dee:	2303      	movs	r3, #3
 8007df0:	75fb      	strb	r3, [r7, #23]
          break;
 8007df2:	e002      	b.n	8007dfa <USBD_CDC_Setup+0x19e>
          break;
 8007df4:	bf00      	nop
 8007df6:	e008      	b.n	8007e0a <USBD_CDC_Setup+0x1ae>
          break;
 8007df8:	bf00      	nop
      }
      break;
 8007dfa:	e006      	b.n	8007e0a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007dfc:	6839      	ldr	r1, [r7, #0]
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f001 fc89 	bl	8009716 <USBD_CtlError>
      ret = USBD_FAIL;
 8007e04:	2303      	movs	r3, #3
 8007e06:	75fb      	strb	r3, [r7, #23]
      break;
 8007e08:	bf00      	nop
  }

  return (uint8_t)ret;
 8007e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3718      	adds	r7, #24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	32b0      	adds	r2, #176	; 0xb0
 8007e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d101      	bne.n	8007e3e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e065      	b.n	8007f0a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	32b0      	adds	r2, #176	; 0xb0
 8007e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e4c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007e4e:	78fb      	ldrb	r3, [r7, #3]
 8007e50:	f003 020f 	and.w	r2, r3, #15
 8007e54:	6879      	ldr	r1, [r7, #4]
 8007e56:	4613      	mov	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	440b      	add	r3, r1
 8007e60:	3318      	adds	r3, #24
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d02f      	beq.n	8007ec8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007e68:	78fb      	ldrb	r3, [r7, #3]
 8007e6a:	f003 020f 	and.w	r2, r3, #15
 8007e6e:	6879      	ldr	r1, [r7, #4]
 8007e70:	4613      	mov	r3, r2
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	440b      	add	r3, r1
 8007e7a:	3318      	adds	r3, #24
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	78fb      	ldrb	r3, [r7, #3]
 8007e80:	f003 010f 	and.w	r1, r3, #15
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	460b      	mov	r3, r1
 8007e88:	00db      	lsls	r3, r3, #3
 8007e8a:	440b      	add	r3, r1
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4403      	add	r3, r0
 8007e90:	3348      	adds	r3, #72	; 0x48
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	fbb2 f1f3 	udiv	r1, r2, r3
 8007e98:	fb01 f303 	mul.w	r3, r1, r3
 8007e9c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d112      	bne.n	8007ec8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007ea2:	78fb      	ldrb	r3, [r7, #3]
 8007ea4:	f003 020f 	and.w	r2, r3, #15
 8007ea8:	6879      	ldr	r1, [r7, #4]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	4413      	add	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	440b      	add	r3, r1
 8007eb4:	3318      	adds	r3, #24
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007eba:	78f9      	ldrb	r1, [r7, #3]
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f002 f99a 	bl	800a1fa <USBD_LL_Transmit>
 8007ec6:	e01f      	b.n	8007f08 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	33b0      	adds	r3, #176	; 0xb0
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d010      	beq.n	8007f08 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	33b0      	adds	r3, #176	; 0xb0
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	4413      	add	r3, r2
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007f04:	78fa      	ldrb	r2, [r7, #3]
 8007f06:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b084      	sub	sp, #16
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	32b0      	adds	r2, #176	; 0xb0
 8007f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f2c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	32b0      	adds	r2, #176	; 0xb0
 8007f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d101      	bne.n	8007f44 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007f40:	2303      	movs	r3, #3
 8007f42:	e01a      	b.n	8007f7a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f44:	78fb      	ldrb	r3, [r7, #3]
 8007f46:	4619      	mov	r1, r3
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f002 f998 	bl	800a27e <USBD_LL_GetRxDataSize>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	33b0      	adds	r3, #176	; 0xb0
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4413      	add	r3, r2
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007f74:	4611      	mov	r1, r2
 8007f76:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b084      	sub	sp, #16
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	32b0      	adds	r2, #176	; 0xb0
 8007f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f98:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e025      	b.n	8007ff0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	33b0      	adds	r3, #176	; 0xb0
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4413      	add	r3, r2
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d01a      	beq.n	8007fee <USBD_CDC_EP0_RxReady+0x6c>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007fbe:	2bff      	cmp	r3, #255	; 0xff
 8007fc0:	d015      	beq.n	8007fee <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	33b0      	adds	r3, #176	; 0xb0
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	4413      	add	r3, r2
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007fda:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007fe2:	b292      	uxth	r2, r2
 8007fe4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	22ff      	movs	r2, #255	; 0xff
 8007fea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008000:	2182      	movs	r1, #130	; 0x82
 8008002:	4818      	ldr	r0, [pc, #96]	; (8008064 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008004:	f000 fd4f 	bl	8008aa6 <USBD_GetEpDesc>
 8008008:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800800a:	2101      	movs	r1, #1
 800800c:	4815      	ldr	r0, [pc, #84]	; (8008064 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800800e:	f000 fd4a 	bl	8008aa6 <USBD_GetEpDesc>
 8008012:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008014:	2181      	movs	r1, #129	; 0x81
 8008016:	4813      	ldr	r0, [pc, #76]	; (8008064 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008018:	f000 fd45 	bl	8008aa6 <USBD_GetEpDesc>
 800801c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d002      	beq.n	800802a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	2210      	movs	r2, #16
 8008028:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d006      	beq.n	800803e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	2200      	movs	r2, #0
 8008034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008038:	711a      	strb	r2, [r3, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d006      	beq.n	8008052 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800804c:	711a      	strb	r2, [r3, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2243      	movs	r2, #67	; 0x43
 8008056:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008058:	4b02      	ldr	r3, [pc, #8]	; (8008064 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800805a:	4618      	mov	r0, r3
 800805c:	3718      	adds	r7, #24
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	20000050 	.word	0x20000050

08008068 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b086      	sub	sp, #24
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008070:	2182      	movs	r1, #130	; 0x82
 8008072:	4818      	ldr	r0, [pc, #96]	; (80080d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008074:	f000 fd17 	bl	8008aa6 <USBD_GetEpDesc>
 8008078:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800807a:	2101      	movs	r1, #1
 800807c:	4815      	ldr	r0, [pc, #84]	; (80080d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800807e:	f000 fd12 	bl	8008aa6 <USBD_GetEpDesc>
 8008082:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008084:	2181      	movs	r1, #129	; 0x81
 8008086:	4813      	ldr	r0, [pc, #76]	; (80080d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008088:	f000 fd0d 	bl	8008aa6 <USBD_GetEpDesc>
 800808c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d002      	beq.n	800809a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	2210      	movs	r2, #16
 8008098:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d006      	beq.n	80080ae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	2200      	movs	r2, #0
 80080a4:	711a      	strb	r2, [r3, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f042 0202 	orr.w	r2, r2, #2
 80080ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d006      	beq.n	80080c2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	711a      	strb	r2, [r3, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f042 0202 	orr.w	r2, r2, #2
 80080c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2243      	movs	r2, #67	; 0x43
 80080c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80080c8:	4b02      	ldr	r3, [pc, #8]	; (80080d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3718      	adds	r7, #24
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	20000050 	.word	0x20000050

080080d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80080e0:	2182      	movs	r1, #130	; 0x82
 80080e2:	4818      	ldr	r0, [pc, #96]	; (8008144 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80080e4:	f000 fcdf 	bl	8008aa6 <USBD_GetEpDesc>
 80080e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80080ea:	2101      	movs	r1, #1
 80080ec:	4815      	ldr	r0, [pc, #84]	; (8008144 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80080ee:	f000 fcda 	bl	8008aa6 <USBD_GetEpDesc>
 80080f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80080f4:	2181      	movs	r1, #129	; 0x81
 80080f6:	4813      	ldr	r0, [pc, #76]	; (8008144 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80080f8:	f000 fcd5 	bl	8008aa6 <USBD_GetEpDesc>
 80080fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d002      	beq.n	800810a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	2210      	movs	r2, #16
 8008108:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d006      	beq.n	800811e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	2200      	movs	r2, #0
 8008114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008118:	711a      	strb	r2, [r3, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d006      	beq.n	8008132 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800812c:	711a      	strb	r2, [r3, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2243      	movs	r2, #67	; 0x43
 8008136:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008138:	4b02      	ldr	r3, [pc, #8]	; (8008144 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800813a:	4618      	mov	r0, r3
 800813c:	3718      	adds	r7, #24
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	20000050 	.word	0x20000050

08008148 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	220a      	movs	r2, #10
 8008154:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008156:	4b03      	ldr	r3, [pc, #12]	; (8008164 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008158:	4618      	mov	r0, r3
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	2000000c 	.word	0x2000000c

08008168 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008178:	2303      	movs	r3, #3
 800817a:	e009      	b.n	8008190 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	33b0      	adds	r3, #176	; 0xb0
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800819c:	b480      	push	{r7}
 800819e:	b087      	sub	sp, #28
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	32b0      	adds	r2, #176	; 0xb0
 80081b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80081be:	2303      	movs	r3, #3
 80081c0:	e008      	b.n	80081d4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	371c      	adds	r7, #28
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	32b0      	adds	r2, #176	; 0xb0
 80081f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d101      	bne.n	8008204 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008200:	2303      	movs	r3, #3
 8008202:	e004      	b.n	800820e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
	...

0800821c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	32b0      	adds	r2, #176	; 0xb0
 800822e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008232:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008234:	2301      	movs	r3, #1
 8008236:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	32b0      	adds	r2, #176	; 0xb0
 8008242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800824a:	2303      	movs	r3, #3
 800824c:	e025      	b.n	800829a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008254:	2b00      	cmp	r3, #0
 8008256:	d11f      	bne.n	8008298 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	2201      	movs	r2, #1
 800825c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008260:	4b10      	ldr	r3, [pc, #64]	; (80082a4 <USBD_CDC_TransmitPacket+0x88>)
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	f003 020f 	and.w	r2, r3, #15
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	4613      	mov	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4413      	add	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4403      	add	r3, r0
 800827a:	3318      	adds	r3, #24
 800827c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800827e:	4b09      	ldr	r3, [pc, #36]	; (80082a4 <USBD_CDC_TransmitPacket+0x88>)
 8008280:	7819      	ldrb	r1, [r3, #0]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f001 ffb3 	bl	800a1fa <USBD_LL_Transmit>

    ret = USBD_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008298:	7bfb      	ldrb	r3, [r7, #15]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	20000093 	.word	0x20000093

080082a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	32b0      	adds	r2, #176	; 0xb0
 80082ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082be:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	32b0      	adds	r2, #176	; 0xb0
 80082ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d101      	bne.n	80082d6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e018      	b.n	8008308 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	7c1b      	ldrb	r3, [r3, #16]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10a      	bne.n	80082f4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80082de:	4b0c      	ldr	r3, [pc, #48]	; (8008310 <USBD_CDC_ReceivePacket+0x68>)
 80082e0:	7819      	ldrb	r1, [r3, #0]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80082e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f001 ffa5 	bl	800a23c <USBD_LL_PrepareReceive>
 80082f2:	e008      	b.n	8008306 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80082f4:	4b06      	ldr	r3, [pc, #24]	; (8008310 <USBD_CDC_ReceivePacket+0x68>)
 80082f6:	7819      	ldrb	r1, [r3, #0]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80082fe:	2340      	movs	r3, #64	; 0x40
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f001 ff9b 	bl	800a23c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	20000094 	.word	0x20000094

08008314 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	4613      	mov	r3, r2
 8008320:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d101      	bne.n	800832c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008328:	2303      	movs	r3, #3
 800832a:	e01f      	b.n	800836c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d003      	beq.n	8008352 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	68ba      	ldr	r2, [r7, #8]
 800834e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2201      	movs	r2, #1
 8008356:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	79fa      	ldrb	r2, [r7, #7]
 800835e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f001 fe15 	bl	8009f90 <USBD_LL_Init>
 8008366:	4603      	mov	r3, r0
 8008368:	75fb      	strb	r3, [r7, #23]

  return ret;
 800836a:	7dfb      	ldrb	r3, [r7, #23]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3718      	adds	r7, #24
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800837e:	2300      	movs	r3, #0
 8008380:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d101      	bne.n	800838c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008388:	2303      	movs	r3, #3
 800838a:	e025      	b.n	80083d8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	32ae      	adds	r2, #174	; 0xae
 800839e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00f      	beq.n	80083c8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	32ae      	adds	r2, #174	; 0xae
 80083b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b8:	f107 020e 	add.w	r2, r7, #14
 80083bc:	4610      	mov	r0, r2
 80083be:	4798      	blx	r3
 80083c0:	4602      	mov	r2, r0
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80083ce:	1c5a      	adds	r2, r3, #1
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f001 fe1d 	bl	800a028 <USBD_LL_Start>
 80083ee:	4603      	mov	r3, r0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008400:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008402:	4618      	mov	r0, r3
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b084      	sub	sp, #16
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	460b      	mov	r3, r1
 8008418:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800841a:	2300      	movs	r3, #0
 800841c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008424:	2b00      	cmp	r3, #0
 8008426:	d009      	beq.n	800843c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	78fa      	ldrb	r2, [r7, #3]
 8008432:	4611      	mov	r1, r2
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	4798      	blx	r3
 8008438:	4603      	mov	r3, r0
 800843a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800843c:	7bfb      	ldrb	r3, [r7, #15]
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b084      	sub	sp, #16
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	460b      	mov	r3, r1
 8008450:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008452:	2300      	movs	r3, #0
 8008454:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	78fa      	ldrb	r2, [r7, #3]
 8008460:	4611      	mov	r1, r2
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	4798      	blx	r3
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800846c:	2303      	movs	r3, #3
 800846e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008470:	7bfb      	ldrb	r3, [r7, #15]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b084      	sub	sp, #16
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800848a:	6839      	ldr	r1, [r7, #0]
 800848c:	4618      	mov	r0, r3
 800848e:	f001 f908 	bl	80096a2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80084a0:	461a      	mov	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80084ae:	f003 031f 	and.w	r3, r3, #31
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d01a      	beq.n	80084ec <USBD_LL_SetupStage+0x72>
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d822      	bhi.n	8008500 <USBD_LL_SetupStage+0x86>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d002      	beq.n	80084c4 <USBD_LL_SetupStage+0x4a>
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d00a      	beq.n	80084d8 <USBD_LL_SetupStage+0x5e>
 80084c2:	e01d      	b.n	8008500 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084ca:	4619      	mov	r1, r3
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fb5f 	bl	8008b90 <USBD_StdDevReq>
 80084d2:	4603      	mov	r3, r0
 80084d4:	73fb      	strb	r3, [r7, #15]
      break;
 80084d6:	e020      	b.n	800851a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 fbc7 	bl	8008c74 <USBD_StdItfReq>
 80084e6:	4603      	mov	r3, r0
 80084e8:	73fb      	strb	r3, [r7, #15]
      break;
 80084ea:	e016      	b.n	800851a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084f2:	4619      	mov	r1, r3
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fc29 	bl	8008d4c <USBD_StdEPReq>
 80084fa:	4603      	mov	r3, r0
 80084fc:	73fb      	strb	r3, [r7, #15]
      break;
 80084fe:	e00c      	b.n	800851a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008506:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800850a:	b2db      	uxtb	r3, r3
 800850c:	4619      	mov	r1, r3
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f001 fdea 	bl	800a0e8 <USBD_LL_StallEP>
 8008514:	4603      	mov	r3, r0
 8008516:	73fb      	strb	r3, [r7, #15]
      break;
 8008518:	bf00      	nop
  }

  return ret;
 800851a:	7bfb      	ldrb	r3, [r7, #15]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b086      	sub	sp, #24
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	460b      	mov	r3, r1
 800852e:	607a      	str	r2, [r7, #4]
 8008530:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008532:	2300      	movs	r3, #0
 8008534:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008536:	7afb      	ldrb	r3, [r7, #11]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d16e      	bne.n	800861a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008542:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800854a:	2b03      	cmp	r3, #3
 800854c:	f040 8098 	bne.w	8008680 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	689a      	ldr	r2, [r3, #8]
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	429a      	cmp	r2, r3
 800855a:	d913      	bls.n	8008584 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	1ad2      	subs	r2, r2, r3
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	68da      	ldr	r2, [r3, #12]
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	4293      	cmp	r3, r2
 8008574:	bf28      	it	cs
 8008576:	4613      	movcs	r3, r2
 8008578:	461a      	mov	r2, r3
 800857a:	6879      	ldr	r1, [r7, #4]
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f001 f984 	bl	800988a <USBD_CtlContinueRx>
 8008582:	e07d      	b.n	8008680 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800858a:	f003 031f 	and.w	r3, r3, #31
 800858e:	2b02      	cmp	r3, #2
 8008590:	d014      	beq.n	80085bc <USBD_LL_DataOutStage+0x98>
 8008592:	2b02      	cmp	r3, #2
 8008594:	d81d      	bhi.n	80085d2 <USBD_LL_DataOutStage+0xae>
 8008596:	2b00      	cmp	r3, #0
 8008598:	d002      	beq.n	80085a0 <USBD_LL_DataOutStage+0x7c>
 800859a:	2b01      	cmp	r3, #1
 800859c:	d003      	beq.n	80085a6 <USBD_LL_DataOutStage+0x82>
 800859e:	e018      	b.n	80085d2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80085a0:	2300      	movs	r3, #0
 80085a2:	75bb      	strb	r3, [r7, #22]
            break;
 80085a4:	e018      	b.n	80085d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	4619      	mov	r1, r3
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f000 fa5e 	bl	8008a72 <USBD_CoreFindIF>
 80085b6:	4603      	mov	r3, r0
 80085b8:	75bb      	strb	r3, [r7, #22]
            break;
 80085ba:	e00d      	b.n	80085d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	4619      	mov	r1, r3
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f000 fa60 	bl	8008a8c <USBD_CoreFindEP>
 80085cc:	4603      	mov	r3, r0
 80085ce:	75bb      	strb	r3, [r7, #22]
            break;
 80085d0:	e002      	b.n	80085d8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80085d2:	2300      	movs	r3, #0
 80085d4:	75bb      	strb	r3, [r7, #22]
            break;
 80085d6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80085d8:	7dbb      	ldrb	r3, [r7, #22]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d119      	bne.n	8008612 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	d113      	bne.n	8008612 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80085ea:	7dba      	ldrb	r2, [r7, #22]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	32ae      	adds	r2, #174	; 0xae
 80085f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00b      	beq.n	8008612 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80085fa:	7dba      	ldrb	r2, [r7, #22]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008602:	7dba      	ldrb	r2, [r7, #22]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	32ae      	adds	r2, #174	; 0xae
 8008608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f001 f94a 	bl	80098ac <USBD_CtlSendStatus>
 8008618:	e032      	b.n	8008680 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800861a:	7afb      	ldrb	r3, [r7, #11]
 800861c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008620:	b2db      	uxtb	r3, r3
 8008622:	4619      	mov	r1, r3
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 fa31 	bl	8008a8c <USBD_CoreFindEP>
 800862a:	4603      	mov	r3, r0
 800862c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800862e:	7dbb      	ldrb	r3, [r7, #22]
 8008630:	2bff      	cmp	r3, #255	; 0xff
 8008632:	d025      	beq.n	8008680 <USBD_LL_DataOutStage+0x15c>
 8008634:	7dbb      	ldrb	r3, [r7, #22]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d122      	bne.n	8008680 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008640:	b2db      	uxtb	r3, r3
 8008642:	2b03      	cmp	r3, #3
 8008644:	d117      	bne.n	8008676 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008646:	7dba      	ldrb	r2, [r7, #22]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	32ae      	adds	r2, #174	; 0xae
 800864c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00f      	beq.n	8008676 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008656:	7dba      	ldrb	r2, [r7, #22]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800865e:	7dba      	ldrb	r2, [r7, #22]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	32ae      	adds	r2, #174	; 0xae
 8008664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	7afa      	ldrb	r2, [r7, #11]
 800866c:	4611      	mov	r1, r2
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	4798      	blx	r3
 8008672:	4603      	mov	r3, r0
 8008674:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008676:	7dfb      	ldrb	r3, [r7, #23]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d001      	beq.n	8008680 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800867c:	7dfb      	ldrb	r3, [r7, #23]
 800867e:	e000      	b.n	8008682 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3718      	adds	r7, #24
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b086      	sub	sp, #24
 800868e:	af00      	add	r7, sp, #0
 8008690:	60f8      	str	r0, [r7, #12]
 8008692:	460b      	mov	r3, r1
 8008694:	607a      	str	r2, [r7, #4]
 8008696:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008698:	7afb      	ldrb	r3, [r7, #11]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d16f      	bne.n	800877e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3314      	adds	r3, #20
 80086a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d15a      	bne.n	8008764 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	689a      	ldr	r2, [r3, #8]
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d914      	bls.n	80086e4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	689a      	ldr	r2, [r3, #8]
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	1ad2      	subs	r2, r2, r3
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	461a      	mov	r2, r3
 80086ce:	6879      	ldr	r1, [r7, #4]
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f001 f8ac 	bl	800982e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086d6:	2300      	movs	r3, #0
 80086d8:	2200      	movs	r2, #0
 80086da:	2100      	movs	r1, #0
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f001 fdad 	bl	800a23c <USBD_LL_PrepareReceive>
 80086e2:	e03f      	b.n	8008764 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	68da      	ldr	r2, [r3, #12]
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d11c      	bne.n	800872a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	685a      	ldr	r2, [r3, #4]
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d316      	bcc.n	800872a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	685a      	ldr	r2, [r3, #4]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008706:	429a      	cmp	r2, r3
 8008708:	d20f      	bcs.n	800872a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800870a:	2200      	movs	r2, #0
 800870c:	2100      	movs	r1, #0
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f001 f88d 	bl	800982e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800871c:	2300      	movs	r3, #0
 800871e:	2200      	movs	r2, #0
 8008720:	2100      	movs	r1, #0
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f001 fd8a 	bl	800a23c <USBD_LL_PrepareReceive>
 8008728:	e01c      	b.n	8008764 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b03      	cmp	r3, #3
 8008734:	d10f      	bne.n	8008756 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d009      	beq.n	8008756 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008756:	2180      	movs	r1, #128	; 0x80
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f001 fcc5 	bl	800a0e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f001 f8b7 	bl	80098d2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d03a      	beq.n	80087e4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f7ff fe42 	bl	80083f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800877c:	e032      	b.n	80087e4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800877e:	7afb      	ldrb	r3, [r7, #11]
 8008780:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008784:	b2db      	uxtb	r3, r3
 8008786:	4619      	mov	r1, r3
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f000 f97f 	bl	8008a8c <USBD_CoreFindEP>
 800878e:	4603      	mov	r3, r0
 8008790:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008792:	7dfb      	ldrb	r3, [r7, #23]
 8008794:	2bff      	cmp	r3, #255	; 0xff
 8008796:	d025      	beq.n	80087e4 <USBD_LL_DataInStage+0x15a>
 8008798:	7dfb      	ldrb	r3, [r7, #23]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d122      	bne.n	80087e4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	2b03      	cmp	r3, #3
 80087a8:	d11c      	bne.n	80087e4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80087aa:	7dfa      	ldrb	r2, [r7, #23]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	32ae      	adds	r2, #174	; 0xae
 80087b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d014      	beq.n	80087e4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80087ba:	7dfa      	ldrb	r2, [r7, #23]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80087c2:	7dfa      	ldrb	r2, [r7, #23]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	32ae      	adds	r2, #174	; 0xae
 80087c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	7afa      	ldrb	r2, [r7, #11]
 80087d0:	4611      	mov	r1, r2
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	4798      	blx	r3
 80087d6:	4603      	mov	r3, r0
 80087d8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80087da:	7dbb      	ldrb	r3, [r7, #22]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d001      	beq.n	80087e4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80087e0:	7dbb      	ldrb	r3, [r7, #22]
 80087e2:	e000      	b.n	80087e6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3718      	adds	r7, #24
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b084      	sub	sp, #16
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008826:	2b00      	cmp	r3, #0
 8008828:	d014      	beq.n	8008854 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00e      	beq.n	8008854 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	6852      	ldr	r2, [r2, #4]
 8008842:	b2d2      	uxtb	r2, r2
 8008844:	4611      	mov	r1, r2
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	4798      	blx	r3
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d001      	beq.n	8008854 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008850:	2303      	movs	r3, #3
 8008852:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008854:	2340      	movs	r3, #64	; 0x40
 8008856:	2200      	movs	r2, #0
 8008858:	2100      	movs	r1, #0
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f001 fbff 	bl	800a05e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2240      	movs	r2, #64	; 0x40
 800886c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008870:	2340      	movs	r3, #64	; 0x40
 8008872:	2200      	movs	r2, #0
 8008874:	2180      	movs	r1, #128	; 0x80
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f001 fbf1 	bl	800a05e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2240      	movs	r2, #64	; 0x40
 8008886:	621a      	str	r2, [r3, #32]

  return ret;
 8008888:	7bfb      	ldrb	r3, [r7, #15]
}
 800888a:	4618      	mov	r0, r3
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008892:	b480      	push	{r7}
 8008894:	b083      	sub	sp, #12
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	460b      	mov	r3, r1
 800889c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	78fa      	ldrb	r2, [r7, #3]
 80088a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80088b2:	b480      	push	{r7}
 80088b4:	b083      	sub	sp, #12
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088c0:	b2da      	uxtb	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2204      	movs	r2, #4
 80088cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80088de:	b480      	push	{r7}
 80088e0:	b083      	sub	sp, #12
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	2b04      	cmp	r3, #4
 80088f0:	d106      	bne.n	8008900 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	370c      	adds	r7, #12
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr

0800890e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b082      	sub	sp, #8
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b03      	cmp	r3, #3
 8008920:	d110      	bne.n	8008944 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00b      	beq.n	8008944 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d005      	beq.n	8008944 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800893e:	69db      	ldr	r3, [r3, #28]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b082      	sub	sp, #8
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	460b      	mov	r3, r1
 8008958:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	32ae      	adds	r2, #174	; 0xae
 8008964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d101      	bne.n	8008970 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800896c:	2303      	movs	r3, #3
 800896e:	e01c      	b.n	80089aa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b03      	cmp	r3, #3
 800897a:	d115      	bne.n	80089a8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	32ae      	adds	r2, #174	; 0xae
 8008986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800898a:	6a1b      	ldr	r3, [r3, #32]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00b      	beq.n	80089a8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	32ae      	adds	r2, #174	; 0xae
 800899a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800899e:	6a1b      	ldr	r3, [r3, #32]
 80089a0:	78fa      	ldrb	r2, [r7, #3]
 80089a2:	4611      	mov	r1, r2
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b082      	sub	sp, #8
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	460b      	mov	r3, r1
 80089bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	32ae      	adds	r2, #174	; 0xae
 80089c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d101      	bne.n	80089d4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e01c      	b.n	8008a0e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	2b03      	cmp	r3, #3
 80089de:	d115      	bne.n	8008a0c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	32ae      	adds	r2, #174	; 0xae
 80089ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00b      	beq.n	8008a0c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	32ae      	adds	r2, #174	; 0xae
 80089fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a04:	78fa      	ldrb	r2, [r7, #3]
 8008a06:	4611      	mov	r1, r2
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b083      	sub	sp, #12
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008a34:	2300      	movs	r3, #0
 8008a36:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00e      	beq.n	8008a68 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	6852      	ldr	r2, [r2, #4]
 8008a56:	b2d2      	uxtb	r2, r2
 8008a58:	4611      	mov	r1, r2
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	4798      	blx	r3
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d001      	beq.n	8008a68 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008a64:	2303      	movs	r3, #3
 8008a66:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008a72:	b480      	push	{r7}
 8008a74:	b083      	sub	sp, #12
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008a7e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	460b      	mov	r3, r1
 8008a96:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008a98:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	370c      	adds	r7, #12
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr

08008aa6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b086      	sub	sp, #24
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	460b      	mov	r3, r1
 8008ab0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008aba:	2300      	movs	r3, #0
 8008abc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	885b      	ldrh	r3, [r3, #2]
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d920      	bls.n	8008b10 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008ad6:	e013      	b.n	8008b00 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008ad8:	f107 030a 	add.w	r3, r7, #10
 8008adc:	4619      	mov	r1, r3
 8008ade:	6978      	ldr	r0, [r7, #20]
 8008ae0:	f000 f81b 	bl	8008b1a <USBD_GetNextDesc>
 8008ae4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	785b      	ldrb	r3, [r3, #1]
 8008aea:	2b05      	cmp	r3, #5
 8008aec:	d108      	bne.n	8008b00 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	789b      	ldrb	r3, [r3, #2]
 8008af6:	78fa      	ldrb	r2, [r7, #3]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d008      	beq.n	8008b0e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008afc:	2300      	movs	r3, #0
 8008afe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	885b      	ldrh	r3, [r3, #2]
 8008b04:	b29a      	uxth	r2, r3
 8008b06:	897b      	ldrh	r3, [r7, #10]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d8e5      	bhi.n	8008ad8 <USBD_GetEpDesc+0x32>
 8008b0c:	e000      	b.n	8008b10 <USBD_GetEpDesc+0x6a>
          break;
 8008b0e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008b10:	693b      	ldr	r3, [r7, #16]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3718      	adds	r7, #24
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b085      	sub	sp, #20
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
 8008b22:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	881a      	ldrh	r2, [r3, #0]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	4413      	add	r3, r2
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	461a      	mov	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4413      	add	r3, r2
 8008b44:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008b46:	68fb      	ldr	r3, [r7, #12]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b087      	sub	sp, #28
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008b72:	8a3b      	ldrh	r3, [r7, #16]
 8008b74:	021b      	lsls	r3, r3, #8
 8008b76:	b21a      	sxth	r2, r3
 8008b78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	b21b      	sxth	r3, r3
 8008b80:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008b82:	89fb      	ldrh	r3, [r7, #14]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	371c      	adds	r7, #28
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ba6:	2b40      	cmp	r3, #64	; 0x40
 8008ba8:	d005      	beq.n	8008bb6 <USBD_StdDevReq+0x26>
 8008baa:	2b40      	cmp	r3, #64	; 0x40
 8008bac:	d857      	bhi.n	8008c5e <USBD_StdDevReq+0xce>
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00f      	beq.n	8008bd2 <USBD_StdDevReq+0x42>
 8008bb2:	2b20      	cmp	r3, #32
 8008bb4:	d153      	bne.n	8008c5e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	32ae      	adds	r2, #174	; 0xae
 8008bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	6839      	ldr	r1, [r7, #0]
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	4798      	blx	r3
 8008bcc:	4603      	mov	r3, r0
 8008bce:	73fb      	strb	r3, [r7, #15]
      break;
 8008bd0:	e04a      	b.n	8008c68 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	785b      	ldrb	r3, [r3, #1]
 8008bd6:	2b09      	cmp	r3, #9
 8008bd8:	d83b      	bhi.n	8008c52 <USBD_StdDevReq+0xc2>
 8008bda:	a201      	add	r2, pc, #4	; (adr r2, 8008be0 <USBD_StdDevReq+0x50>)
 8008bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be0:	08008c35 	.word	0x08008c35
 8008be4:	08008c49 	.word	0x08008c49
 8008be8:	08008c53 	.word	0x08008c53
 8008bec:	08008c3f 	.word	0x08008c3f
 8008bf0:	08008c53 	.word	0x08008c53
 8008bf4:	08008c13 	.word	0x08008c13
 8008bf8:	08008c09 	.word	0x08008c09
 8008bfc:	08008c53 	.word	0x08008c53
 8008c00:	08008c2b 	.word	0x08008c2b
 8008c04:	08008c1d 	.word	0x08008c1d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fa3c 	bl	8009088 <USBD_GetDescriptor>
          break;
 8008c10:	e024      	b.n	8008c5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008c12:	6839      	ldr	r1, [r7, #0]
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 fba1 	bl	800935c <USBD_SetAddress>
          break;
 8008c1a:	e01f      	b.n	8008c5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008c1c:	6839      	ldr	r1, [r7, #0]
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fbe0 	bl	80093e4 <USBD_SetConfig>
 8008c24:	4603      	mov	r3, r0
 8008c26:	73fb      	strb	r3, [r7, #15]
          break;
 8008c28:	e018      	b.n	8008c5c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 fc83 	bl	8009538 <USBD_GetConfig>
          break;
 8008c32:	e013      	b.n	8008c5c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008c34:	6839      	ldr	r1, [r7, #0]
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fcb4 	bl	80095a4 <USBD_GetStatus>
          break;
 8008c3c:	e00e      	b.n	8008c5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fce3 	bl	800960c <USBD_SetFeature>
          break;
 8008c46:	e009      	b.n	8008c5c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008c48:	6839      	ldr	r1, [r7, #0]
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fd07 	bl	800965e <USBD_ClrFeature>
          break;
 8008c50:	e004      	b.n	8008c5c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008c52:	6839      	ldr	r1, [r7, #0]
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fd5e 	bl	8009716 <USBD_CtlError>
          break;
 8008c5a:	bf00      	nop
      }
      break;
 8008c5c:	e004      	b.n	8008c68 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fd58 	bl	8009716 <USBD_CtlError>
      break;
 8008c66:	bf00      	nop
  }

  return ret;
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop

08008c74 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c8a:	2b40      	cmp	r3, #64	; 0x40
 8008c8c:	d005      	beq.n	8008c9a <USBD_StdItfReq+0x26>
 8008c8e:	2b40      	cmp	r3, #64	; 0x40
 8008c90:	d852      	bhi.n	8008d38 <USBD_StdItfReq+0xc4>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d001      	beq.n	8008c9a <USBD_StdItfReq+0x26>
 8008c96:	2b20      	cmp	r3, #32
 8008c98:	d14e      	bne.n	8008d38 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d840      	bhi.n	8008d2a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	889b      	ldrh	r3, [r3, #4]
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d836      	bhi.n	8008d20 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	889b      	ldrh	r3, [r3, #4]
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7ff fed9 	bl	8008a72 <USBD_CoreFindIF>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cc4:	7bbb      	ldrb	r3, [r7, #14]
 8008cc6:	2bff      	cmp	r3, #255	; 0xff
 8008cc8:	d01d      	beq.n	8008d06 <USBD_StdItfReq+0x92>
 8008cca:	7bbb      	ldrb	r3, [r7, #14]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d11a      	bne.n	8008d06 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008cd0:	7bba      	ldrb	r2, [r7, #14]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	32ae      	adds	r2, #174	; 0xae
 8008cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00f      	beq.n	8008d00 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008ce0:	7bba      	ldrb	r2, [r7, #14]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ce8:	7bba      	ldrb	r2, [r7, #14]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	32ae      	adds	r2, #174	; 0xae
 8008cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	6839      	ldr	r1, [r7, #0]
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	4798      	blx	r3
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008cfe:	e004      	b.n	8008d0a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008d00:	2303      	movs	r3, #3
 8008d02:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008d04:	e001      	b.n	8008d0a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008d06:	2303      	movs	r3, #3
 8008d08:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	88db      	ldrh	r3, [r3, #6]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d110      	bne.n	8008d34 <USBD_StdItfReq+0xc0>
 8008d12:	7bfb      	ldrb	r3, [r7, #15]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10d      	bne.n	8008d34 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fdc7 	bl	80098ac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008d1e:	e009      	b.n	8008d34 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fcf7 	bl	8009716 <USBD_CtlError>
          break;
 8008d28:	e004      	b.n	8008d34 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008d2a:	6839      	ldr	r1, [r7, #0]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 fcf2 	bl	8009716 <USBD_CtlError>
          break;
 8008d32:	e000      	b.n	8008d36 <USBD_StdItfReq+0xc2>
          break;
 8008d34:	bf00      	nop
      }
      break;
 8008d36:	e004      	b.n	8008d42 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008d38:	6839      	ldr	r1, [r7, #0]
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fceb 	bl	8009716 <USBD_CtlError>
      break;
 8008d40:	bf00      	nop
  }

  return ret;
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d56:	2300      	movs	r3, #0
 8008d58:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	889b      	ldrh	r3, [r3, #4]
 8008d5e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d68:	2b40      	cmp	r3, #64	; 0x40
 8008d6a:	d007      	beq.n	8008d7c <USBD_StdEPReq+0x30>
 8008d6c:	2b40      	cmp	r3, #64	; 0x40
 8008d6e:	f200 817f 	bhi.w	8009070 <USBD_StdEPReq+0x324>
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d02a      	beq.n	8008dcc <USBD_StdEPReq+0x80>
 8008d76:	2b20      	cmp	r3, #32
 8008d78:	f040 817a 	bne.w	8009070 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008d7c:	7bbb      	ldrb	r3, [r7, #14]
 8008d7e:	4619      	mov	r1, r3
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f7ff fe83 	bl	8008a8c <USBD_CoreFindEP>
 8008d86:	4603      	mov	r3, r0
 8008d88:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d8a:	7b7b      	ldrb	r3, [r7, #13]
 8008d8c:	2bff      	cmp	r3, #255	; 0xff
 8008d8e:	f000 8174 	beq.w	800907a <USBD_StdEPReq+0x32e>
 8008d92:	7b7b      	ldrb	r3, [r7, #13]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f040 8170 	bne.w	800907a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008d9a:	7b7a      	ldrb	r2, [r7, #13]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008da2:	7b7a      	ldrb	r2, [r7, #13]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	32ae      	adds	r2, #174	; 0xae
 8008da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	f000 8163 	beq.w	800907a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008db4:	7b7a      	ldrb	r2, [r7, #13]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	32ae      	adds	r2, #174	; 0xae
 8008dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	6839      	ldr	r1, [r7, #0]
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	4798      	blx	r3
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008dca:	e156      	b.n	800907a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	785b      	ldrb	r3, [r3, #1]
 8008dd0:	2b03      	cmp	r3, #3
 8008dd2:	d008      	beq.n	8008de6 <USBD_StdEPReq+0x9a>
 8008dd4:	2b03      	cmp	r3, #3
 8008dd6:	f300 8145 	bgt.w	8009064 <USBD_StdEPReq+0x318>
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f000 809b 	beq.w	8008f16 <USBD_StdEPReq+0x1ca>
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d03c      	beq.n	8008e5e <USBD_StdEPReq+0x112>
 8008de4:	e13e      	b.n	8009064 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d002      	beq.n	8008df8 <USBD_StdEPReq+0xac>
 8008df2:	2b03      	cmp	r3, #3
 8008df4:	d016      	beq.n	8008e24 <USBD_StdEPReq+0xd8>
 8008df6:	e02c      	b.n	8008e52 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008df8:	7bbb      	ldrb	r3, [r7, #14]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00d      	beq.n	8008e1a <USBD_StdEPReq+0xce>
 8008dfe:	7bbb      	ldrb	r3, [r7, #14]
 8008e00:	2b80      	cmp	r3, #128	; 0x80
 8008e02:	d00a      	beq.n	8008e1a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e04:	7bbb      	ldrb	r3, [r7, #14]
 8008e06:	4619      	mov	r1, r3
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f001 f96d 	bl	800a0e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e0e:	2180      	movs	r1, #128	; 0x80
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f001 f969 	bl	800a0e8 <USBD_LL_StallEP>
 8008e16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e18:	e020      	b.n	8008e5c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008e1a:	6839      	ldr	r1, [r7, #0]
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 fc7a 	bl	8009716 <USBD_CtlError>
              break;
 8008e22:	e01b      	b.n	8008e5c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	885b      	ldrh	r3, [r3, #2]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10e      	bne.n	8008e4a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008e2c:	7bbb      	ldrb	r3, [r7, #14]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00b      	beq.n	8008e4a <USBD_StdEPReq+0xfe>
 8008e32:	7bbb      	ldrb	r3, [r7, #14]
 8008e34:	2b80      	cmp	r3, #128	; 0x80
 8008e36:	d008      	beq.n	8008e4a <USBD_StdEPReq+0xfe>
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	88db      	ldrh	r3, [r3, #6]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d104      	bne.n	8008e4a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e40:	7bbb      	ldrb	r3, [r7, #14]
 8008e42:	4619      	mov	r1, r3
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f001 f94f 	bl	800a0e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fd2e 	bl	80098ac <USBD_CtlSendStatus>

              break;
 8008e50:	e004      	b.n	8008e5c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008e52:	6839      	ldr	r1, [r7, #0]
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fc5e 	bl	8009716 <USBD_CtlError>
              break;
 8008e5a:	bf00      	nop
          }
          break;
 8008e5c:	e107      	b.n	800906e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d002      	beq.n	8008e70 <USBD_StdEPReq+0x124>
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	d016      	beq.n	8008e9c <USBD_StdEPReq+0x150>
 8008e6e:	e04b      	b.n	8008f08 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e70:	7bbb      	ldrb	r3, [r7, #14]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00d      	beq.n	8008e92 <USBD_StdEPReq+0x146>
 8008e76:	7bbb      	ldrb	r3, [r7, #14]
 8008e78:	2b80      	cmp	r3, #128	; 0x80
 8008e7a:	d00a      	beq.n	8008e92 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e7c:	7bbb      	ldrb	r3, [r7, #14]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f001 f931 	bl	800a0e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e86:	2180      	movs	r1, #128	; 0x80
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f001 f92d 	bl	800a0e8 <USBD_LL_StallEP>
 8008e8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e90:	e040      	b.n	8008f14 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008e92:	6839      	ldr	r1, [r7, #0]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 fc3e 	bl	8009716 <USBD_CtlError>
              break;
 8008e9a:	e03b      	b.n	8008f14 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	885b      	ldrh	r3, [r3, #2]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d136      	bne.n	8008f12 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ea4:	7bbb      	ldrb	r3, [r7, #14]
 8008ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d004      	beq.n	8008eb8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008eae:	7bbb      	ldrb	r3, [r7, #14]
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f001 f937 	bl	800a126 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 fcf7 	bl	80098ac <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ebe:	7bbb      	ldrb	r3, [r7, #14]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff fde2 	bl	8008a8c <USBD_CoreFindEP>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ecc:	7b7b      	ldrb	r3, [r7, #13]
 8008ece:	2bff      	cmp	r3, #255	; 0xff
 8008ed0:	d01f      	beq.n	8008f12 <USBD_StdEPReq+0x1c6>
 8008ed2:	7b7b      	ldrb	r3, [r7, #13]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d11c      	bne.n	8008f12 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008ed8:	7b7a      	ldrb	r2, [r7, #13]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008ee0:	7b7a      	ldrb	r2, [r7, #13]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	32ae      	adds	r2, #174	; 0xae
 8008ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d010      	beq.n	8008f12 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ef0:	7b7a      	ldrb	r2, [r7, #13]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	32ae      	adds	r2, #174	; 0xae
 8008ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	6839      	ldr	r1, [r7, #0]
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	4798      	blx	r3
 8008f02:	4603      	mov	r3, r0
 8008f04:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008f06:	e004      	b.n	8008f12 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008f08:	6839      	ldr	r1, [r7, #0]
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fc03 	bl	8009716 <USBD_CtlError>
              break;
 8008f10:	e000      	b.n	8008f14 <USBD_StdEPReq+0x1c8>
              break;
 8008f12:	bf00      	nop
          }
          break;
 8008f14:	e0ab      	b.n	800906e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d002      	beq.n	8008f28 <USBD_StdEPReq+0x1dc>
 8008f22:	2b03      	cmp	r3, #3
 8008f24:	d032      	beq.n	8008f8c <USBD_StdEPReq+0x240>
 8008f26:	e097      	b.n	8009058 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f28:	7bbb      	ldrb	r3, [r7, #14]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d007      	beq.n	8008f3e <USBD_StdEPReq+0x1f2>
 8008f2e:	7bbb      	ldrb	r3, [r7, #14]
 8008f30:	2b80      	cmp	r3, #128	; 0x80
 8008f32:	d004      	beq.n	8008f3e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008f34:	6839      	ldr	r1, [r7, #0]
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fbed 	bl	8009716 <USBD_CtlError>
                break;
 8008f3c:	e091      	b.n	8009062 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	da0b      	bge.n	8008f5e <USBD_StdEPReq+0x212>
 8008f46:	7bbb      	ldrb	r3, [r7, #14]
 8008f48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	4413      	add	r3, r2
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	3310      	adds	r3, #16
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	4413      	add	r3, r2
 8008f5a:	3304      	adds	r3, #4
 8008f5c:	e00b      	b.n	8008f76 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f5e:	7bbb      	ldrb	r3, [r7, #14]
 8008f60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f64:	4613      	mov	r3, r2
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	4413      	add	r3, r2
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	4413      	add	r3, r2
 8008f74:	3304      	adds	r3, #4
 8008f76:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2202      	movs	r2, #2
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fc37 	bl	80097f8 <USBD_CtlSendData>
              break;
 8008f8a:	e06a      	b.n	8009062 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008f8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	da11      	bge.n	8008fb8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f94:	7bbb      	ldrb	r3, [r7, #14]
 8008f96:	f003 020f 	and.w	r2, r3, #15
 8008f9a:	6879      	ldr	r1, [r7, #4]
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	440b      	add	r3, r1
 8008fa6:	3324      	adds	r3, #36	; 0x24
 8008fa8:	881b      	ldrh	r3, [r3, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d117      	bne.n	8008fde <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008fae:	6839      	ldr	r1, [r7, #0]
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 fbb0 	bl	8009716 <USBD_CtlError>
                  break;
 8008fb6:	e054      	b.n	8009062 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008fb8:	7bbb      	ldrb	r3, [r7, #14]
 8008fba:	f003 020f 	and.w	r2, r3, #15
 8008fbe:	6879      	ldr	r1, [r7, #4]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4413      	add	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	440b      	add	r3, r1
 8008fca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008fce:	881b      	ldrh	r3, [r3, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d104      	bne.n	8008fde <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008fd4:	6839      	ldr	r1, [r7, #0]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 fb9d 	bl	8009716 <USBD_CtlError>
                  break;
 8008fdc:	e041      	b.n	8009062 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	da0b      	bge.n	8008ffe <USBD_StdEPReq+0x2b2>
 8008fe6:	7bbb      	ldrb	r3, [r7, #14]
 8008fe8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fec:	4613      	mov	r3, r2
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	4413      	add	r3, r2
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	3310      	adds	r3, #16
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	3304      	adds	r3, #4
 8008ffc:	e00b      	b.n	8009016 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ffe:	7bbb      	ldrb	r3, [r7, #14]
 8009000:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009004:	4613      	mov	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	4413      	add	r3, r2
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	4413      	add	r3, r2
 8009014:	3304      	adds	r3, #4
 8009016:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009018:	7bbb      	ldrb	r3, [r7, #14]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d002      	beq.n	8009024 <USBD_StdEPReq+0x2d8>
 800901e:	7bbb      	ldrb	r3, [r7, #14]
 8009020:	2b80      	cmp	r3, #128	; 0x80
 8009022:	d103      	bne.n	800902c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	2200      	movs	r2, #0
 8009028:	601a      	str	r2, [r3, #0]
 800902a:	e00e      	b.n	800904a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800902c:	7bbb      	ldrb	r3, [r7, #14]
 800902e:	4619      	mov	r1, r3
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f001 f897 	bl	800a164 <USBD_LL_IsStallEP>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d003      	beq.n	8009044 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	2201      	movs	r2, #1
 8009040:	601a      	str	r2, [r3, #0]
 8009042:	e002      	b.n	800904a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	2200      	movs	r2, #0
 8009048:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	2202      	movs	r2, #2
 800904e:	4619      	mov	r1, r3
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 fbd1 	bl	80097f8 <USBD_CtlSendData>
              break;
 8009056:	e004      	b.n	8009062 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009058:	6839      	ldr	r1, [r7, #0]
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fb5b 	bl	8009716 <USBD_CtlError>
              break;
 8009060:	bf00      	nop
          }
          break;
 8009062:	e004      	b.n	800906e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fb55 	bl	8009716 <USBD_CtlError>
          break;
 800906c:	bf00      	nop
      }
      break;
 800906e:	e005      	b.n	800907c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009070:	6839      	ldr	r1, [r7, #0]
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 fb4f 	bl	8009716 <USBD_CtlError>
      break;
 8009078:	e000      	b.n	800907c <USBD_StdEPReq+0x330>
      break;
 800907a:	bf00      	nop
  }

  return ret;
 800907c:	7bfb      	ldrb	r3, [r7, #15]
}
 800907e:	4618      	mov	r0, r3
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
	...

08009088 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009092:	2300      	movs	r3, #0
 8009094:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009096:	2300      	movs	r3, #0
 8009098:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800909a:	2300      	movs	r3, #0
 800909c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	885b      	ldrh	r3, [r3, #2]
 80090a2:	0a1b      	lsrs	r3, r3, #8
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	3b01      	subs	r3, #1
 80090a8:	2b06      	cmp	r3, #6
 80090aa:	f200 8128 	bhi.w	80092fe <USBD_GetDescriptor+0x276>
 80090ae:	a201      	add	r2, pc, #4	; (adr r2, 80090b4 <USBD_GetDescriptor+0x2c>)
 80090b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b4:	080090d1 	.word	0x080090d1
 80090b8:	080090e9 	.word	0x080090e9
 80090bc:	08009129 	.word	0x08009129
 80090c0:	080092ff 	.word	0x080092ff
 80090c4:	080092ff 	.word	0x080092ff
 80090c8:	0800929f 	.word	0x0800929f
 80090cc:	080092cb 	.word	0x080092cb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	7c12      	ldrb	r2, [r2, #16]
 80090dc:	f107 0108 	add.w	r1, r7, #8
 80090e0:	4610      	mov	r0, r2
 80090e2:	4798      	blx	r3
 80090e4:	60f8      	str	r0, [r7, #12]
      break;
 80090e6:	e112      	b.n	800930e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	7c1b      	ldrb	r3, [r3, #16]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10d      	bne.n	800910c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f8:	f107 0208 	add.w	r2, r7, #8
 80090fc:	4610      	mov	r0, r2
 80090fe:	4798      	blx	r3
 8009100:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	3301      	adds	r3, #1
 8009106:	2202      	movs	r2, #2
 8009108:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800910a:	e100      	b.n	800930e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009114:	f107 0208 	add.w	r2, r7, #8
 8009118:	4610      	mov	r0, r2
 800911a:	4798      	blx	r3
 800911c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	3301      	adds	r3, #1
 8009122:	2202      	movs	r2, #2
 8009124:	701a      	strb	r2, [r3, #0]
      break;
 8009126:	e0f2      	b.n	800930e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	885b      	ldrh	r3, [r3, #2]
 800912c:	b2db      	uxtb	r3, r3
 800912e:	2b05      	cmp	r3, #5
 8009130:	f200 80ac 	bhi.w	800928c <USBD_GetDescriptor+0x204>
 8009134:	a201      	add	r2, pc, #4	; (adr r2, 800913c <USBD_GetDescriptor+0xb4>)
 8009136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913a:	bf00      	nop
 800913c:	08009155 	.word	0x08009155
 8009140:	08009189 	.word	0x08009189
 8009144:	080091bd 	.word	0x080091bd
 8009148:	080091f1 	.word	0x080091f1
 800914c:	08009225 	.word	0x08009225
 8009150:	08009259 	.word	0x08009259
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00b      	beq.n	8009178 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	7c12      	ldrb	r2, [r2, #16]
 800916c:	f107 0108 	add.w	r1, r7, #8
 8009170:	4610      	mov	r0, r2
 8009172:	4798      	blx	r3
 8009174:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009176:	e091      	b.n	800929c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009178:	6839      	ldr	r1, [r7, #0]
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 facb 	bl	8009716 <USBD_CtlError>
            err++;
 8009180:	7afb      	ldrb	r3, [r7, #11]
 8009182:	3301      	adds	r3, #1
 8009184:	72fb      	strb	r3, [r7, #11]
          break;
 8009186:	e089      	b.n	800929c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00b      	beq.n	80091ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	7c12      	ldrb	r2, [r2, #16]
 80091a0:	f107 0108 	add.w	r1, r7, #8
 80091a4:	4610      	mov	r0, r2
 80091a6:	4798      	blx	r3
 80091a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091aa:	e077      	b.n	800929c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091ac:	6839      	ldr	r1, [r7, #0]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fab1 	bl	8009716 <USBD_CtlError>
            err++;
 80091b4:	7afb      	ldrb	r3, [r7, #11]
 80091b6:	3301      	adds	r3, #1
 80091b8:	72fb      	strb	r3, [r7, #11]
          break;
 80091ba:	e06f      	b.n	800929c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00b      	beq.n	80091e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	7c12      	ldrb	r2, [r2, #16]
 80091d4:	f107 0108 	add.w	r1, r7, #8
 80091d8:	4610      	mov	r0, r2
 80091da:	4798      	blx	r3
 80091dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091de:	e05d      	b.n	800929c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fa97 	bl	8009716 <USBD_CtlError>
            err++;
 80091e8:	7afb      	ldrb	r3, [r7, #11]
 80091ea:	3301      	adds	r3, #1
 80091ec:	72fb      	strb	r3, [r7, #11]
          break;
 80091ee:	e055      	b.n	800929c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00b      	beq.n	8009214 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	7c12      	ldrb	r2, [r2, #16]
 8009208:	f107 0108 	add.w	r1, r7, #8
 800920c:	4610      	mov	r0, r2
 800920e:	4798      	blx	r3
 8009210:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009212:	e043      	b.n	800929c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009214:	6839      	ldr	r1, [r7, #0]
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 fa7d 	bl	8009716 <USBD_CtlError>
            err++;
 800921c:	7afb      	ldrb	r3, [r7, #11]
 800921e:	3301      	adds	r3, #1
 8009220:	72fb      	strb	r3, [r7, #11]
          break;
 8009222:	e03b      	b.n	800929c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800922a:	695b      	ldr	r3, [r3, #20]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00b      	beq.n	8009248 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009236:	695b      	ldr	r3, [r3, #20]
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	7c12      	ldrb	r2, [r2, #16]
 800923c:	f107 0108 	add.w	r1, r7, #8
 8009240:	4610      	mov	r0, r2
 8009242:	4798      	blx	r3
 8009244:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009246:	e029      	b.n	800929c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009248:	6839      	ldr	r1, [r7, #0]
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fa63 	bl	8009716 <USBD_CtlError>
            err++;
 8009250:	7afb      	ldrb	r3, [r7, #11]
 8009252:	3301      	adds	r3, #1
 8009254:	72fb      	strb	r3, [r7, #11]
          break;
 8009256:	e021      	b.n	800929c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00b      	beq.n	800927c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800926a:	699b      	ldr	r3, [r3, #24]
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	7c12      	ldrb	r2, [r2, #16]
 8009270:	f107 0108 	add.w	r1, r7, #8
 8009274:	4610      	mov	r0, r2
 8009276:	4798      	blx	r3
 8009278:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800927a:	e00f      	b.n	800929c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fa49 	bl	8009716 <USBD_CtlError>
            err++;
 8009284:	7afb      	ldrb	r3, [r7, #11]
 8009286:	3301      	adds	r3, #1
 8009288:	72fb      	strb	r3, [r7, #11]
          break;
 800928a:	e007      	b.n	800929c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800928c:	6839      	ldr	r1, [r7, #0]
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fa41 	bl	8009716 <USBD_CtlError>
          err++;
 8009294:	7afb      	ldrb	r3, [r7, #11]
 8009296:	3301      	adds	r3, #1
 8009298:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800929a:	bf00      	nop
      }
      break;
 800929c:	e037      	b.n	800930e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	7c1b      	ldrb	r3, [r3, #16]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d109      	bne.n	80092ba <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ae:	f107 0208 	add.w	r2, r7, #8
 80092b2:	4610      	mov	r0, r2
 80092b4:	4798      	blx	r3
 80092b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092b8:	e029      	b.n	800930e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80092ba:	6839      	ldr	r1, [r7, #0]
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 fa2a 	bl	8009716 <USBD_CtlError>
        err++;
 80092c2:	7afb      	ldrb	r3, [r7, #11]
 80092c4:	3301      	adds	r3, #1
 80092c6:	72fb      	strb	r3, [r7, #11]
      break;
 80092c8:	e021      	b.n	800930e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	7c1b      	ldrb	r3, [r3, #16]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10d      	bne.n	80092ee <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092da:	f107 0208 	add.w	r2, r7, #8
 80092de:	4610      	mov	r0, r2
 80092e0:	4798      	blx	r3
 80092e2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	3301      	adds	r3, #1
 80092e8:	2207      	movs	r2, #7
 80092ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092ec:	e00f      	b.n	800930e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fa10 	bl	8009716 <USBD_CtlError>
        err++;
 80092f6:	7afb      	ldrb	r3, [r7, #11]
 80092f8:	3301      	adds	r3, #1
 80092fa:	72fb      	strb	r3, [r7, #11]
      break;
 80092fc:	e007      	b.n	800930e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80092fe:	6839      	ldr	r1, [r7, #0]
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 fa08 	bl	8009716 <USBD_CtlError>
      err++;
 8009306:	7afb      	ldrb	r3, [r7, #11]
 8009308:	3301      	adds	r3, #1
 800930a:	72fb      	strb	r3, [r7, #11]
      break;
 800930c:	bf00      	nop
  }

  if (err != 0U)
 800930e:	7afb      	ldrb	r3, [r7, #11]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d11e      	bne.n	8009352 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	88db      	ldrh	r3, [r3, #6]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d016      	beq.n	800934a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800931c:	893b      	ldrh	r3, [r7, #8]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00e      	beq.n	8009340 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	88da      	ldrh	r2, [r3, #6]
 8009326:	893b      	ldrh	r3, [r7, #8]
 8009328:	4293      	cmp	r3, r2
 800932a:	bf28      	it	cs
 800932c:	4613      	movcs	r3, r2
 800932e:	b29b      	uxth	r3, r3
 8009330:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009332:	893b      	ldrh	r3, [r7, #8]
 8009334:	461a      	mov	r2, r3
 8009336:	68f9      	ldr	r1, [r7, #12]
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 fa5d 	bl	80097f8 <USBD_CtlSendData>
 800933e:	e009      	b.n	8009354 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009340:	6839      	ldr	r1, [r7, #0]
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f9e7 	bl	8009716 <USBD_CtlError>
 8009348:	e004      	b.n	8009354 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 faae 	bl	80098ac <USBD_CtlSendStatus>
 8009350:	e000      	b.n	8009354 <USBD_GetDescriptor+0x2cc>
    return;
 8009352:	bf00      	nop
  }
}
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop

0800935c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	889b      	ldrh	r3, [r3, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d131      	bne.n	80093d2 <USBD_SetAddress+0x76>
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	88db      	ldrh	r3, [r3, #6]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d12d      	bne.n	80093d2 <USBD_SetAddress+0x76>
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	885b      	ldrh	r3, [r3, #2]
 800937a:	2b7f      	cmp	r3, #127	; 0x7f
 800937c:	d829      	bhi.n	80093d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	885b      	ldrh	r3, [r3, #2]
 8009382:	b2db      	uxtb	r3, r3
 8009384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009388:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009390:	b2db      	uxtb	r3, r3
 8009392:	2b03      	cmp	r3, #3
 8009394:	d104      	bne.n	80093a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009396:	6839      	ldr	r1, [r7, #0]
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 f9bc 	bl	8009716 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800939e:	e01d      	b.n	80093dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	7bfa      	ldrb	r2, [r7, #15]
 80093a4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
 80093aa:	4619      	mov	r1, r3
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 ff05 	bl	800a1bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 fa7a 	bl	80098ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80093b8:	7bfb      	ldrb	r3, [r7, #15]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d004      	beq.n	80093c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2202      	movs	r2, #2
 80093c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093c6:	e009      	b.n	80093dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093d0:	e004      	b.n	80093dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80093d2:	6839      	ldr	r1, [r7, #0]
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f99e 	bl	8009716 <USBD_CtlError>
  }
}
 80093da:	bf00      	nop
 80093dc:	bf00      	nop
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093ee:	2300      	movs	r3, #0
 80093f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	885b      	ldrh	r3, [r3, #2]
 80093f6:	b2da      	uxtb	r2, r3
 80093f8:	4b4e      	ldr	r3, [pc, #312]	; (8009534 <USBD_SetConfig+0x150>)
 80093fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80093fc:	4b4d      	ldr	r3, [pc, #308]	; (8009534 <USBD_SetConfig+0x150>)
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	2b01      	cmp	r3, #1
 8009402:	d905      	bls.n	8009410 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009404:	6839      	ldr	r1, [r7, #0]
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f985 	bl	8009716 <USBD_CtlError>
    return USBD_FAIL;
 800940c:	2303      	movs	r3, #3
 800940e:	e08c      	b.n	800952a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009416:	b2db      	uxtb	r3, r3
 8009418:	2b02      	cmp	r3, #2
 800941a:	d002      	beq.n	8009422 <USBD_SetConfig+0x3e>
 800941c:	2b03      	cmp	r3, #3
 800941e:	d029      	beq.n	8009474 <USBD_SetConfig+0x90>
 8009420:	e075      	b.n	800950e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009422:	4b44      	ldr	r3, [pc, #272]	; (8009534 <USBD_SetConfig+0x150>)
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d020      	beq.n	800946c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800942a:	4b42      	ldr	r3, [pc, #264]	; (8009534 <USBD_SetConfig+0x150>)
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	461a      	mov	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009434:	4b3f      	ldr	r3, [pc, #252]	; (8009534 <USBD_SetConfig+0x150>)
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f7fe ffe7 	bl	800840e <USBD_SetClassConfig>
 8009440:	4603      	mov	r3, r0
 8009442:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009444:	7bfb      	ldrb	r3, [r7, #15]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d008      	beq.n	800945c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800944a:	6839      	ldr	r1, [r7, #0]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f962 	bl	8009716 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2202      	movs	r2, #2
 8009456:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800945a:	e065      	b.n	8009528 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fa25 	bl	80098ac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2203      	movs	r2, #3
 8009466:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800946a:	e05d      	b.n	8009528 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 fa1d 	bl	80098ac <USBD_CtlSendStatus>
      break;
 8009472:	e059      	b.n	8009528 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009474:	4b2f      	ldr	r3, [pc, #188]	; (8009534 <USBD_SetConfig+0x150>)
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d112      	bne.n	80094a2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2202      	movs	r2, #2
 8009480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009484:	4b2b      	ldr	r3, [pc, #172]	; (8009534 <USBD_SetConfig+0x150>)
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	461a      	mov	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800948e:	4b29      	ldr	r3, [pc, #164]	; (8009534 <USBD_SetConfig+0x150>)
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7fe ffd6 	bl	8008446 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fa06 	bl	80098ac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80094a0:	e042      	b.n	8009528 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80094a2:	4b24      	ldr	r3, [pc, #144]	; (8009534 <USBD_SetConfig+0x150>)
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d02a      	beq.n	8009506 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	4619      	mov	r1, r3
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f7fe ffc4 	bl	8008446 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80094be:	4b1d      	ldr	r3, [pc, #116]	; (8009534 <USBD_SetConfig+0x150>)
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	461a      	mov	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80094c8:	4b1a      	ldr	r3, [pc, #104]	; (8009534 <USBD_SetConfig+0x150>)
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	4619      	mov	r1, r3
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f7fe ff9d 	bl	800840e <USBD_SetClassConfig>
 80094d4:	4603      	mov	r3, r0
 80094d6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80094d8:	7bfb      	ldrb	r3, [r7, #15]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00f      	beq.n	80094fe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f918 	bl	8009716 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	4619      	mov	r1, r3
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7fe ffa9 	bl	8008446 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2202      	movs	r2, #2
 80094f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80094fc:	e014      	b.n	8009528 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f9d4 	bl	80098ac <USBD_CtlSendStatus>
      break;
 8009504:	e010      	b.n	8009528 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 f9d0 	bl	80098ac <USBD_CtlSendStatus>
      break;
 800950c:	e00c      	b.n	8009528 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 f900 	bl	8009716 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009516:	4b07      	ldr	r3, [pc, #28]	; (8009534 <USBD_SetConfig+0x150>)
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	4619      	mov	r1, r3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7fe ff92 	bl	8008446 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009522:	2303      	movs	r3, #3
 8009524:	73fb      	strb	r3, [r7, #15]
      break;
 8009526:	bf00      	nop
  }

  return ret;
 8009528:	7bfb      	ldrb	r3, [r7, #15]
}
 800952a:	4618      	mov	r0, r3
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	2000038c 	.word	0x2000038c

08009538 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	88db      	ldrh	r3, [r3, #6]
 8009546:	2b01      	cmp	r3, #1
 8009548:	d004      	beq.n	8009554 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f8e2 	bl	8009716 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009552:	e023      	b.n	800959c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800955a:	b2db      	uxtb	r3, r3
 800955c:	2b02      	cmp	r3, #2
 800955e:	dc02      	bgt.n	8009566 <USBD_GetConfig+0x2e>
 8009560:	2b00      	cmp	r3, #0
 8009562:	dc03      	bgt.n	800956c <USBD_GetConfig+0x34>
 8009564:	e015      	b.n	8009592 <USBD_GetConfig+0x5a>
 8009566:	2b03      	cmp	r3, #3
 8009568:	d00b      	beq.n	8009582 <USBD_GetConfig+0x4a>
 800956a:	e012      	b.n	8009592 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	3308      	adds	r3, #8
 8009576:	2201      	movs	r2, #1
 8009578:	4619      	mov	r1, r3
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 f93c 	bl	80097f8 <USBD_CtlSendData>
        break;
 8009580:	e00c      	b.n	800959c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	3304      	adds	r3, #4
 8009586:	2201      	movs	r2, #1
 8009588:	4619      	mov	r1, r3
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f934 	bl	80097f8 <USBD_CtlSendData>
        break;
 8009590:	e004      	b.n	800959c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009592:	6839      	ldr	r1, [r7, #0]
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f8be 	bl	8009716 <USBD_CtlError>
        break;
 800959a:	bf00      	nop
}
 800959c:	bf00      	nop
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	3b01      	subs	r3, #1
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d81e      	bhi.n	80095fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	88db      	ldrh	r3, [r3, #6]
 80095c0:	2b02      	cmp	r3, #2
 80095c2:	d004      	beq.n	80095ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80095c4:	6839      	ldr	r1, [r7, #0]
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f8a5 	bl	8009716 <USBD_CtlError>
        break;
 80095cc:	e01a      	b.n	8009604 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2201      	movs	r2, #1
 80095d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d005      	beq.n	80095ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	f043 0202 	orr.w	r2, r3, #2
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	330c      	adds	r3, #12
 80095ee:	2202      	movs	r2, #2
 80095f0:	4619      	mov	r1, r3
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f900 	bl	80097f8 <USBD_CtlSendData>
      break;
 80095f8:	e004      	b.n	8009604 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80095fa:	6839      	ldr	r1, [r7, #0]
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 f88a 	bl	8009716 <USBD_CtlError>
      break;
 8009602:	bf00      	nop
  }
}
 8009604:	bf00      	nop
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	885b      	ldrh	r3, [r3, #2]
 800961a:	2b01      	cmp	r3, #1
 800961c:	d107      	bne.n	800962e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2201      	movs	r2, #1
 8009622:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 f940 	bl	80098ac <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800962c:	e013      	b.n	8009656 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	885b      	ldrh	r3, [r3, #2]
 8009632:	2b02      	cmp	r3, #2
 8009634:	d10b      	bne.n	800964e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	889b      	ldrh	r3, [r3, #4]
 800963a:	0a1b      	lsrs	r3, r3, #8
 800963c:	b29b      	uxth	r3, r3
 800963e:	b2da      	uxtb	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 f930 	bl	80098ac <USBD_CtlSendStatus>
}
 800964c:	e003      	b.n	8009656 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800964e:	6839      	ldr	r1, [r7, #0]
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 f860 	bl	8009716 <USBD_CtlError>
}
 8009656:	bf00      	nop
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b082      	sub	sp, #8
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800966e:	b2db      	uxtb	r3, r3
 8009670:	3b01      	subs	r3, #1
 8009672:	2b02      	cmp	r3, #2
 8009674:	d80b      	bhi.n	800968e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	885b      	ldrh	r3, [r3, #2]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d10c      	bne.n	8009698 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 f910 	bl	80098ac <USBD_CtlSendStatus>
      }
      break;
 800968c:	e004      	b.n	8009698 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800968e:	6839      	ldr	r1, [r7, #0]
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f840 	bl	8009716 <USBD_CtlError>
      break;
 8009696:	e000      	b.n	800969a <USBD_ClrFeature+0x3c>
      break;
 8009698:	bf00      	nop
  }
}
 800969a:	bf00      	nop
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b084      	sub	sp, #16
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
 80096aa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	781a      	ldrb	r2, [r3, #0]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	3301      	adds	r3, #1
 80096bc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	781a      	ldrb	r2, [r3, #0]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	3301      	adds	r3, #1
 80096ca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f7ff fa41 	bl	8008b54 <SWAPBYTE>
 80096d2:	4603      	mov	r3, r0
 80096d4:	461a      	mov	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	3301      	adds	r3, #1
 80096de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	3301      	adds	r3, #1
 80096e4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	f7ff fa34 	bl	8008b54 <SWAPBYTE>
 80096ec:	4603      	mov	r3, r0
 80096ee:	461a      	mov	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	3301      	adds	r3, #1
 80096f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	3301      	adds	r3, #1
 80096fe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f7ff fa27 	bl	8008b54 <SWAPBYTE>
 8009706:	4603      	mov	r3, r0
 8009708:	461a      	mov	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	80da      	strh	r2, [r3, #6]
}
 800970e:	bf00      	nop
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b082      	sub	sp, #8
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
 800971e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009720:	2180      	movs	r1, #128	; 0x80
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 fce0 	bl	800a0e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009728:	2100      	movs	r1, #0
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fcdc 	bl	800a0e8 <USBD_LL_StallEP>
}
 8009730:	bf00      	nop
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009744:	2300      	movs	r3, #0
 8009746:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d036      	beq.n	80097bc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009752:	6938      	ldr	r0, [r7, #16]
 8009754:	f000 f836 	bl	80097c4 <USBD_GetLen>
 8009758:	4603      	mov	r3, r0
 800975a:	3301      	adds	r3, #1
 800975c:	b29b      	uxth	r3, r3
 800975e:	005b      	lsls	r3, r3, #1
 8009760:	b29a      	uxth	r2, r3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009766:	7dfb      	ldrb	r3, [r7, #23]
 8009768:	68ba      	ldr	r2, [r7, #8]
 800976a:	4413      	add	r3, r2
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	7812      	ldrb	r2, [r2, #0]
 8009770:	701a      	strb	r2, [r3, #0]
  idx++;
 8009772:	7dfb      	ldrb	r3, [r7, #23]
 8009774:	3301      	adds	r3, #1
 8009776:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009778:	7dfb      	ldrb	r3, [r7, #23]
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	4413      	add	r3, r2
 800977e:	2203      	movs	r2, #3
 8009780:	701a      	strb	r2, [r3, #0]
  idx++;
 8009782:	7dfb      	ldrb	r3, [r7, #23]
 8009784:	3301      	adds	r3, #1
 8009786:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009788:	e013      	b.n	80097b2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800978a:	7dfb      	ldrb	r3, [r7, #23]
 800978c:	68ba      	ldr	r2, [r7, #8]
 800978e:	4413      	add	r3, r2
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	7812      	ldrb	r2, [r2, #0]
 8009794:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	3301      	adds	r3, #1
 800979a:	613b      	str	r3, [r7, #16]
    idx++;
 800979c:	7dfb      	ldrb	r3, [r7, #23]
 800979e:	3301      	adds	r3, #1
 80097a0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80097a2:	7dfb      	ldrb	r3, [r7, #23]
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	4413      	add	r3, r2
 80097a8:	2200      	movs	r2, #0
 80097aa:	701a      	strb	r2, [r3, #0]
    idx++;
 80097ac:	7dfb      	ldrb	r3, [r7, #23]
 80097ae:	3301      	adds	r3, #1
 80097b0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1e7      	bne.n	800978a <USBD_GetString+0x52>
 80097ba:	e000      	b.n	80097be <USBD_GetString+0x86>
    return;
 80097bc:	bf00      	nop
  }
}
 80097be:	3718      	adds	r7, #24
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b085      	sub	sp, #20
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80097cc:	2300      	movs	r3, #0
 80097ce:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80097d4:	e005      	b.n	80097e2 <USBD_GetLen+0x1e>
  {
    len++;
 80097d6:	7bfb      	ldrb	r3, [r7, #15]
 80097d8:	3301      	adds	r3, #1
 80097da:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	3301      	adds	r3, #1
 80097e0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1f5      	bne.n	80097d6 <USBD_GetLen+0x12>
  }

  return len;
 80097ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3714      	adds	r7, #20
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2202      	movs	r2, #2
 8009808:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	68ba      	ldr	r2, [r7, #8]
 800981c:	2100      	movs	r1, #0
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f000 fceb 	bl	800a1fa <USBD_LL_Transmit>

  return USBD_OK;
 8009824:	2300      	movs	r3, #0
}
 8009826:	4618      	mov	r0, r3
 8009828:	3710      	adds	r7, #16
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b084      	sub	sp, #16
 8009832:	af00      	add	r7, sp, #0
 8009834:	60f8      	str	r0, [r7, #12]
 8009836:	60b9      	str	r1, [r7, #8]
 8009838:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	68ba      	ldr	r2, [r7, #8]
 800983e:	2100      	movs	r1, #0
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f000 fcda 	bl	800a1fa <USBD_LL_Transmit>

  return USBD_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3710      	adds	r7, #16
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2203      	movs	r2, #3
 8009860:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	2100      	movs	r1, #0
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f000 fcde 	bl	800a23c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b084      	sub	sp, #16
 800988e:	af00      	add	r7, sp, #0
 8009890:	60f8      	str	r0, [r7, #12]
 8009892:	60b9      	str	r1, [r7, #8]
 8009894:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	68ba      	ldr	r2, [r7, #8]
 800989a:	2100      	movs	r1, #0
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f000 fccd 	bl	800a23c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2204      	movs	r2, #4
 80098b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80098bc:	2300      	movs	r3, #0
 80098be:	2200      	movs	r2, #0
 80098c0:	2100      	movs	r1, #0
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 fc99 	bl	800a1fa <USBD_LL_Transmit>

  return USBD_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3708      	adds	r7, #8
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b082      	sub	sp, #8
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2205      	movs	r2, #5
 80098de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098e2:	2300      	movs	r3, #0
 80098e4:	2200      	movs	r2, #0
 80098e6:	2100      	movs	r1, #0
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 fca7 	bl	800a23c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80098fc:	2200      	movs	r2, #0
 80098fe:	4912      	ldr	r1, [pc, #72]	; (8009948 <MX_USB_DEVICE_Init+0x50>)
 8009900:	4812      	ldr	r0, [pc, #72]	; (800994c <MX_USB_DEVICE_Init+0x54>)
 8009902:	f7fe fd07 	bl	8008314 <USBD_Init>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d001      	beq.n	8009910 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800990c:	f7f7 fc1c 	bl	8001148 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009910:	490f      	ldr	r1, [pc, #60]	; (8009950 <MX_USB_DEVICE_Init+0x58>)
 8009912:	480e      	ldr	r0, [pc, #56]	; (800994c <MX_USB_DEVICE_Init+0x54>)
 8009914:	f7fe fd2e 	bl	8008374 <USBD_RegisterClass>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d001      	beq.n	8009922 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800991e:	f7f7 fc13 	bl	8001148 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009922:	490c      	ldr	r1, [pc, #48]	; (8009954 <MX_USB_DEVICE_Init+0x5c>)
 8009924:	4809      	ldr	r0, [pc, #36]	; (800994c <MX_USB_DEVICE_Init+0x54>)
 8009926:	f7fe fc1f 	bl	8008168 <USBD_CDC_RegisterInterface>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009930:	f7f7 fc0a 	bl	8001148 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009934:	4805      	ldr	r0, [pc, #20]	; (800994c <MX_USB_DEVICE_Init+0x54>)
 8009936:	f7fe fd53 	bl	80083e0 <USBD_Start>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d001      	beq.n	8009944 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009940:	f7f7 fc02 	bl	8001148 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009944:	bf00      	nop
 8009946:	bd80      	pop	{r7, pc}
 8009948:	200000ac 	.word	0x200000ac
 800994c:	20000390 	.word	0x20000390
 8009950:	20000018 	.word	0x20000018
 8009954:	20000098 	.word	0x20000098

08009958 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800995c:	2200      	movs	r2, #0
 800995e:	4905      	ldr	r1, [pc, #20]	; (8009974 <CDC_Init_FS+0x1c>)
 8009960:	4805      	ldr	r0, [pc, #20]	; (8009978 <CDC_Init_FS+0x20>)
 8009962:	f7fe fc1b 	bl	800819c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009966:	4905      	ldr	r1, [pc, #20]	; (800997c <CDC_Init_FS+0x24>)
 8009968:	4803      	ldr	r0, [pc, #12]	; (8009978 <CDC_Init_FS+0x20>)
 800996a:	f7fe fc39 	bl	80081e0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800996e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009970:	4618      	mov	r0, r3
 8009972:	bd80      	pop	{r7, pc}
 8009974:	20000e6c 	.word	0x20000e6c
 8009978:	20000390 	.word	0x20000390
 800997c:	2000066c 	.word	0x2000066c

08009980 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009980:	b480      	push	{r7}
 8009982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009984:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009986:	4618      	mov	r0, r3
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	4603      	mov	r3, r0
 8009998:	6039      	str	r1, [r7, #0]
 800999a:	71fb      	strb	r3, [r7, #7]
 800999c:	4613      	mov	r3, r2
 800999e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80099a0:	79fb      	ldrb	r3, [r7, #7]
 80099a2:	2b23      	cmp	r3, #35	; 0x23
 80099a4:	d84a      	bhi.n	8009a3c <CDC_Control_FS+0xac>
 80099a6:	a201      	add	r2, pc, #4	; (adr r2, 80099ac <CDC_Control_FS+0x1c>)
 80099a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ac:	08009a3d 	.word	0x08009a3d
 80099b0:	08009a3d 	.word	0x08009a3d
 80099b4:	08009a3d 	.word	0x08009a3d
 80099b8:	08009a3d 	.word	0x08009a3d
 80099bc:	08009a3d 	.word	0x08009a3d
 80099c0:	08009a3d 	.word	0x08009a3d
 80099c4:	08009a3d 	.word	0x08009a3d
 80099c8:	08009a3d 	.word	0x08009a3d
 80099cc:	08009a3d 	.word	0x08009a3d
 80099d0:	08009a3d 	.word	0x08009a3d
 80099d4:	08009a3d 	.word	0x08009a3d
 80099d8:	08009a3d 	.word	0x08009a3d
 80099dc:	08009a3d 	.word	0x08009a3d
 80099e0:	08009a3d 	.word	0x08009a3d
 80099e4:	08009a3d 	.word	0x08009a3d
 80099e8:	08009a3d 	.word	0x08009a3d
 80099ec:	08009a3d 	.word	0x08009a3d
 80099f0:	08009a3d 	.word	0x08009a3d
 80099f4:	08009a3d 	.word	0x08009a3d
 80099f8:	08009a3d 	.word	0x08009a3d
 80099fc:	08009a3d 	.word	0x08009a3d
 8009a00:	08009a3d 	.word	0x08009a3d
 8009a04:	08009a3d 	.word	0x08009a3d
 8009a08:	08009a3d 	.word	0x08009a3d
 8009a0c:	08009a3d 	.word	0x08009a3d
 8009a10:	08009a3d 	.word	0x08009a3d
 8009a14:	08009a3d 	.word	0x08009a3d
 8009a18:	08009a3d 	.word	0x08009a3d
 8009a1c:	08009a3d 	.word	0x08009a3d
 8009a20:	08009a3d 	.word	0x08009a3d
 8009a24:	08009a3d 	.word	0x08009a3d
 8009a28:	08009a3d 	.word	0x08009a3d
 8009a2c:	08009a3d 	.word	0x08009a3d
 8009a30:	08009a3d 	.word	0x08009a3d
 8009a34:	08009a3d 	.word	0x08009a3d
 8009a38:	08009a3d 	.word	0x08009a3d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009a3c:	bf00      	nop
  }

  return (USBD_OK);
 8009a3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009a56:	6879      	ldr	r1, [r7, #4]
 8009a58:	4805      	ldr	r0, [pc, #20]	; (8009a70 <CDC_Receive_FS+0x24>)
 8009a5a:	f7fe fbc1 	bl	80081e0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009a5e:	4804      	ldr	r0, [pc, #16]	; (8009a70 <CDC_Receive_FS+0x24>)
 8009a60:	f7fe fc22 	bl	80082a8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009a64:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3708      	adds	r7, #8
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	20000390 	.word	0x20000390

08009a74 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009a80:	2300      	movs	r3, #0
 8009a82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009a84:	4b0d      	ldr	r3, [pc, #52]	; (8009abc <CDC_Transmit_FS+0x48>)
 8009a86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a8a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d001      	beq.n	8009a9a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e00b      	b.n	8009ab2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009a9a:	887b      	ldrh	r3, [r7, #2]
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	6879      	ldr	r1, [r7, #4]
 8009aa0:	4806      	ldr	r0, [pc, #24]	; (8009abc <CDC_Transmit_FS+0x48>)
 8009aa2:	f7fe fb7b 	bl	800819c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009aa6:	4805      	ldr	r0, [pc, #20]	; (8009abc <CDC_Transmit_FS+0x48>)
 8009aa8:	f7fe fbb8 	bl	800821c <USBD_CDC_TransmitPacket>
 8009aac:	4603      	mov	r3, r0
 8009aae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	20000390 	.word	0x20000390

08009ac0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b087      	sub	sp, #28
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	4613      	mov	r3, r2
 8009acc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009ad2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	371c      	adds	r7, #28
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
	...

08009ae4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	4603      	mov	r3, r0
 8009aec:	6039      	str	r1, [r7, #0]
 8009aee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	2212      	movs	r2, #18
 8009af4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009af6:	4b03      	ldr	r3, [pc, #12]	; (8009b04 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr
 8009b04:	200000c8 	.word	0x200000c8

08009b08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	4603      	mov	r3, r0
 8009b10:	6039      	str	r1, [r7, #0]
 8009b12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	2204      	movs	r2, #4
 8009b18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009b1a:	4b03      	ldr	r3, [pc, #12]	; (8009b28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr
 8009b28:	200000dc 	.word	0x200000dc

08009b2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	4603      	mov	r3, r0
 8009b34:	6039      	str	r1, [r7, #0]
 8009b36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b38:	79fb      	ldrb	r3, [r7, #7]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d105      	bne.n	8009b4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	4907      	ldr	r1, [pc, #28]	; (8009b60 <USBD_FS_ProductStrDescriptor+0x34>)
 8009b42:	4808      	ldr	r0, [pc, #32]	; (8009b64 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b44:	f7ff fdf8 	bl	8009738 <USBD_GetString>
 8009b48:	e004      	b.n	8009b54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b4a:	683a      	ldr	r2, [r7, #0]
 8009b4c:	4904      	ldr	r1, [pc, #16]	; (8009b60 <USBD_FS_ProductStrDescriptor+0x34>)
 8009b4e:	4805      	ldr	r0, [pc, #20]	; (8009b64 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b50:	f7ff fdf2 	bl	8009738 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b54:	4b02      	ldr	r3, [pc, #8]	; (8009b60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3708      	adds	r7, #8
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	2000166c 	.word	0x2000166c
 8009b64:	0800a39c 	.word	0x0800a39c

08009b68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	4603      	mov	r3, r0
 8009b70:	6039      	str	r1, [r7, #0]
 8009b72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b74:	683a      	ldr	r2, [r7, #0]
 8009b76:	4904      	ldr	r1, [pc, #16]	; (8009b88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009b78:	4804      	ldr	r0, [pc, #16]	; (8009b8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009b7a:	f7ff fddd 	bl	8009738 <USBD_GetString>
  return USBD_StrDesc;
 8009b7e:	4b02      	ldr	r3, [pc, #8]	; (8009b88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	2000166c 	.word	0x2000166c
 8009b8c:	0800a3b4 	.word	0x0800a3b4

08009b90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	4603      	mov	r3, r0
 8009b98:	6039      	str	r1, [r7, #0]
 8009b9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	221a      	movs	r2, #26
 8009ba0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009ba2:	f000 f843 	bl	8009c2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009ba6:	4b02      	ldr	r3, [pc, #8]	; (8009bb0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3708      	adds	r7, #8
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	200000e0 	.word	0x200000e0

08009bb4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	4603      	mov	r3, r0
 8009bbc:	6039      	str	r1, [r7, #0]
 8009bbe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009bc0:	79fb      	ldrb	r3, [r7, #7]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d105      	bne.n	8009bd2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009bc6:	683a      	ldr	r2, [r7, #0]
 8009bc8:	4907      	ldr	r1, [pc, #28]	; (8009be8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009bca:	4808      	ldr	r0, [pc, #32]	; (8009bec <USBD_FS_ConfigStrDescriptor+0x38>)
 8009bcc:	f7ff fdb4 	bl	8009738 <USBD_GetString>
 8009bd0:	e004      	b.n	8009bdc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009bd2:	683a      	ldr	r2, [r7, #0]
 8009bd4:	4904      	ldr	r1, [pc, #16]	; (8009be8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009bd6:	4805      	ldr	r0, [pc, #20]	; (8009bec <USBD_FS_ConfigStrDescriptor+0x38>)
 8009bd8:	f7ff fdae 	bl	8009738 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bdc:	4b02      	ldr	r3, [pc, #8]	; (8009be8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3708      	adds	r7, #8
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	2000166c 	.word	0x2000166c
 8009bec:	0800a3c8 	.word	0x0800a3c8

08009bf0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	6039      	str	r1, [r7, #0]
 8009bfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bfc:	79fb      	ldrb	r3, [r7, #7]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d105      	bne.n	8009c0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	4907      	ldr	r1, [pc, #28]	; (8009c24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c06:	4808      	ldr	r0, [pc, #32]	; (8009c28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c08:	f7ff fd96 	bl	8009738 <USBD_GetString>
 8009c0c:	e004      	b.n	8009c18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	4904      	ldr	r1, [pc, #16]	; (8009c24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c12:	4805      	ldr	r0, [pc, #20]	; (8009c28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c14:	f7ff fd90 	bl	8009738 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c18:	4b02      	ldr	r3, [pc, #8]	; (8009c24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	2000166c 	.word	0x2000166c
 8009c28:	0800a3d4 	.word	0x0800a3d4

08009c2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009c32:	4b0f      	ldr	r3, [pc, #60]	; (8009c70 <Get_SerialNum+0x44>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009c38:	4b0e      	ldr	r3, [pc, #56]	; (8009c74 <Get_SerialNum+0x48>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009c3e:	4b0e      	ldr	r3, [pc, #56]	; (8009c78 <Get_SerialNum+0x4c>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4413      	add	r3, r2
 8009c4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d009      	beq.n	8009c66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009c52:	2208      	movs	r2, #8
 8009c54:	4909      	ldr	r1, [pc, #36]	; (8009c7c <Get_SerialNum+0x50>)
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f000 f814 	bl	8009c84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009c5c:	2204      	movs	r2, #4
 8009c5e:	4908      	ldr	r1, [pc, #32]	; (8009c80 <Get_SerialNum+0x54>)
 8009c60:	68b8      	ldr	r0, [r7, #8]
 8009c62:	f000 f80f 	bl	8009c84 <IntToUnicode>
  }
}
 8009c66:	bf00      	nop
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	1fff7a10 	.word	0x1fff7a10
 8009c74:	1fff7a14 	.word	0x1fff7a14
 8009c78:	1fff7a18 	.word	0x1fff7a18
 8009c7c:	200000e2 	.word	0x200000e2
 8009c80:	200000f2 	.word	0x200000f2

08009c84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b087      	sub	sp, #28
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009c92:	2300      	movs	r3, #0
 8009c94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009c96:	2300      	movs	r3, #0
 8009c98:	75fb      	strb	r3, [r7, #23]
 8009c9a:	e027      	b.n	8009cec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	0f1b      	lsrs	r3, r3, #28
 8009ca0:	2b09      	cmp	r3, #9
 8009ca2:	d80b      	bhi.n	8009cbc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	0f1b      	lsrs	r3, r3, #28
 8009ca8:	b2da      	uxtb	r2, r3
 8009caa:	7dfb      	ldrb	r3, [r7, #23]
 8009cac:	005b      	lsls	r3, r3, #1
 8009cae:	4619      	mov	r1, r3
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	440b      	add	r3, r1
 8009cb4:	3230      	adds	r2, #48	; 0x30
 8009cb6:	b2d2      	uxtb	r2, r2
 8009cb8:	701a      	strb	r2, [r3, #0]
 8009cba:	e00a      	b.n	8009cd2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	0f1b      	lsrs	r3, r3, #28
 8009cc0:	b2da      	uxtb	r2, r3
 8009cc2:	7dfb      	ldrb	r3, [r7, #23]
 8009cc4:	005b      	lsls	r3, r3, #1
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	440b      	add	r3, r1
 8009ccc:	3237      	adds	r2, #55	; 0x37
 8009cce:	b2d2      	uxtb	r2, r2
 8009cd0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	011b      	lsls	r3, r3, #4
 8009cd6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009cd8:	7dfb      	ldrb	r3, [r7, #23]
 8009cda:	005b      	lsls	r3, r3, #1
 8009cdc:	3301      	adds	r3, #1
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009ce6:	7dfb      	ldrb	r3, [r7, #23]
 8009ce8:	3301      	adds	r3, #1
 8009cea:	75fb      	strb	r3, [r7, #23]
 8009cec:	7dfa      	ldrb	r2, [r7, #23]
 8009cee:	79fb      	ldrb	r3, [r7, #7]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d3d3      	bcc.n	8009c9c <IntToUnicode+0x18>
  }
}
 8009cf4:	bf00      	nop
 8009cf6:	bf00      	nop
 8009cf8:	371c      	adds	r7, #28
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
	...

08009d04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b08a      	sub	sp, #40	; 0x28
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d0c:	f107 0314 	add.w	r3, r7, #20
 8009d10:	2200      	movs	r2, #0
 8009d12:	601a      	str	r2, [r3, #0]
 8009d14:	605a      	str	r2, [r3, #4]
 8009d16:	609a      	str	r2, [r3, #8]
 8009d18:	60da      	str	r2, [r3, #12]
 8009d1a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d24:	d13a      	bne.n	8009d9c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d26:	2300      	movs	r3, #0
 8009d28:	613b      	str	r3, [r7, #16]
 8009d2a:	4b1e      	ldr	r3, [pc, #120]	; (8009da4 <HAL_PCD_MspInit+0xa0>)
 8009d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d2e:	4a1d      	ldr	r2, [pc, #116]	; (8009da4 <HAL_PCD_MspInit+0xa0>)
 8009d30:	f043 0301 	orr.w	r3, r3, #1
 8009d34:	6313      	str	r3, [r2, #48]	; 0x30
 8009d36:	4b1b      	ldr	r3, [pc, #108]	; (8009da4 <HAL_PCD_MspInit+0xa0>)
 8009d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d3a:	f003 0301 	and.w	r3, r3, #1
 8009d3e:	613b      	str	r3, [r7, #16]
 8009d40:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009d42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d48:	2302      	movs	r3, #2
 8009d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d50:	2303      	movs	r3, #3
 8009d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009d54:	230a      	movs	r3, #10
 8009d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d58:	f107 0314 	add.w	r3, r7, #20
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	4812      	ldr	r0, [pc, #72]	; (8009da8 <HAL_PCD_MspInit+0xa4>)
 8009d60:	f7f8 fdba 	bl	80028d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009d64:	4b0f      	ldr	r3, [pc, #60]	; (8009da4 <HAL_PCD_MspInit+0xa0>)
 8009d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d68:	4a0e      	ldr	r2, [pc, #56]	; (8009da4 <HAL_PCD_MspInit+0xa0>)
 8009d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d6e:	6353      	str	r3, [r2, #52]	; 0x34
 8009d70:	2300      	movs	r3, #0
 8009d72:	60fb      	str	r3, [r7, #12]
 8009d74:	4b0b      	ldr	r3, [pc, #44]	; (8009da4 <HAL_PCD_MspInit+0xa0>)
 8009d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d78:	4a0a      	ldr	r2, [pc, #40]	; (8009da4 <HAL_PCD_MspInit+0xa0>)
 8009d7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d7e:	6453      	str	r3, [r2, #68]	; 0x44
 8009d80:	4b08      	ldr	r3, [pc, #32]	; (8009da4 <HAL_PCD_MspInit+0xa0>)
 8009d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d88:	60fb      	str	r3, [r7, #12]
 8009d8a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	2100      	movs	r1, #0
 8009d90:	2043      	movs	r0, #67	; 0x43
 8009d92:	f7f8 f9fa 	bl	800218a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009d96:	2043      	movs	r0, #67	; 0x43
 8009d98:	f7f8 fa13 	bl	80021c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009d9c:	bf00      	nop
 8009d9e:	3728      	adds	r7, #40	; 0x28
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	40023800 	.word	0x40023800
 8009da8:	40020000 	.word	0x40020000

08009dac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	4610      	mov	r0, r2
 8009dc4:	f7fe fb59 	bl	800847a <USBD_LL_SetupStage>
}
 8009dc8:	bf00      	nop
 8009dca:	3708      	adds	r7, #8
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009de2:	78fa      	ldrb	r2, [r7, #3]
 8009de4:	6879      	ldr	r1, [r7, #4]
 8009de6:	4613      	mov	r3, r2
 8009de8:	00db      	lsls	r3, r3, #3
 8009dea:	4413      	add	r3, r2
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	440b      	add	r3, r1
 8009df0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	78fb      	ldrb	r3, [r7, #3]
 8009df8:	4619      	mov	r1, r3
 8009dfa:	f7fe fb93 	bl	8008524 <USBD_LL_DataOutStage>
}
 8009dfe:	bf00      	nop
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b082      	sub	sp, #8
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
 8009e0e:	460b      	mov	r3, r1
 8009e10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009e18:	78fa      	ldrb	r2, [r7, #3]
 8009e1a:	6879      	ldr	r1, [r7, #4]
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	00db      	lsls	r3, r3, #3
 8009e20:	4413      	add	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	440b      	add	r3, r1
 8009e26:	334c      	adds	r3, #76	; 0x4c
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	78fb      	ldrb	r3, [r7, #3]
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	f7fe fc2c 	bl	800868a <USBD_LL_DataInStage>
}
 8009e32:	bf00      	nop
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b082      	sub	sp, #8
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7fe fd60 	bl	800890e <USBD_LL_SOF>
}
 8009e4e:	bf00      	nop
 8009e50:	3708      	adds	r7, #8
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b084      	sub	sp, #16
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d102      	bne.n	8009e70 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	73fb      	strb	r3, [r7, #15]
 8009e6e:	e008      	b.n	8009e82 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	2b02      	cmp	r3, #2
 8009e76:	d102      	bne.n	8009e7e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	73fb      	strb	r3, [r7, #15]
 8009e7c:	e001      	b.n	8009e82 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009e7e:	f7f7 f963 	bl	8001148 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e88:	7bfa      	ldrb	r2, [r7, #15]
 8009e8a:	4611      	mov	r1, r2
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7fe fd00 	bl	8008892 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7fe fca8 	bl	80087ee <USBD_LL_Reset>
}
 8009e9e:	bf00      	nop
 8009ea0:	3710      	adds	r7, #16
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
	...

08009ea8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fe fcfb 	bl	80088b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	6812      	ldr	r2, [r2, #0]
 8009eca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ece:	f043 0301 	orr.w	r3, r3, #1
 8009ed2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6a1b      	ldr	r3, [r3, #32]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d005      	beq.n	8009ee8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009edc:	4b04      	ldr	r3, [pc, #16]	; (8009ef0 <HAL_PCD_SuspendCallback+0x48>)
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	4a03      	ldr	r2, [pc, #12]	; (8009ef0 <HAL_PCD_SuspendCallback+0x48>)
 8009ee2:	f043 0306 	orr.w	r3, r3, #6
 8009ee6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ee8:	bf00      	nop
 8009eea:	3708      	adds	r7, #8
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	e000ed00 	.word	0xe000ed00

08009ef4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7fe fceb 	bl	80088de <USBD_LL_Resume>
}
 8009f08:	bf00      	nop
 8009f0a:	3708      	adds	r7, #8
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	460b      	mov	r3, r1
 8009f1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f22:	78fa      	ldrb	r2, [r7, #3]
 8009f24:	4611      	mov	r1, r2
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fe fd43 	bl	80089b2 <USBD_LL_IsoOUTIncomplete>
}
 8009f2c:	bf00      	nop
 8009f2e:	3708      	adds	r7, #8
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f46:	78fa      	ldrb	r2, [r7, #3]
 8009f48:	4611      	mov	r1, r2
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fe fcff 	bl	800894e <USBD_LL_IsoINIncomplete>
}
 8009f50:	bf00      	nop
 8009f52:	3708      	adds	r7, #8
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fe fd55 	bl	8008a16 <USBD_LL_DevConnected>
}
 8009f6c:	bf00      	nop
 8009f6e:	3708      	adds	r7, #8
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7fe fd52 	bl	8008a2c <USBD_LL_DevDisconnected>
}
 8009f88:	bf00      	nop
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d13c      	bne.n	800a01a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009fa0:	4a20      	ldr	r2, [pc, #128]	; (800a024 <USBD_LL_Init+0x94>)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a1e      	ldr	r2, [pc, #120]	; (800a024 <USBD_LL_Init+0x94>)
 8009fac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009fb0:	4b1c      	ldr	r3, [pc, #112]	; (800a024 <USBD_LL_Init+0x94>)
 8009fb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009fb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009fb8:	4b1a      	ldr	r3, [pc, #104]	; (800a024 <USBD_LL_Init+0x94>)
 8009fba:	2204      	movs	r2, #4
 8009fbc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009fbe:	4b19      	ldr	r3, [pc, #100]	; (800a024 <USBD_LL_Init+0x94>)
 8009fc0:	2202      	movs	r2, #2
 8009fc2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009fc4:	4b17      	ldr	r3, [pc, #92]	; (800a024 <USBD_LL_Init+0x94>)
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009fca:	4b16      	ldr	r3, [pc, #88]	; (800a024 <USBD_LL_Init+0x94>)
 8009fcc:	2202      	movs	r2, #2
 8009fce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009fd0:	4b14      	ldr	r3, [pc, #80]	; (800a024 <USBD_LL_Init+0x94>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009fd6:	4b13      	ldr	r3, [pc, #76]	; (800a024 <USBD_LL_Init+0x94>)
 8009fd8:	2200      	movs	r2, #0
 8009fda:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009fdc:	4b11      	ldr	r3, [pc, #68]	; (800a024 <USBD_LL_Init+0x94>)
 8009fde:	2200      	movs	r2, #0
 8009fe0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009fe2:	4b10      	ldr	r3, [pc, #64]	; (800a024 <USBD_LL_Init+0x94>)
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009fe8:	4b0e      	ldr	r3, [pc, #56]	; (800a024 <USBD_LL_Init+0x94>)
 8009fea:	2200      	movs	r2, #0
 8009fec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009fee:	480d      	ldr	r0, [pc, #52]	; (800a024 <USBD_LL_Init+0x94>)
 8009ff0:	f7fa f82a 	bl	8004048 <HAL_PCD_Init>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d001      	beq.n	8009ffe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009ffa:	f7f7 f8a5 	bl	8001148 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009ffe:	2180      	movs	r1, #128	; 0x80
 800a000:	4808      	ldr	r0, [pc, #32]	; (800a024 <USBD_LL_Init+0x94>)
 800a002:	f7fb fa82 	bl	800550a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a006:	2240      	movs	r2, #64	; 0x40
 800a008:	2100      	movs	r1, #0
 800a00a:	4806      	ldr	r0, [pc, #24]	; (800a024 <USBD_LL_Init+0x94>)
 800a00c:	f7fb fa36 	bl	800547c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a010:	2280      	movs	r2, #128	; 0x80
 800a012:	2101      	movs	r1, #1
 800a014:	4803      	ldr	r0, [pc, #12]	; (800a024 <USBD_LL_Init+0x94>)
 800a016:	f7fb fa31 	bl	800547c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3708      	adds	r7, #8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	2000186c 	.word	0x2000186c

0800a028 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a030:	2300      	movs	r3, #0
 800a032:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a034:	2300      	movs	r3, #0
 800a036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fa f91f 	bl	8004282 <HAL_PCD_Start>
 800a044:	4603      	mov	r3, r0
 800a046:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a048:	7bfb      	ldrb	r3, [r7, #15]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f000 f942 	bl	800a2d4 <USBD_Get_USB_Status>
 800a050:	4603      	mov	r3, r0
 800a052:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a054:	7bbb      	ldrb	r3, [r7, #14]
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b084      	sub	sp, #16
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	4608      	mov	r0, r1
 800a068:	4611      	mov	r1, r2
 800a06a:	461a      	mov	r2, r3
 800a06c:	4603      	mov	r3, r0
 800a06e:	70fb      	strb	r3, [r7, #3]
 800a070:	460b      	mov	r3, r1
 800a072:	70bb      	strb	r3, [r7, #2]
 800a074:	4613      	mov	r3, r2
 800a076:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a078:	2300      	movs	r3, #0
 800a07a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a07c:	2300      	movs	r3, #0
 800a07e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a086:	78bb      	ldrb	r3, [r7, #2]
 800a088:	883a      	ldrh	r2, [r7, #0]
 800a08a:	78f9      	ldrb	r1, [r7, #3]
 800a08c:	f7fa fdf0 	bl	8004c70 <HAL_PCD_EP_Open>
 800a090:	4603      	mov	r3, r0
 800a092:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a094:	7bfb      	ldrb	r3, [r7, #15]
 800a096:	4618      	mov	r0, r3
 800a098:	f000 f91c 	bl	800a2d4 <USBD_Get_USB_Status>
 800a09c:	4603      	mov	r3, r0
 800a09e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b084      	sub	sp, #16
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0c4:	78fa      	ldrb	r2, [r7, #3]
 800a0c6:	4611      	mov	r1, r2
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7fa fe39 	bl	8004d40 <HAL_PCD_EP_Close>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0d2:	7bfb      	ldrb	r3, [r7, #15]
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f000 f8fd 	bl	800a2d4 <USBD_Get_USB_Status>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a102:	78fa      	ldrb	r2, [r7, #3]
 800a104:	4611      	mov	r1, r2
 800a106:	4618      	mov	r0, r3
 800a108:	f7fa ff11 	bl	8004f2e <HAL_PCD_EP_SetStall>
 800a10c:	4603      	mov	r3, r0
 800a10e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a110:	7bfb      	ldrb	r3, [r7, #15]
 800a112:	4618      	mov	r0, r3
 800a114:	f000 f8de 	bl	800a2d4 <USBD_Get_USB_Status>
 800a118:	4603      	mov	r3, r0
 800a11a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a11c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a126:	b580      	push	{r7, lr}
 800a128:	b084      	sub	sp, #16
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
 800a12e:	460b      	mov	r3, r1
 800a130:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a132:	2300      	movs	r3, #0
 800a134:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a136:	2300      	movs	r3, #0
 800a138:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a140:	78fa      	ldrb	r2, [r7, #3]
 800a142:	4611      	mov	r1, r2
 800a144:	4618      	mov	r0, r3
 800a146:	f7fa ff56 	bl	8004ff6 <HAL_PCD_EP_ClrStall>
 800a14a:	4603      	mov	r3, r0
 800a14c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a14e:	7bfb      	ldrb	r3, [r7, #15]
 800a150:	4618      	mov	r0, r3
 800a152:	f000 f8bf 	bl	800a2d4 <USBD_Get_USB_Status>
 800a156:	4603      	mov	r3, r0
 800a158:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a15a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3710      	adds	r7, #16
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	460b      	mov	r3, r1
 800a16e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a176:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	da0b      	bge.n	800a198 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a180:	78fb      	ldrb	r3, [r7, #3]
 800a182:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a186:	68f9      	ldr	r1, [r7, #12]
 800a188:	4613      	mov	r3, r2
 800a18a:	00db      	lsls	r3, r3, #3
 800a18c:	4413      	add	r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	440b      	add	r3, r1
 800a192:	333e      	adds	r3, #62	; 0x3e
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	e00b      	b.n	800a1b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a198:	78fb      	ldrb	r3, [r7, #3]
 800a19a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a19e:	68f9      	ldr	r1, [r7, #12]
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	00db      	lsls	r3, r3, #3
 800a1a4:	4413      	add	r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	440b      	add	r3, r1
 800a1aa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a1ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3714      	adds	r7, #20
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1d6:	78fa      	ldrb	r2, [r7, #3]
 800a1d8:	4611      	mov	r1, r2
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7fa fd23 	bl	8004c26 <HAL_PCD_SetAddress>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1e4:	7bfb      	ldrb	r3, [r7, #15]
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f000 f874 	bl	800a2d4 <USBD_Get_USB_Status>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b086      	sub	sp, #24
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	60f8      	str	r0, [r7, #12]
 800a202:	607a      	str	r2, [r7, #4]
 800a204:	603b      	str	r3, [r7, #0]
 800a206:	460b      	mov	r3, r1
 800a208:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a20a:	2300      	movs	r3, #0
 800a20c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a20e:	2300      	movs	r3, #0
 800a210:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a218:	7af9      	ldrb	r1, [r7, #11]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	f7fa fe3c 	bl	8004e9a <HAL_PCD_EP_Transmit>
 800a222:	4603      	mov	r3, r0
 800a224:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a226:	7dfb      	ldrb	r3, [r7, #23]
 800a228:	4618      	mov	r0, r3
 800a22a:	f000 f853 	bl	800a2d4 <USBD_Get_USB_Status>
 800a22e:	4603      	mov	r3, r0
 800a230:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a232:	7dbb      	ldrb	r3, [r7, #22]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3718      	adds	r7, #24
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b086      	sub	sp, #24
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	607a      	str	r2, [r7, #4]
 800a246:	603b      	str	r3, [r7, #0]
 800a248:	460b      	mov	r3, r1
 800a24a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a24c:	2300      	movs	r3, #0
 800a24e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a250:	2300      	movs	r3, #0
 800a252:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a25a:	7af9      	ldrb	r1, [r7, #11]
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	f7fa fdb8 	bl	8004dd4 <HAL_PCD_EP_Receive>
 800a264:	4603      	mov	r3, r0
 800a266:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a268:	7dfb      	ldrb	r3, [r7, #23]
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 f832 	bl	800a2d4 <USBD_Get_USB_Status>
 800a270:	4603      	mov	r3, r0
 800a272:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a274:	7dbb      	ldrb	r3, [r7, #22]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3718      	adds	r7, #24
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b082      	sub	sp, #8
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	460b      	mov	r3, r1
 800a288:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a290:	78fa      	ldrb	r2, [r7, #3]
 800a292:	4611      	mov	r1, r2
 800a294:	4618      	mov	r0, r3
 800a296:	f7fa fde8 	bl	8004e6a <HAL_PCD_EP_GetRxCount>
 800a29a:	4603      	mov	r3, r0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a2ac:	4b03      	ldr	r3, [pc, #12]	; (800a2bc <USBD_static_malloc+0x18>)
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	370c      	adds	r7, #12
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	20001d78 	.word	0x20001d78

0800a2c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]

}
 800a2c8:	bf00      	nop
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b085      	sub	sp, #20
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	4603      	mov	r3, r0
 800a2dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a2e2:	79fb      	ldrb	r3, [r7, #7]
 800a2e4:	2b03      	cmp	r3, #3
 800a2e6:	d817      	bhi.n	800a318 <USBD_Get_USB_Status+0x44>
 800a2e8:	a201      	add	r2, pc, #4	; (adr r2, 800a2f0 <USBD_Get_USB_Status+0x1c>)
 800a2ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ee:	bf00      	nop
 800a2f0:	0800a301 	.word	0x0800a301
 800a2f4:	0800a307 	.word	0x0800a307
 800a2f8:	0800a30d 	.word	0x0800a30d
 800a2fc:	0800a313 	.word	0x0800a313
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a300:	2300      	movs	r3, #0
 800a302:	73fb      	strb	r3, [r7, #15]
    break;
 800a304:	e00b      	b.n	800a31e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a306:	2303      	movs	r3, #3
 800a308:	73fb      	strb	r3, [r7, #15]
    break;
 800a30a:	e008      	b.n	800a31e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a30c:	2301      	movs	r3, #1
 800a30e:	73fb      	strb	r3, [r7, #15]
    break;
 800a310:	e005      	b.n	800a31e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a312:	2303      	movs	r3, #3
 800a314:	73fb      	strb	r3, [r7, #15]
    break;
 800a316:	e002      	b.n	800a31e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a318:	2303      	movs	r3, #3
 800a31a:	73fb      	strb	r3, [r7, #15]
    break;
 800a31c:	bf00      	nop
  }
  return usb_status;
 800a31e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a320:	4618      	mov	r0, r3
 800a322:	3714      	adds	r7, #20
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <__libc_init_array>:
 800a32c:	b570      	push	{r4, r5, r6, lr}
 800a32e:	4d0d      	ldr	r5, [pc, #52]	; (800a364 <__libc_init_array+0x38>)
 800a330:	4c0d      	ldr	r4, [pc, #52]	; (800a368 <__libc_init_array+0x3c>)
 800a332:	1b64      	subs	r4, r4, r5
 800a334:	10a4      	asrs	r4, r4, #2
 800a336:	2600      	movs	r6, #0
 800a338:	42a6      	cmp	r6, r4
 800a33a:	d109      	bne.n	800a350 <__libc_init_array+0x24>
 800a33c:	4d0b      	ldr	r5, [pc, #44]	; (800a36c <__libc_init_array+0x40>)
 800a33e:	4c0c      	ldr	r4, [pc, #48]	; (800a370 <__libc_init_array+0x44>)
 800a340:	f000 f820 	bl	800a384 <_init>
 800a344:	1b64      	subs	r4, r4, r5
 800a346:	10a4      	asrs	r4, r4, #2
 800a348:	2600      	movs	r6, #0
 800a34a:	42a6      	cmp	r6, r4
 800a34c:	d105      	bne.n	800a35a <__libc_init_array+0x2e>
 800a34e:	bd70      	pop	{r4, r5, r6, pc}
 800a350:	f855 3b04 	ldr.w	r3, [r5], #4
 800a354:	4798      	blx	r3
 800a356:	3601      	adds	r6, #1
 800a358:	e7ee      	b.n	800a338 <__libc_init_array+0xc>
 800a35a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a35e:	4798      	blx	r3
 800a360:	3601      	adds	r6, #1
 800a362:	e7f2      	b.n	800a34a <__libc_init_array+0x1e>
 800a364:	0800a40c 	.word	0x0800a40c
 800a368:	0800a40c 	.word	0x0800a40c
 800a36c:	0800a40c 	.word	0x0800a40c
 800a370:	0800a410 	.word	0x0800a410

0800a374 <memset>:
 800a374:	4402      	add	r2, r0
 800a376:	4603      	mov	r3, r0
 800a378:	4293      	cmp	r3, r2
 800a37a:	d100      	bne.n	800a37e <memset+0xa>
 800a37c:	4770      	bx	lr
 800a37e:	f803 1b01 	strb.w	r1, [r3], #1
 800a382:	e7f9      	b.n	800a378 <memset+0x4>

0800a384 <_init>:
 800a384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a386:	bf00      	nop
 800a388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a38a:	bc08      	pop	{r3}
 800a38c:	469e      	mov	lr, r3
 800a38e:	4770      	bx	lr

0800a390 <_fini>:
 800a390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a392:	bf00      	nop
 800a394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a396:	bc08      	pop	{r3}
 800a398:	469e      	mov	lr, r3
 800a39a:	4770      	bx	lr
